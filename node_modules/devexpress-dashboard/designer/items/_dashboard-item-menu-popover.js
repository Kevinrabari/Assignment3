/**
* DevExpress Dashboard (_dashboard-item-menu-popover.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPopoverOptionsGetterFunction = void 0;
var ko = require("knockout");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _utils_1 = require("../../data/_utils");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var createPopoverOptionsGetterFunction = function (menuItem, dashboardItemMenu) { return function (rootContainer) {
    var viewerBoundary = rootContainer.querySelector('.dx-dashboard-layout-container');
    var itemMenuElement = rootContainer.querySelector('.dx-dashboard-item-menu-container.dx-state-selected .dx-dashboard-item-menu .dx-dashboard-' + menuItem.menuItemId + '-options-button');
    var itemMenuItemVisible = ko.observable(true);
    var getHeight = function () { return viewerBoundary.clientHeight; };
    var repaintComponentFunction = null;
    var resizeObserver = null;
    var intersectionObserver = null;
    var disposed = false;
    var popoverVisible = ko.pureComputed(function () {
        return menuItem.detailVisible() && itemMenuItemVisible();
    });
    return {
        target: itemMenuElement,
        container: rootContainer,
        visible: popoverVisible,
        position: {
            my: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, function (args) { return args.isLeft ? 'right' : 'left'; }),
            at: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, function (args) { return args.isLeft ? 'left' : 'right'; }),
            boundary: viewerBoundary,
            collision: 'flipfit',
            boundaryOffset: '0, 0',
            offset: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, function (arg) { return arg.isLeft ? '+10, 0' : '-10, 0'; })
        },
        height: getHeight(),
        width: ko.unwrap(menuItem.panelWidth) + 2,
        hoverStateEnabled: false,
        onShown: function (options) {
            _jquery_helpers_1.$unwrap(options.component._$content).classList.add('dx-state-hover');
        },
        hideOnOutsideClick: false,
        animation: { enabled: false },
        onInitialized: function (args) {
            var popupComponent = args.component;
            var setPopupHeightDebounce = _utils_1.debounce(function () {
                popupComponent.option('height', getHeight());
            }, 1);
            resizeObserver = new ResizeObserver(function (entries) { return entries[0] && setPopupHeightDebounce(); });
            resizeObserver.observe(viewerBoundary);
            intersectionObserver = new IntersectionObserver(function (entries) {
                entries[0] && itemMenuItemVisible(entries[0].intersectionRatio > 0);
            }, { root: viewerBoundary, rootMargin: '-36px' });
            intersectionObserver.observe(itemMenuElement);
            repaintComponentFunction = _utils_1.debounce(function () {
                if (!disposed) {
                    popupComponent.repaint();
                }
            }, 1);
            dashboardItemMenu.layoutController.subscribeOnScroll(repaintComponentFunction);
            dashboardItemMenu.subscribeLayoutItemRepaintRequest(repaintComponentFunction);
        },
        onDisposing: function () {
            disposed = true;
            resizeObserver && resizeObserver.unobserve(viewerBoundary);
            intersectionObserver && intersectionObserver.unobserve(itemMenuElement);
            dashboardItemMenu.layoutController.unsubscribeOnScroll(repaintComponentFunction);
            dashboardItemMenu.unsubscribeLayoutItemRepaintRequest(repaintComponentFunction);
            popoverVisible.dispose();
        },
        hideOnParentScroll: false,
        wrapperAttr: _knockout_utils_1.safeComputed({ isLeft: dashboardItemMenu.isLeft }, function (args) {
            var classes = [
                'dx-dashboard-property-grid',
                'dx-disappearing-overlay',
                'dx-dashboard-context-menu-container',
                'dx-menu-position-' + (args.isLeft ? 'left' : 'right')
            ];
            if (menuItem.popoverClass)
                classes.push(menuItem.popoverClass);
            return {
                class: classes.join(' ')
            };
        })
    };
}; };
exports.createPopoverOptionsGetterFunction = createPopoverOptionsGetterFunction;
