/**
* DevExpress Dashboard (_data-item-container-seed.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataItemContainerSeed = void 0;
var ko = require("knockout");
var model_1 = require("../../../model");
var _data_field_1 = require("../../../model/data-sources/_data-field");
var data_item_container_1 = require("../../../model/items/data-item-container");
var _base_metadata_1 = require("../../../model/metadata/_base-metadata");
var DataItemContainerSeed = (function (_super) {
    __extends(DataItemContainerSeed, _super);
    function DataItemContainerSeed(dataItemProvider, dataItemType, _fieldConstraint) {
        var _this = _super.call(this) || this;
        _this.dataItemType = dataItemType;
        _this._fieldConstraint = _fieldConstraint;
        _this.name = ko.observable('NewContainer');
        _this.dataLink = new model_1.DataItemLink(dataItemProvider);
        _this.dataLink.itemType('Seed');
        return _this;
    }
    DataItemContainerSeed.prototype._getDataId = function () {
        return null;
    };
    DataItemContainerSeed.prototype._getContainerType = function () {
        return 'Stub';
    };
    DataItemContainerSeed.prototype._getBindingModel = function () {
        return [{
                propertyName: 'dataLink',
                dataItemType: this.dataItemType,
                emptyPlaceholder: 'Data',
                selectedPlaceholder: 'Configure Data',
                fieldConstraint: this._fieldConstraint
            }];
    };
    DataItemContainerSeed.prototype.grow = function (dataItemProvider, bindingProperty, dataField) {
        var containerModels = [];
        if (!_data_field_1.IsOlapHierarchyField(dataField)) {
            var cm = bindingProperty.creator(undefined, dataField);
            var dataItem = dataItemProvider._createDataItem(dataField, cm._getBindingModel()[0]);
            var newDataItemBinding = cm._getBindingModel()[0];
            cm[newDataItemBinding.propertyName].uniqueName(dataItem.uniqueName());
            containerModels.push(cm);
        }
        else {
            dataField.groupDataItems.forEach(function (groupItem) {
                var cm = bindingProperty.creator(undefined, groupItem);
                var dataItem = dataItemProvider._createDataItem(groupItem, cm._getBindingModel()[0]);
                dataItem.groupIndex(dataField.groupIndex());
                var newDataItemBinding = cm._getBindingModel()[0];
                cm[newDataItemBinding.propertyName].uniqueName(dataItem.uniqueName());
                containerModels.push(cm);
            });
        }
        return containerModels;
    };
    DataItemContainerSeed.prototype._getInfoCore = function () {
        return [_base_metadata_1.itemType, _base_metadata_1.name];
    };
    DataItemContainerSeed.prototype._getDefaultItemType = function () {
        return 'Stub';
    };
    return DataItemContainerSeed;
}(data_item_container_1.DataItemContainer));
exports.DataItemContainerSeed = DataItemContainerSeed;
