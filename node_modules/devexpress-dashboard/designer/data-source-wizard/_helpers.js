/**
* DevExpress Dashboard (_helpers.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renameDataMember = exports.FederationDataSourceAnalyticsWrapper = exports.FederationDataSourceProviderWrapper = exports.getFederationFieldList = exports.createWizardSettings = exports.createDataSourceInfos = exports.addOrUpdateQuery = exports.initialQueryAliasSymbol = exports.toAnalyticsFederationDataSource = exports.toSameSourcesFederationQuery = exports.addSourceIfNotExists = exports.toFederationDataSource = exports.createNewFederationDataSource = exports.getDataSourceInfo = void 0;
var analytics_data_1 = require("@devexpress/analytics-core/analytics-data");
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var analytics_wizard_1 = require("@devexpress/analytics-core/analytics-wizard");
var analytics_wizard_internal_1 = require("@devexpress/analytics-core/analytics-wizard-internal");
var utils_1 = require("@devexpress/analytics-core/query-builder/dataSource/utils");
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var _utils_1 = require("../../data/_utils");
var model_1 = require("../../model");
var json_data_source_1 = require("../../model/data-sources/json-data-source");
var _helper_classes_1 = require("../../model/internal/_helper-classes");
var _field_list_provider_1 = require("./pages/_field-list-provider");
function getDataSourceInfo(dataSource) {
    var dataSourceInfo = {
        name: dataSource.name(),
        data: null,
        id: dataSource.componentName(),
        isSqlDataSource: dataSource instanceof model_1.SqlDataSource,
        isJsonDataSource: dataSource instanceof json_data_source_1.JsonDataSource,
        isObjectDataSource: dataSource instanceof model_1.ObjectDataSource,
        isFederationDataSource: dataSource instanceof model_1.FederationDataSource,
        isListType: !dataSource.supportDataMembers,
        isSupportQueries: dataSource.supportDataMembers
    };
    return __assign(__assign({}, dataSourceInfo), { componentName: dataSource.componentName() });
}
exports.getDataSourceInfo = getDataSourceInfo;
function createNewFederationDataSource(federationWizardModel, usedDataSources) {
    var analyticsDataSource = analytics_wizard_1._restoreFederationDataSourceFromState(federationWizardModel, usedDataSources);
    var federationDataSource = toFederationDataSource(analyticsDataSource, usedDataSources());
    federationDataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultFederationDataSourceName'));
    return federationDataSource;
}
exports.createNewFederationDataSource = createNewFederationDataSource;
function toFederationDataSource(analyticsDataSource, usedDataSources) {
    var federationDataSource = new model_1.FederationDataSource({ '@ItemType': 'FederationDataSource' }, new analytics_utils_1.ModelSerializer());
    analyticsDataSource.sources().forEach(function (analyticsSource) {
        var source = toFederationSource(analyticsSource, usedDataSources);
        federationDataSource.sources.push(source);
    });
    analyticsDataSource.queries().forEach(function (analyticsQuery) {
        var query = toSameSourcesFederationQuery(analyticsQuery);
        federationDataSource.queries.push(query);
    });
    return federationDataSource;
}
exports.toFederationDataSource = toFederationDataSource;
function toFederationSource(analyticsSource, usedDataSources) {
    var source = new model_1.Source({ '@ItemType': 'Source' });
    source.name(analyticsSource.sourceName());
    source.dataMember(analyticsSource.dataMember() || '');
    var dataSourceInfoName = getDataSourceName(analyticsSource.sourceName(), analyticsSource.dataMember());
    var dataSourceInfo = usedDataSources.find(function (dsInfo) { return dsInfo.name === dataSourceInfoName; });
    if (!dataSourceInfo)
        throw new Error("The dashboard DataSource for SourceName '" + analyticsSource.sourceName() + "' is not found.");
    source.dataSource(dataSourceInfo.componentName);
    return source;
}
function getDataSourceName(analyticsSourceName, analyticsDataMember) {
    return analyticsSourceName && analyticsDataMember ? analyticsSourceName.slice(0, -(analyticsDataMember.length + 1)) : analyticsSourceName;
}
function addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, usedDataSources) {
    var existingSource = dashboardFederationDataSource.sources().find(function (s) { return s.name() === analyticsSource.sourceName(); });
    if (existingSource === undefined) {
        var newSource = toFederationSource(analyticsSource, usedDataSources);
        dashboardFederationDataSource.sources.push(newSource);
    }
}
exports.addSourceIfNotExists = addSourceIfNotExists;
function toSameSourcesFederationQuery(analyticsQuery) {
    var analyticsQueryJson = new analytics_utils_1.ModelSerializer().serialize(analyticsQuery);
    return new model_1.QueryNode(analyticsQueryJson);
}
exports.toSameSourcesFederationQuery = toSameSourcesFederationQuery;
function toAnalyticsFederationDataSource(federationDataSource, usedDataSources, dataSourceBrowser) {
    var observableDataSourceInfos = ko.observableArray(usedDataSources);
    var fieldListProvider = new analytics_internal_1.FieldListProvider(function (pathRequest) { return getFederationFieldList(pathRequest, dataSourceBrowser); }, observableDataSourceInfos, [new analytics_wizard_internal_1.FederationDataSourceItemsExtender(observableDataSourceInfos)], true);
    var analyticsFederationDataSource = new FederationDataSourceAnalyticsWrapper(federationDataSource.sources(), observableDataSourceInfos, fieldListProvider);
    analyticsFederationDataSource.name(federationDataSource.name());
    federationDataSource.sources().forEach(function (source) {
        var analyticsSource = toAnalyticsFederationSource(source);
        analyticsFederationDataSource.sources.push(analyticsSource);
    });
    federationDataSource.queries().forEach(function (query) {
        var analyticsQuery = toSameSourcesAnalyticsFederationQuery(query, analyticsFederationDataSource);
        analyticsFederationDataSource.queries.push(analyticsQuery);
    });
    return analyticsFederationDataSource;
}
exports.toAnalyticsFederationDataSource = toAnalyticsFederationDataSource;
function toAnalyticsFederationSource(source) {
    var analyticsSource = new analytics_data_1.FederationSource({});
    analyticsSource.dataMember(source.dataMember());
    analyticsSource.sourceName(source.name());
    return analyticsSource;
}
exports.initialQueryAliasSymbol = '__initialQuery';
function toSameSourcesAnalyticsFederationQuery(query, analyticsFederationDataSource) {
    var queryJson = new analytics_utils_1.ModelSerializer().serialize(query);
    var analyticsQuery = analyticsFederationDataSource.createQuery(queryJson);
    analyticsQuery[exports.initialQueryAliasSymbol] = query.alias();
    return analyticsQuery;
}
function addOrUpdateQuery(dashboard, federationDataSource, index, newQuery) {
    _helper_classes_1.Guard.isNotFalsy(newQuery, "'newQuery'");
    _helper_classes_1.Guard.requires(!federationDataSource.queries().some(function (q, i) { return i !== index && q === newQuery; }));
    var oldQuery = federationDataSource.queries()[index];
    if (oldQuery === newQuery)
        return;
    if (oldQuery)
        federationDataSource.queries.splice(index, 1, newQuery);
    else
        federationDataSource.queries.push(newQuery);
    var nameIndex = 1;
    var baseAlias = newQuery.alias();
    var newQueryAlias = baseAlias;
    while (federationDataSource.queries().find(function (q, i) { return i !== index && q.alias() === newQueryAlias; }) !== undefined) {
        newQueryAlias = baseAlias + ' ' + nameIndex++;
    }
    newQuery.alias(newQueryAlias);
    if (oldQuery && newQuery.alias() !== oldQuery.alias()) {
        renameDataMember(dashboard, federationDataSource, oldQuery.alias(), newQuery.alias());
    }
}
exports.addOrUpdateQuery = addOrUpdateQuery;
function createDataSourceInfos(dashboardDataSources) {
    var dataSourceInfos = dashboardDataSources.map(function (ds) { return getDataSourceInfo(ds); });
    var dataSourceInfosByName = new Map();
    for (var _i = 0, dataSourceInfos_1 = dataSourceInfos; _i < dataSourceInfos_1.length; _i++) {
        var info = dataSourceInfos_1[_i];
        var inDict = dataSourceInfosByName.get(info.name);
        if (inDict !== undefined)
            inDict.push(info);
        else
            dataSourceInfosByName.set(info.name, [info]);
    }
    dataSourceInfosByName.forEach(function (infos, name) {
        for (var i = 1; i < infos.length; i++)
            infos[i].name = name + ' ' + i;
    });
    return dataSourceInfos.map(function (info) {
        return __assign(__assign({}, info), { id: info.componentName });
    });
}
exports.createDataSourceInfos = createDataSourceInfos;
function createWizardSettings(publicSettings) {
    return {
        enableSqlDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableSqlDataSource) ? publicSettings.enableSqlDataSource : true,
        enableJsonDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableJsonDataSource) ? publicSettings.enableJsonDataSource : true,
        enableObjectDataSource: false,
        enableFederationDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableFederationDataSource) ? publicSettings.enableFederationDataSource : true,
        enableOlapDataSource: publicSettings && _utils_1.type.isDefined(publicSettings.enableOlapDataSource) ? publicSettings.enableOlapDataSource : true,
    };
}
exports.createWizardSettings = createWizardSettings;
function getFederationFieldList(pathRequest, dataSourceBrowser) {
    return _field_list_provider_1.getFieldList(pathRequest, new _field_list_provider_1.FlatteningDataFieldsProviderWrapper(dataSourceBrowser, function (field) { return field && (field.isDataTableNode && field.isDataTableNode() || field.isExpressionsNode && field.isExpressionsNode()); }), new FederationDataSourceProviderWrapper(dataSourceBrowser), function (field) { return field && field.nodeType() !== 'CalculatedDataField'; });
}
exports.getFederationFieldList = getFederationFieldList;
var FederationDataSourceProviderWrapper = (function () {
    function FederationDataSourceProviderWrapper(basic) {
        this._basic = basic;
    }
    FederationDataSourceProviderWrapper.prototype.findDataSource = function (name) {
        var basicDataSource = this._basic.findDataSource(name);
        return basicDataSource && basicDataSource._isFederationDataProvider ? basicDataSource : undefined;
    };
    return FederationDataSourceProviderWrapper;
}());
exports.FederationDataSourceProviderWrapper = FederationDataSourceProviderWrapper;
var FederationDataSourceAnalyticsWrapper = (function (_super) {
    __extends(FederationDataSourceAnalyticsWrapper, _super);
    function FederationDataSourceAnalyticsWrapper(sources, dataSources, fieldListProvider) {
        var _this = _super.call(this, {}, dataSources, fieldListProvider, new analytics_utils_1.ModelSerializer()) || this;
        _this._sources = sources;
        _this._dataSources = dataSources();
        return _this;
    }
    FederationDataSourceAnalyticsWrapper.prototype.getQueryNameFromPath = function (path) {
        if (!path)
            return '';
        var pathParts = path.split('.');
        _helper_classes_1.Guard.requires(!!pathParts && !!pathParts.length);
        var dataSourceInfo = this._dataSources.find(function (x) { return x.ref == pathParts[0] || x.id == pathParts[0]; });
        if (dataSourceInfo === undefined)
            throw new Error("The dataSource for path '" + path + "' cannot be found.");
        var sameDataSourceSources = this._sources.filter(function (s) { return s.dataSource() === dataSourceInfo.componentName; });
        if (!sameDataSourceSources || sameDataSourceSources.length === 0)
            return _super.prototype.getQueryNameFromPath.call(this, path);
        if (sameDataSourceSources.length === 1) {
            return sameDataSourceSources[0].name();
        }
        else {
            var dataMember_1 = pathParts.slice(1).join('.');
            var source = sameDataSourceSources.find(function (s) { return s.dataMember() === dataMember_1; });
            if (source === undefined)
                return _super.prototype.getQueryNameFromPath.call(this, path);
            return source.name();
        }
    };
    FederationDataSourceAnalyticsWrapper.prototype.getPathFromQueryName = function (sourceName) {
        var source = this._sources.find(function (s) { return s.name() === sourceName; });
        if (source === undefined)
            return _super.prototype.getPathFromQueryName.call(this, sourceName);
        return getPath(source);
    };
    FederationDataSourceAnalyticsWrapper.prototype.createQuery = function (queryJson) {
        var _this = this;
        var query = _super.prototype.createQuery.call(this, queryJson);
        if (query.queryType() === utils_1.FederationQueryType[utils_1.FederationQueryType.UnionNode]) {
            query.getQueryNameFromPath = function (path) { return _this.getQueryNameFromPath(path); };
            query.getPathFromQueryName = function (sourceName) { return _this.getPathFromQueryName(sourceName); };
        }
        return query;
    };
    return FederationDataSourceAnalyticsWrapper;
}(analytics_data_1.FederationDataSource));
exports.FederationDataSourceAnalyticsWrapper = FederationDataSourceAnalyticsWrapper;
function getPath(source) {
    _helper_classes_1.Guard.isNotFalsy(source, 'source');
    return !!source.dataMember() ? source.dataSource() + '.' + source.dataMember() : source.dataSource();
}
function renameDataMember(dashboard, dataSource, oldDataMember, newDataMember) {
    dashboard.items()
        .filter(function (item) { return item instanceof model_1.DataDashboardItem
        && item.dataSource() === dataSource.componentName()
        && item.dataMember() === oldDataMember; })
        .forEach(function (item) {
        item.dataMember(newDataMember);
    });
    dataSource.calculatedFields()
        .filter(function (calcField) { return calcField.dataMember() === oldDataMember; })
        .forEach(function (calcField) { return calcField.dataMember(newDataMember); });
    dashboard.parameters()
        .map(function (parameter) { return parameter.dynamicListLookUpSettings(); })
        .filter(function (lookUpSettings) { return !!lookUpSettings
        && lookUpSettings.dataSource() === dataSource.componentName()
        && lookUpSettings.dataMember() === oldDataMember; })
        .forEach(function (lookUpSettings) { return lookUpSettings.dataMember(newDataMember); });
    dashboard.colorScheme()
        .filter(function (entry) { return entry.dataMember() === oldDataMember; })
        .forEach(function (entry) { return entry.dataMember(newDataMember); });
    dashboard.items()
        .filter(function (item) { return item instanceof model_1.DataDashboardItem; })
        .map(function (item) { return item.colorScheme(); })
        .forEach(function (colorScheme) { return colorScheme
        .filter(function (entry) { return entry.dataMember() === oldDataMember; })
        .forEach(function (entry) { return entry.dataMember(newDataMember); }); });
}
exports.renameDataMember = renameDataMember;
