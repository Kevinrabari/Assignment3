/**
* DevExpress Dashboard (data-source-wizard-extension.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiQueryDataSourceWizardExtension = exports.DataSourceWizardExtension = void 0;
var analytics_data_1 = require("@devexpress/analytics-core/analytics-data");
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var analytics_wizard_1 = require("@devexpress/analytics-core/analytics-wizard");
var analytics_wizard_internal_1 = require("@devexpress/analytics-core/analytics-wizard-internal");
var queryBuilder_widgets_internal_1 = require("@devexpress/analytics-core/queryBuilder-widgets-internal");
var string_1 = require("devextreme/core/utils/string");
var ko = require("knockout");
var control_options_1 = require("../../common/control-options");
var _options_manager_1 = require("../../common/internal/_options-manager");
var _default_1 = require("../../data/localization/_default");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var dashboard_1 = require("../../model/dashboard");
var json_data_source_1 = require("../../model/data-sources/json-data-source");
var _obsolete_helper_1 = require("../../model/internal/_obsolete-helper");
var _data_source_wizard_model_1 = require("./models/_data-source-wizard-model");
var _parameters_item_provider_1 = require("./pages/_parameters-item-provider");
var _data_source_wizard_1 = require("./wizards/_data-source-wizard");
var _edit_json_data_source_wizard_1 = require("./wizards/_edit-json-data-source-wizard");
var _multi_query_data_source_wizard_1 = require("./wizards/_multi-query-data-source-wizard");
var _helpers_1 = require("./_helpers");
var name = 'data-source-wizard';
var nameAlias = 'dataSourceWizard';
var DataSourceWizardExtension = (function () {
    function DataSourceWizardExtension(dashboardControl, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.dashboardControl = dashboardControl;
        this._subscriptions = [];
        this._loadingPanelVisible = ko.observable(false);
        this._wizardElement = ko.observable();
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._customTemplate = {
            name: 'dx-dashboard-data-source-wizard',
            data: {
                loadingPanelVisible: this._loadingPanelVisible,
                wizardElement: this._wizardElement
            }
        };
        this.name = name;
        var defaultOptions = {
            enableCustomSql: false,
            allowCreateNewJsonConnection: false,
            wizardSettings: {
                enableSqlDataSource: true,
                enableOlapDataSource: true,
                enableJsonDataSource: true,
                enableFederationDataSource: true
            }
        };
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: defaultOptions,
            eventsHolder: this,
            initOptions: options,
            optionChanged: function (args) { return _this._optionChanged(args); }
        });
        this._requestWrapper = new _data_source_wizard_model_1.DashboardRequestWrapper(dashboardControl);
        this._dashboardParameters = ko.computed(function () { return dashboardControl.dashboard() && dashboardControl.dashboard().parameters() || []; });
        this._getConnectionStringsCallback = function () {
            return _this.dashboardControl.remoteService.getFromServer(dashboardControl._endpointCollection.dataSourceWizardUrls.GetConnectionStringsAction)
                .fail(function (request) {
                _this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToConnectionStrings'), request);
            });
        };
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'createDataSource',
            oldMemberDisplayName: 'DataSourceWizardExtension.createDataSource',
            newMemberDisplayName: 'DataSourceWizardExtension.showDataSourceCreatingDialog',
            action: function (dataSources) {
                _this.showDataSourceCreatingDialog().done(function (dataSource) {
                    dataSources.push(dataSource);
                });
            }
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'editSqlQuery',
            oldMemberDisplayName: 'DataSourceWizardExtension.editSqlQuery',
            newMemberDisplayName: 'DataSourceWizardExtension.showSqlQueryEditingDialog',
            action: function (dashboardSqlDataSource, queryName) {
                _this.showSqlQueryEditingDialog(dashboardSqlDataSource, queryName);
            }
        });
    }
    DataSourceWizardExtension._convertDataSource = function (dashboardSqlDataSource, requestWrapper) {
        var serializer = new analytics_utils_1.ModelSerializer({ useRefs: false });
        return dashboardSqlDataSource ?
            new analytics_data_1.SqlDataSource(serializer.serialize(dashboardSqlDataSource), serializer, requestWrapper) :
            new analytics_data_1.SqlDataSource({}, serializer, requestWrapper);
    };
    Object.defineProperty(DataSourceWizardExtension.prototype, "isCustomSqlEnabled", {
        get: function () { return this._optionsManager.get('enableCustomSql'); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSourceWizardExtension.prototype, "_dataSourceBrowser", {
        get: function () { return this.dashboardControl._dataSourceBrowser; },
        enumerable: false,
        configurable: true
    });
    DataSourceWizardExtension.prototype.start = function () {
        this.dashboardControl.customTemplates.push(this._customTemplate);
    };
    DataSourceWizardExtension.prototype.stop = function () {
        this.dashboardControl.customTemplates.remove(this._customTemplate);
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    DataSourceWizardExtension.prototype.showDataSourceCreatingDialog = function () {
        return this._showDataSourceCreatingDialog(this._getFederationDataProviders());
    };
    DataSourceWizardExtension.prototype._getDashboardDataSources = function () {
        return this.dashboardControl.dashboard() && this.dashboardControl.dashboard().dataSources() || [];
    };
    DataSourceWizardExtension.prototype._getFederationDataProviders = function () {
        return this._getDashboardDataSources().filter(function (ds) { return ds._isFederationDataProvider; });
    };
    DataSourceWizardExtension.prototype._showDataSourceCreatingDialog = function (federationDataProviders) {
        var _this = this;
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var loadingConnectionsStrings = true;
        this._loadingPanelVisible(true);
        var stopLoading = function () {
            loadingPanelSubscription.dispose();
            loadingConnectionsStrings = false;
        };
        var loadingPanelSubscription = this._loadingPanelVisible.subscribe(function (newValue) {
            if (!newValue && loadingConnectionsStrings) {
                stopLoading();
                deferred.reject();
            }
        });
        var dashboardConnectionStrings = {
            sql: ko.observableArray()
        };
        this._getConnectionStringsCallback()
            .done(function (connectionStrings) {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                dashboardConnectionStrings = {
                    sql: ko.observableArray(connectionStrings.filter(function (c) { return c.connectionType === 'Sql'; })),
                    json: ko.observableArray(connectionStrings.filter(function (c) { return c.connectionType === 'Json'; })),
                    olap: connectionStrings.filter(function (c) { return c.connectionType === 'Olap'; }),
                };
            }
        })
            .always(function () {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                var wizardFederationSources = _helpers_1.createDataSourceInfos(federationDataProviders);
                var dataSourceWizard = _this.createDataSourceWizard(dashboardConnectionStrings, wizardFederationSources);
                _this._initializeDataSourceWizard(dataSourceWizard, deferred);
                _this._renderAndStartWizard(dataSourceWizard);
                _this._loadingPanelVisible(false);
            }
        });
        return deferred.promise();
    };
    DataSourceWizardExtension.prototype.showSqlQueryEditingDialog = function (dashboardSqlDataSource, queryName) {
        var _this = this;
        if (queryName && dashboardSqlDataSource.queries().filter(function (q) { return q.name() === queryName; }).length === 0)
            throw new Error(string_1.format(_default_1.getLocalizationById('DashboardWebStringId.Notification.QueryDoesNotExist'), queryName));
        var dataSource = DataSourceWizardExtension._convertDataSource(dashboardSqlDataSource, this._requestWrapper);
        var singleDataSourceWizard = this._createEditQueryWizard();
        singleDataSourceWizard.initialize({
            sqlDataSourceWizard: {
                sqlDataSourceJSON: JSON.stringify(new analytics_utils_1.ModelSerializer().serialize(dataSource)),
                queryName: queryName
            }
        }, function (factory, stateManager) { return new _data_source_wizard_1.EditQueryWizardIterator(factory, stateManager); });
        singleDataSourceWizard['_finishCallback'] = function (state) {
            var model = analytics_wizard_1._restoreSqlDataSourceFromState(state.sqlDataSourceWizard);
            var queryIndex = model['_queryIndex'];
            var query = model.sqlQuery;
            if (queryIndex === dashboardSqlDataSource.queries().length) {
                dashboardSqlDataSource.queries.push(query);
            }
            else {
                var oldQuery = dashboardSqlDataSource.queries()[queryIndex];
                dashboardSqlDataSource.queries.splice(queryIndex, 1, query);
                if (oldQuery.name() !== query.name()) {
                    _helpers_1.renameDataMember(_this.dashboardControl.dashboard(), dashboardSqlDataSource, oldQuery.name(), query.name());
                }
            }
            var def = _jquery_helpers_1.createJQueryDeferred();
            def.resolve();
            return def.promise();
        };
        this._renderAndStartWizard(singleDataSourceWizard);
    };
    DataSourceWizardExtension.prototype.showFederationQueryEditingDialog = function (dashboardFederationDataSource, queryName) {
        var _this = this;
        var element = this._wizardElement();
        if (element) {
            var queryIndex_1 = dashboardFederationDataSource.queries().findIndex(function (q) { return q.alias() === queryName; });
            if (queryIndex_1 === -1)
                throw new Error(string_1.format(_default_1.getLocalizationById('DashboardWebStringId.Notification.QueryDoesNotExist'), queryName));
            var query = dashboardFederationDataSource.queries()[queryIndex_1];
            var federationDataProviders = this._getFederationDataProviders();
            var dataSourceInfos_1 = _helpers_1.createDataSourceInfos(federationDataProviders);
            var analyticsDataSource = _helpers_1.toAnalyticsFederationDataSource(dashboardFederationDataSource, dataSourceInfos_1, this._dataSourceBrowser);
            var analyticsQuery = analyticsDataSource.queries().find(function (q) { return q.alias && q.alias() === queryName; });
            var setQuery = function (analyticsQuery) {
                analyticsQuery.sources()
                    .forEach(function (analyticsSource) { return _helpers_1.addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, dataSourceInfos_1); });
                var newQuery = _helpers_1.toSameSourcesFederationQuery(analyticsQuery);
                _helpers_1.addOrUpdateQuery(_this.dashboardControl.dashboard(), dashboardFederationDataSource, queryIndex_1, newQuery);
            };
            var popup_1;
            switch (query.queryType) {
                case 'SelectNode':
                    popup_1 = new analytics_wizard_internal_1.FederationSelectQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                case 'UnionNode':
                    popup_1 = new analytics_wizard_internal_1.FederationUnionQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                case 'TransformationNode':
                    popup_1 = new analytics_wizard_internal_1.FederationTransformQueryBuilderPopup(setQuery, analyticsDataSource);
                    break;
                default:
                    throw new Error("The query of '" + query.queryType + "' type cannot be edited. ");
            }
            ko.cleanNode(element);
            analytics_internal_1.appendStaticContextToRootViewModel(popup_1);
            ko.applyBindingsToNode(element, { template: 'dxrd-querybuilder-federation-popup' }, popup_1);
            var visibleSubscription_1 = popup_1.popupVisible.subscribe(function (visible) {
                if (!visible) {
                    visibleSubscription_1.dispose();
                    popup_1.dispose();
                    ko.cleanNode(element);
                }
            });
            popup_1.show(analyticsQuery);
        }
    };
    DataSourceWizardExtension.prototype.showManageFederationQueriesDialog = function (dashboardFederationDataSource) {
        var _this = this;
        var element = this._wizardElement();
        if (element) {
            var federationDataProviders = this._getFederationDataProviders();
            var federationDataProvidersInfos_1 = _helpers_1.createDataSourceInfos(federationDataProviders);
            var analyticsFederationDataSource_1 = _helpers_1.toAnalyticsFederationDataSource(dashboardFederationDataSource, federationDataProvidersInfos_1, this._dataSourceBrowser);
            var editor_1 = new queryBuilder_widgets_internal_1.ManageFederatedQueriesEditor(analyticsFederationDataSource_1, function () {
                analyticsFederationDataSource_1.sources()
                    .forEach(function (analyticsSource) { return _helpers_1.addSourceIfNotExists(analyticsSource, dashboardFederationDataSource, federationDataProvidersInfos_1); });
                var removedQueries = dashboardFederationDataSource.queries().filter(function (dashboardQuery) {
                    return !analyticsFederationDataSource_1.queries().some(function (analyticsQuery) { return analyticsQuery[_helpers_1.initialQueryAliasSymbol] === dashboardQuery.alias(); });
                });
                removedQueries.forEach(function (q) { return dashboardFederationDataSource.queries.remove(q); });
                analyticsFederationDataSource_1.queries().forEach(function (analyticsQuery, i) {
                    var newQuery = _helpers_1.toSameSourcesFederationQuery(analyticsQuery);
                    var initialQuery = dashboardFederationDataSource.queries().find(function (q) { return q.alias() === analyticsQuery[_helpers_1.initialQueryAliasSymbol]; });
                    var queryIndex = !!initialQuery ? dashboardFederationDataSource.queries().indexOf(initialQuery) : dashboardFederationDataSource.queries().length;
                    _helpers_1.addOrUpdateQuery(_this.dashboardControl.dashboard(), dashboardFederationDataSource, queryIndex, newQuery);
                });
            });
            ko.cleanNode(element);
            analytics_internal_1.appendStaticContextToRootViewModel(editor_1);
            ko.applyBindingsToNode(element, { template: 'dxrd-federated-manageQueries-editor' }, editor_1);
            var visibleSubscription_2 = editor_1.popupVisible.subscribe(function (visible) {
                if (!visible) {
                    visibleSubscription_2.dispose();
                    editor_1.dispose();
                    analyticsFederationDataSource_1.dispose();
                }
            });
            editor_1.popupVisible(true);
        }
    };
    DataSourceWizardExtension.prototype._createEditQueryWizard = function () {
        var wizard = _data_source_wizard_1.createDashboardDataSourceWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, false, { enableOlapDataSource: false, enableSqlDataSource: false, enableJsonDataSource: false, enableObjectDataSource: false, enableFederationDataSource: false }, { sql: ko.observableArray() }, [], this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('EditQueryWizard', wizard);
        return wizard;
    };
    DataSourceWizardExtension.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'allowCreateNewJsonConnection':
            case 'enableCustomSql':
            case 'wizardSettings':
                return null;
            default:
                return null;
        }
    };
    DataSourceWizardExtension.prototype.createDataSourceWizard = function (connectionStrings, federationSources) {
        var wizard = _data_source_wizard_1.createDashboardDataSourceWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.get('allowCreateNewJsonConnection') || this._optionsManager.getInitialOptions()['canCreateNewJsonDataSource'], this._optionsManager.get('wizardSettings'), connectionStrings, federationSources, this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('DataSourceWizard', wizard);
        return wizard;
    };
    DataSourceWizardExtension.prototype._createEditJsonDataSourceWizard = function () {
        var wizard = _edit_json_data_source_wizard_1.createEditJsonDataSourceWizard(this._requestWrapper);
        this._customizeDataSourceWizard('EditJsonDataSourceWizard', wizard);
        return wizard;
    };
    DataSourceWizardExtension.prototype._customizeDataSourceWizard = function (customizationType, wizard) {
        this._optionsManager.raiseEvent('customizeDataSourceWizard', { type: customizationType, wizard: wizard });
    };
    DataSourceWizardExtension.prototype._createNewDataSourceWizardIterator = function (factory, stateManager) {
        return new _data_source_wizard_1.CreateNewDataSourceWizardIterator(factory, stateManager);
    };
    DataSourceWizardExtension.prototype._initializeDataSourceWizard = function (wizard, deferred) {
        var _this = this;
        var initialState = new _data_source_wizard_1.DashboardDataSourceWizardState();
        wizard.initialize(initialState, function (factory, stateManager) { return _this._createNewDataSourceWizardIterator(factory, stateManager); });
        wizard['_finishCallback'] = function (state) {
            var sqlModel = state.sqlDataSourceWizard;
            var olapModel = state.olapDataSourceWizard;
            var jsonModel = state.jsonDataSourceWizard;
            var federationModel = state.federationDataSourceWizard;
            if (sqlModel && state.dashboardDataSourceType === 'Sql') {
                var sqlDataSource_1 = dashboard_1.Dashboard._createDataSource({ '@ItemType': 'SqlDataSource' }, new analytics_utils_1.ModelSerializer());
                var dataSourceWrapper = analytics_wizard_1._restoreSqlDataSourceFromState(sqlModel);
                sqlDataSource_1.connection.name(dataSourceWrapper.sqlDataSource.connection.name());
                sqlDataSource_1.connection.fromAppConfig(true);
                dataSourceWrapper.sqlDataSource.queries().forEach(function (query) {
                    sqlDataSource_1.queries.push(query);
                    sqlDataSource_1.name(sqlDataSource_1.queries()[0].name());
                });
                deferred.resolve(sqlDataSource_1);
                return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
            }
            else if (olapModel && state.dashboardDataSourceType === 'Olap') {
                var olapDataSource = dashboard_1.Dashboard._createDataSource({ '@ItemType': 'OLAPDataSource' }, new analytics_utils_1.ModelSerializer());
                olapDataSource.connectionName(olapModel.connectionName);
                olapDataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultOlapDataSourceName'));
                deferred.resolve(olapDataSource);
                return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
            }
            else if (jsonModel && state.dashboardDataSourceType === 'Json') {
                var jsonDeferred_1 = _jquery_helpers_1.createJQueryDeferred();
                var analyticsDataSourceDeferred_1 = _jquery_helpers_1.createJQueryDeferred();
                var analyticsDataSource_1 = analytics_wizard_1._restoreJsonDataSourceFromState(jsonModel);
                if (jsonModel.newConnectionName) {
                    var jsonSource = analyticsDataSource_1.source;
                    var jsonSourceJSON = JSON.stringify(jsonSource.serialize(true));
                    var requestString = JSON.stringify({
                        connectionName: jsonModel.newConnectionName,
                        customJson: jsonSource.json(),
                        uriJsonSourceJSON: jsonSourceJSON
                    });
                    _this._requestWrapper
                        .sendRequest('saveJsonSource', encodeURIComponent(requestString))
                        .done(function () {
                        analyticsDataSource_1.connectionName(jsonModel.newConnectionName);
                        analyticsDataSource_1.source = null;
                        analyticsDataSourceDeferred_1.resolve(analyticsDataSource_1);
                    })
                        .fail(function () { return analyticsDataSourceDeferred_1.reject(); });
                }
                else {
                    analyticsDataSourceDeferred_1.resolve(analyticsDataSource_1);
                }
                analyticsDataSourceDeferred_1
                    .done(function (repDataSource) {
                    var serializer = new analytics_utils_1.ModelSerializer();
                    var analyticsJsonDataSourceJson = serializer.serialize(repDataSource);
                    var dataSource = new json_data_source_1.JsonDataSource(analyticsJsonDataSourceJson);
                    dataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultJsonDataSourceName'));
                    deferred.resolve(dataSource);
                    jsonDeferred_1.resolve();
                })
                    .fail(function () {
                    deferred.reject();
                    jsonDeferred_1.reject();
                });
                return jsonDeferred_1.promise();
            }
            else if (federationModel && state.dashboardDataSourceType === 'Federation') {
                deferred.resolve(_helpers_1.createNewFederationDataSource(federationModel, wizard.options.dataSources));
                return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
            }
            else {
                deferred.reject();
                throw Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.UnsupportedDataSourceType'));
            }
        };
    };
    DataSourceWizardExtension.prototype._showEditJsonDataSourceDialog = function (jsonDataSource) {
        var serializer = new analytics_utils_1.ModelSerializer();
        var dashboardJsonDataSourceJson = serializer.serialize(jsonDataSource);
        var editJsonDataSourceWizard = this._createEditJsonDataSourceWizard();
        editJsonDataSourceWizard.initialize({
            jsonDataSourceWizard: {
                jsonScheme: JSON.stringify(dashboardJsonDataSourceJson.Schema),
                rootElement: jsonDataSource.rootElement()
            }
        }, function (factory, stateManager) { return new _edit_json_data_source_wizard_1.EditJsonDataSourceWizardIterator(factory, stateManager); });
        editJsonDataSourceWizard['_finishCallback'] = function (state) {
            var jsonModel = state.jsonDataSourceWizard;
            if (jsonModel) {
                var modifiedReportsDataSource = analytics_wizard_1._restoreJsonDataSourceFromState(jsonModel);
                jsonDataSource.schema(modifiedReportsDataSource.schema);
                jsonDataSource.rootElement(modifiedReportsDataSource.rootElement());
            }
            return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
        };
        this._renderAndStartWizard(editJsonDataSourceWizard);
    };
    DataSourceWizardExtension.prototype._renderAndStartWizard = function (wizardModel) {
        var element = this._wizardElement();
        if (element) {
            ko.cleanNode(element);
            var viewModel = {
                wizardModel: wizardModel,
                dataBindingsProvider: new _parameters_item_provider_1.ParametersItemProvider(this._dashboardParameters()),
                resizeHandler: {
                    starting: function () { },
                    stopped: function () { },
                    disabled: analytics_internal_1.DragDropHandler.started
                }
            };
            analytics_internal_1.appendStaticContextToRootViewModel(viewModel);
            ko.applyBindingsToNode(element, { template: 'dx-dashboard-data-source-wizard-binding' }, viewModel);
            wizardModel.isVisible.subscribe(function (visible) {
                if (!visible) {
                    wizardModel.dispose();
                    ko.cleanNode(element);
                }
            });
        }
        wizardModel.start();
    };
    return DataSourceWizardExtension;
}());
exports.DataSourceWizardExtension = DataSourceWizardExtension;
var MultiQueryDataSourceWizardExtension = (function (_super) {
    __extends(MultiQueryDataSourceWizardExtension, _super);
    function MultiQueryDataSourceWizardExtension(dashboardControl, options) {
        return _super.call(this, dashboardControl, options) || this;
    }
    MultiQueryDataSourceWizardExtension.prototype._createNewDataSourceWizardIterator = function (factory, stateManager) {
        return new _multi_query_data_source_wizard_1.DashboardMultiQueryWizardIterator(factory, stateManager);
    };
    MultiQueryDataSourceWizardExtension.prototype.createDataSourceWizard = function (connectionStrings, federationSources) {
        var wizard = _multi_query_data_source_wizard_1.createDashboardMultiQueryWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.get('allowCreateNewJsonConnection') || this._optionsManager.getInitialOptions()['canCreateNewJsonDataSource'], this._optionsManager.get('wizardSettings'), connectionStrings, federationSources, this._dataSourceBrowser, this.dashboardControl.customTemplates);
        this._customizeDataSourceWizard('MultiQueryDataSourceWizard', wizard);
        return wizard;
    };
    return MultiQueryDataSourceWizardExtension;
}(DataSourceWizardExtension));
exports.MultiQueryDataSourceWizardExtension = MultiQueryDataSourceWizardExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DataSourceWizardExtension(dashboardControl, options); };
control_options_1.extensionNameMap[name] = nameAlias;
ko.virtualElements.allowedBindings['dx-dashboard-element-accessor-binding'] = true;
ko.bindingHandlers['dx-dashboard-element-accessor-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var params = ko.unwrap(valueAccessor());
        params.element(element);
        return { controlsDescendantBindings: true };
    }
};
