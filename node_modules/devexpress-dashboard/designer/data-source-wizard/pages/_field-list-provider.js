/**
* DevExpress Dashboard (_field-list-provider.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlatteningDataFieldsProviderWrapper = exports.getFieldList = void 0;
var ko = require("knockout");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var _utils_1 = require("../../../data/_utils");
var _helper_classes_1 = require("../../../model/internal/_helper-classes");
var _helpers_1 = require("../../_helpers");
function getFieldList(pathRequest, dataFieldsProvider, dataSourceProvider, filterDelegate) {
    if (filterDelegate === void 0) { filterDelegate = function (field) { return true; }; }
    _helper_classes_1.Guard.requires(_utils_1.type.isDefined(pathRequest));
    _helper_classes_1.Guard.requires(_utils_1.type.isDefined(dataFieldsProvider));
    _helper_classes_1.Guard.requires(_utils_1.type.isDefined(dataSourceProvider));
    var pathParts;
    var dataSourceComponentName;
    if (pathRequest.ref || pathRequest.id) {
        dataSourceComponentName = pathRequest.ref || pathRequest.id;
        pathParts = [dataSourceComponentName].concat(pathRequest.path ? pathRequest.path.split('.') : []);
    }
    else if (pathRequest.pathParts && pathRequest.pathParts.length > 0) {
        pathParts = pathRequest.pathParts;
        dataSourceComponentName = pathParts[0];
    }
    else {
        pathParts = pathRequest.fullPath ? pathRequest.fullPath.split('.') : [];
        dataSourceComponentName = pathParts[0];
    }
    var dataSource = dataSourceProvider.findDataSource(dataSourceComponentName);
    if (!dataSource)
        throw new Error("The '" + dataSourceComponentName + "' DataSource cannot be found.");
    var dataMember;
    var fieldPath;
    if (dataSource.supportDataMembers) {
        dataMember = pathParts[1] || '';
        fieldPath = pathParts.slice(2).join('.');
    }
    else {
        dataMember = '';
        fieldPath = pathParts.slice(1).join('.');
    }
    var deferred = _jquery_helpers_1.createJQueryDeferred();
    dataFieldsProvider
        .getDataFieldsArray(dataSourceComponentName, dataMember, fieldPath, filterDelegate)
        .done(function (dataFields) {
        var items = dataFields.map(function (field) { return _helpers_1.createDataMemberInfo(field, dataSource); });
        deferred.resolve(items);
    });
    return deferred.promise();
}
exports.getFieldList = getFieldList;
var FlatteningDataFieldsProviderWrapper = (function () {
    function FlatteningDataFieldsProviderWrapper(basic, shouldFlatten) {
        if (shouldFlatten === void 0) { shouldFlatten = function (field) { return false; }; }
        _helper_classes_1.Guard.isNotFalsy(basic, 'The basic fields provider for a flattening fields provider');
        this._basic = basic;
        this._shouldFlatten = shouldFlatten;
    }
    FlatteningDataFieldsProviderWrapper.prototype.findDataField = function (dataSourceName, dataMemberName, fullFieldName, hasGroupSeparator) {
        throw new Error('The method is not implemented.');
    };
    FlatteningDataFieldsProviderWrapper.prototype.getDataFieldsArray = function (dataSourceName, dataMember, fieldPath, filterDelegate) {
        var _this = this;
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var flattenPromises = [];
        var notFlattened = [];
        this._basic.getDataFieldsArray(dataSourceName, dataMember, fieldPath, filterDelegate)
            .done(function (dataFields) {
            dataFields.forEach(function (field) {
                if (_this._shouldFlatten(field)) {
                    if (field.isDataSourceNode && field.isDataSourceNode())
                        throw new Error('Flattening of the datasource and query nodes is not supported.');
                    var flattenDeferred_1 = _jquery_helpers_1.createJQueryDeferred();
                    flattenPromises.push(flattenDeferred_1.promise());
                    var fieldName = field.dataMember ? ko.unwrap(field.dataMember) : '';
                    var newDataMember = dataMember || '';
                    var newFieldPath = fieldPath ? (fieldPath + '.' + fieldName) : fieldName;
                    _this.getDataFieldsArray(dataSourceName, newDataMember, newFieldPath, filterDelegate)
                        .done(function (fields) { return flattenDeferred_1.resolve(fields); })
                        .fail(function () { return flattenDeferred_1.reject(); });
                }
                else {
                    notFlattened.push(field);
                }
            });
            if (flattenPromises.length > 0)
                _jquery_helpers_1.jqueryWhenArray(flattenPromises).done(function () {
                    var flattenedDataFieldsArrays = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        flattenedDataFieldsArrays[_i] = arguments[_i];
                    }
                    var flattenedDataFields = flattenedDataFieldsArrays.reduce(function (acc, items) { return acc.concat(items); }, []);
                    deferred.resolve(notFlattened.concat(flattenedDataFields));
                })
                    .fail(function () { return deferred.reject(); });
            else
                deferred.resolve(notFlattened);
        });
        return deferred.promise();
    };
    return FlatteningDataFieldsProviderWrapper;
}());
exports.FlatteningDataFieldsProviderWrapper = FlatteningDataFieldsProviderWrapper;
