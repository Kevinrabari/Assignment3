/**
* DevExpress Dashboard (_multi-query-data-source-wizard.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDashboardMultiQueryWizard = exports.DashboardMultiQueryDataSourceWizard = exports.DashboardMultiQueryWizardIterator = void 0;
var analytics_wizard_1 = require("@devexpress/analytics-core/analytics-wizard");
var ko = require("knockout");
var _data_source_wizard_model_1 = require("../models/_data-source-wizard-model");
var choose_data_source_type_page_1 = require("../pages/choose-data-source-type-page");
var choose_olap_connection_string_page_1 = require("../pages/choose-olap-connection-string-page");
var _choose_json_schema_page_1 = require("../pages/_choose-json-schema-page");
var _create_query_page_1 = require("../pages/_create-query-page");
var _parameters_item_provider_1 = require("../pages/_parameters-item-provider");
var _helpers_1 = require("../_helpers");
var _data_source_wizard_1 = require("./_data-source-wizard");
var _data_source_wizard_page_iterator_1 = require("./_data-source-wizard-page-iterator");
var DashboardMultiQueryWizardIterator = (function (_super) {
    __extends(DashboardMultiQueryWizardIterator, _super);
    function DashboardMultiQueryWizardIterator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashboardMultiQueryWizardIterator.prototype.getInitialPage = function () {
        return _super.prototype.getInitialPage.call(this);
    };
    DashboardMultiQueryWizardIterator.prototype.getConfigureQueryPage = function () {
        return analytics_wizard_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage;
    };
    DashboardMultiQueryWizardIterator.prototype.getConfigureSqlParametersPage = function () {
        return analytics_wizard_1.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage;
    };
    return DashboardMultiQueryWizardIterator;
}(_data_source_wizard_page_iterator_1.DataSourceWizardPageIteratorBase));
exports.DashboardMultiQueryWizardIterator = DashboardMultiQueryWizardIterator;
var DashboardMultiQueryDataSourceWizard = (function (_super) {
    __extends(DashboardMultiQueryDataSourceWizard, _super);
    function DashboardMultiQueryDataSourceWizard(pageFactory, options) {
        var _this = _super.call(this, pageFactory) || this;
        _this._extendCssClass = 'dxrd-multiqueries-sqldatasource-wizard';
        _this.height(443);
        _this._options = options;
        return _this;
    }
    Object.defineProperty(DashboardMultiQueryDataSourceWizard.prototype, "options", {
        get: function () {
            return this._options;
        },
        enumerable: false,
        configurable: true
    });
    return DashboardMultiQueryDataSourceWizard;
}(_data_source_wizard_1.DashboardDataSourceWizardBase));
exports.DashboardMultiQueryDataSourceWizard = DashboardMultiQueryDataSourceWizard;
function createDashboardMultiQueryWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings, dataSources, dataSourceBrowser, customTemplates) {
    var factory = new analytics_wizard_1.PageFactory();
    var wizardOptions = new _data_source_wizard_model_1.DashboardMultiQueryDataSourceWizardOptions();
    wizardOptions.callbacks = _create_query_page_1.createQueryPageCallback(requestWrapper, parameters, dataSourceBrowser, DashboardMultiQueryDataSourceWizard.customQueriesPreset);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings = _helpers_1.createWizardSettings(wizardSettings);
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    wizardOptions.dataSources = ko.pureComputed(function () { return dataSources; });
    choose_data_source_type_page_1._registerChooseDataSourceTypePage(factory, wizardOptions, customTemplates);
    analytics_wizard_1._registerChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    choose_olap_connection_string_page_1._registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    analytics_wizard_1._registerMultiQueryConfigurePage(factory, wizardOptions);
    analytics_wizard_1._registerMultiQueryConfigureParametersPage(factory, requestWrapper);
    analytics_wizard_1._registerChooseJsonConnectionPage(factory, wizardOptions);
    analytics_wizard_1._registerChooseJsonSourcePage(factory, requestWrapper, function () { return new _parameters_item_provider_1.ParametersItemProvider(parameters()); });
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    analytics_wizard_1._registerFederatedQueryConfigurePage(factory, wizardOptions);
    var multiQueryConfigurePageMeta = factory.getMetadata(analytics_wizard_1.SqlDataSourceWizardPageId.MultiQueryConfigurePage);
    multiQueryConfigurePageMeta.canNext = function (page) { return page._hasParametersToEdit(); };
    return new DashboardMultiQueryDataSourceWizard(factory, wizardOptions);
}
exports.createDashboardMultiQueryWizard = createDashboardMultiQueryWizard;
