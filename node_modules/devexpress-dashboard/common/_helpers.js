/**
* DevExpress Dashboard (_helpers.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineOptions = exports.toCancelableSequenceAction = exports.CancellationToken = exports.getDimensionsExpressions = void 0;
var _jquery_helpers_1 = require("../data/_jquery-helpers");
var _helpers_1 = require("../model/data-item/_helpers");
var _data_source_browser_1 = require("./_data-source-browser");
function getDimensionsExpressions(dashboardItem, dataFieldProvider) {
    var deferred = _jquery_helpers_1.createJQueryDeferred();
    var fieldsNames = dashboardItem._dimensions.map(function (d) { return d.dataMember(); });
    _data_source_browser_1.getDataFields(fieldsNames, dashboardItem.dataSource(), dashboardItem.dataMember(), dataFieldProvider)
        .done(function (fields) {
        var dimensionsExpressions = {};
        dashboardItem._dimensions.map(function (dim) {
            var field = fields.filter(function (f) { return f.dataMember() === dim.dataMember(); })[0];
            dimensionsExpressions[dim.uniqueName()] = _helpers_1.getDimensionExpression(dim.dataMember(), dim.dateTimeGroupInterval(), dim.textGroupInterval(), field.fieldType());
        });
        deferred.resolve(dimensionsExpressions);
    });
    return deferred.promise();
}
exports.getDimensionsExpressions = getDimensionsExpressions;
var CancellationToken = (function () {
    function CancellationToken(source) {
        this._source = source;
    }
    Object.defineProperty(CancellationToken, "None", {
        get: function () {
            return new CancellationToken(_jquery_helpers_1.createJQueryDeferred());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CancellationToken.prototype, "canceled", {
        get: function () {
            return this._source.state() === 'rejected';
        },
        enumerable: false,
        configurable: true
    });
    return CancellationToken;
}());
exports.CancellationToken = CancellationToken;
function toCancelableSequenceAction(action) {
    var cancelableSequenceAction = action;
    if (cancelableSequenceAction.cancelableAction)
        return cancelableSequenceAction;
    else
        return __assign(__assign({}, action), { cancelableAction: function (options, cancellationToken) { return cancelableSequenceAction.action(options); } });
}
exports.toCancelableSequenceAction = toCancelableSequenceAction;
function combineOptions(previousOptions, options) {
    var result = __assign({}, previousOptions);
    options.forEach(function (op) {
        if (op.surfaceLeft !== previousOptions.surfaceLeft)
            result.surfaceLeft = op.surfaceLeft;
        if (op.surfaceTop !== previousOptions.surfaceTop)
            result.surfaceTop = op.surfaceTop;
    });
    return result;
}
exports.combineOptions = combineOptions;
