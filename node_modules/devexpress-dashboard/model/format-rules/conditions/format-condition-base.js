/**
* DevExpress Dashboard (format-condition-base.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatConditionBase = void 0;
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var serializable_model_1 = require("../../serializable-model");
var _format_condition_base_1 = require("./metadata/_format-condition-base");
var FormatConditionBase = (function (_super) {
    __extends(FormatConditionBase, _super);
    function FormatConditionBase(modelJson, serializer) {
        if (serializer === void 0) { serializer = new analytics_utils_1.ModelSerializer(); }
        var _this = _super.call(this, modelJson || {}, serializer) || this;
        _this.dataType = ko.observable();
        _this.dateTimeGroupInterval = ko.observable();
        _this._empty = true;
        _this.isEmpty = ko.observable();
        _this.isEmpty(!modelJson);
        return _this;
    }
    Object.defineProperty(FormatConditionBase.prototype, "_isApplyToRowColumnRestricted", {
        get: function () { return false; },
        enumerable: false,
        configurable: true
    });
    FormatConditionBase.prototype.getInfo = function () {
        return _format_condition_base_1.formatConditionBaseSerializationsInfo;
    };
    FormatConditionBase.prototype.isValid = function () {
        return true;
    };
    FormatConditionBase.prototype.isRange = function () {
        return false;
    };
    FormatConditionBase.prototype.isGradient = function () {
        return false;
    };
    FormatConditionBase.prototype.init = function () {
        this.isEmpty(false);
    };
    return FormatConditionBase;
}(serializable_model_1.SerializableModel));
exports.FormatConditionBase = FormatConditionBase;
