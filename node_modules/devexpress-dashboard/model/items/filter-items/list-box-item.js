/**
* DevExpress Dashboard (list-box-item.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBoxItem = void 0;
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var serializable_model_1 = require("../../serializable-model");
var filter_element_item_base_1 = require("./filter-element-item-base");
var _list_box_item_1 = require("./metadata/_list-box-item");
var ListBoxItem = (function (_super) {
    __extends(ListBoxItem, _super);
    function ListBoxItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new analytics_utils_1.ModelSerializer(); }
        return _super.call(this, dashboardItemJSON, serializer) || this;
    }
    ListBoxItem.prototype._getInfoCore = function () {
        return _list_box_item_1.listBoxDashboardItemSerializationsInfo;
    };
    ListBoxItem.prototype._getDefaultItemType = function () {
        return 'ListBox';
    };
    ListBoxItem.prototype._allowAllValue = function () { return this._isMultiselectable() || this.showAllValue(); };
    ListBoxItem.prototype._isMultiselectable = function () { return this.listBoxType() === 'Checked'; };
    return ListBoxItem;
}(filter_element_item_base_1.FilterElementItemBase));
exports.ListBoxItem = ListBoxItem;
serializable_model_1.itemTypesMap['ListBox'] = { type: ListBoxItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameListBoxItem', index: 330 };
