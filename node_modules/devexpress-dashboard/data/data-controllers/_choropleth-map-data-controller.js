/**
* DevExpress Dashboard (_choropleth-map-data-controller.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.choroplethMapDataController = void 0;
var $ = require("jquery");
var _data_controller_base_1 = require("./_data-controller-base");
var choroplethMapDataController = (function (_super) {
    __extends(choroplethMapDataController, _super);
    function choroplethMapDataController(options) {
        var _this = _super.call(this, options) || this;
        _this.axisCache = {};
        _this.isEmpty = true;
        _this._prepare();
        return _this;
    }
    choroplethMapDataController.prototype._prepare = function () {
        var attributeId = this.viewModel.AttributeDimensionId, axis = this.multiData.getAxis(), axisPoints = attributeId ? axis.getPointsByDimension(attributeId) : [];
        this.isEmpty = axisPoints.length == 0;
        for (var i = 0; i < axisPoints.length; i++) {
            var key = axisPoints[i].getValue();
            this.axisCache[key] = axisPoints[i];
        }
    };
    choroplethMapDataController.prototype.hasRecords = function () {
        return !this.isEmpty;
    };
    choroplethMapDataController.prototype.getDeltaValue = function (attribute, deltaId) {
        var axisPoint = this.axisCache[attribute];
        return axisPoint ? this.multiData.getSlice(axisPoint).getDeltaValue(deltaId) : null;
    };
    choroplethMapDataController.prototype.getValue = function (attribute, measureName) {
        var measureValue = this._getMeasureValue(attribute, measureName);
        return measureValue ? measureValue.getValue() : null;
    };
    choroplethMapDataController.prototype.getDisplayText = function (attribute, measureName) {
        var measureValue = this._getMeasureValue(attribute, measureName);
        return measureValue ? measureValue.getDisplayText() : null;
    };
    choroplethMapDataController.prototype.getUniqueValue = function (attribute) {
        var axisPoint = this.axisCache[attribute];
        return axisPoint ? axisPoint.getUniqueValue() : null;
    };
    choroplethMapDataController.prototype.getMinMax = function (measureName) {
        var that = this, min, max, value;
        $.each(this.axisCache, function (key, axisPoint) {
            value = that.multiData.getSlice(axisPoint).getMeasureValue(measureName).getValue();
            if (min == null || value < min)
                min = value;
            if (max == null || value > max)
                max = value;
        });
        return {
            min: min,
            max: max
        };
    };
    choroplethMapDataController.prototype.getMeasureDescriptorById = function (valueId) {
        return this.multiData.getMeasureById(valueId);
    };
    choroplethMapDataController.prototype._getMeasureValue = function (attribute, measureName) {
        var axisPoint = this.axisCache[attribute];
        return axisPoint ? this.multiData.getSlice(axisPoint).getMeasureValue(measureName) : null;
    };
    return choroplethMapDataController;
}(_data_controller_base_1.dataControllerBase));
exports.choroplethMapDataController = choroplethMapDataController;
