/**
* DevExpress Dashboard (_jquery-helpers.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jqueryOffset = exports.jqueryQueryParam = exports.jqueryWhenArray = exports.jqueryWhen = exports.createJQueryDeferred = exports.createJQueryCallbacks = exports.closest = exports.isVisible = exports.accessJQueryData = exports.wrapInner = exports.getOuterHeight = exports.getOuterWidth = exports.getHeight = exports.getWidth = exports.isPlainObject = exports.deepExtend = exports.extend = exports.wrapPublicElement = exports.$wrap = exports.$unwrap = exports.$promiseAdapter = void 0;
var config_1 = require("devextreme/core/config");
var $ = require("jquery");
var $promiseAdapter = function (promise) { return promise; };
exports.$promiseAdapter = $promiseAdapter;
var $unwrap = function (element) {
    if (element.jquery || element.dxRenderer) {
        return element[0];
    }
    else {
        return element;
    }
};
exports.$unwrap = $unwrap;
var $wrap = function (element) { return $(element); };
exports.$wrap = $wrap;
var wrapPublicElement = function (element) { return (config_1.default().useJQuery ? exports.$wrap(element) : element); };
exports.wrapPublicElement = wrapPublicElement;
var extend = function (target, source1) {
    var sources = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        sources[_i - 2] = arguments[_i];
    }
    return $.extend.apply($, __spreadArray([target, source1], sources));
};
exports.extend = extend;
var deepExtend = function (target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    return $.extend.apply($, __spreadArray([true, target], sources));
};
exports.deepExtend = deepExtend;
var isPlainObject = function (object) { return $.isPlainObject(object); };
exports.isPlainObject = isPlainObject;
var getWidth = function (element) { return $(element).width(); };
exports.getWidth = getWidth;
var getHeight = function (element) { return $(element).height(); };
exports.getHeight = getHeight;
var getOuterWidth = function (element) { return $(element).outerWidth(); };
exports.getOuterWidth = getOuterWidth;
var getOuterHeight = function (element) { return $(element).outerHeight(); };
exports.getOuterHeight = getOuterHeight;
var wrapInner = function (element, wrappingElement) { return $(element).wrapInner(wrappingElement); };
exports.wrapInner = wrapInner;
var accessJQueryData = function (element, key, value) {
    if (arguments.length > 2) {
        $(element).data(key, value);
    }
    else {
        return $(element).data(key);
    }
};
exports.accessJQueryData = accessJQueryData;
var isVisible = function (element) { return $(element).is(':visible'); };
exports.isVisible = isVisible;
var closest = function (element, css) {
    var node = element;
    var matches = node.matches || node.matchesSelector || node.webkitMatchesSelector || node.mozMatchesSelector || node.msMatchesSelector || node.oMatchesSelector;
    while (node) {
        if (matches.apply(node, [css]))
            return node;
        node = closestParentElement(node);
    }
    return null;
};
exports.closest = closest;
var closestParentElement = function (node) {
    while (node && !node.parentElement) {
        node = node.parentNode;
    }
    return node ? node.parentElement : null;
};
var createJQueryCallbacks = function () { return $.Callbacks(); };
exports.createJQueryCallbacks = createJQueryCallbacks;
var createJQueryDeferred = function () { return $.Deferred(); };
exports.createJQueryDeferred = createJQueryDeferred;
var jqueryWhen = function () {
    var promises = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        promises[_i] = arguments[_i];
    }
    return $.when.apply($, promises);
};
exports.jqueryWhen = jqueryWhen;
var jqueryWhenArray = function (promises) { return $.when.apply($.when, promises); };
exports.jqueryWhenArray = jqueryWhenArray;
var jqueryQueryParam = function (value) { return $.param(value); };
exports.jqueryQueryParam = jqueryQueryParam;
var jqueryOffset = function (element) { return $(element).offset(); };
exports.jqueryOffset = jqueryOffset;
