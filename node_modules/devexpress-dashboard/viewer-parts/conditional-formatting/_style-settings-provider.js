/**
* DevExpress Dashboard (_style-settings-provider.js)
* Version:  22.1.3
* Build date: Jun 13, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.cardItemStyleSettingsProvider = exports.styleSettingsProvider = exports.DrawProperty = void 0;
var color_1 = require("devextreme/color");
var browser_1 = require("devextreme/core/utils/browser");
var tooltip_1 = require("devextreme/ui/tooltip");
var $ = require("jquery");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _utils_1 = require("../../data/_utils");
var _cssHelper_1 = require("../viewer/_cssHelper");
var _css_class_names_1 = require("../widgets/widgets-viewer/_css-class-names");
var _appearance_settings_provider_1 = require("./_appearance-settings-provider");
var ICON_TYPE_NONE = 'None', APPEARANCE_TYPE_NONE = 'None', APPEARANCE_TYPE_CUSTOM = 'Custom', VERTICAL_AXIS_PADDING = 3, HIDDEN_TEXT_PREFIX = 'hiddenText', TOOLTIP_PREFIX = 'tooltip', GRID_BANDED_ROW_SELECTOR = '.dx-datagrid .dx-row-alt', PIVOT_AREA_SELECTOR = '.dx-pivotgrid .dx-pivotgrid-area';
var nbspSymbol = '\u00A0';
var BarCacheItem = (function () {
    function BarCacheItem() {
    }
    return BarCacheItem;
}());
var DrawProperty = (function () {
    function DrawProperty() {
        this.shouldDrawFontStyles = true;
        this.shouldDrawBackColorStyle = true;
    }
    return DrawProperty;
}());
exports.DrawProperty = DrawProperty;
var styleSettingsProvider = (function () {
    function styleSettingsProvider() {
        this.wordWrap = false;
        this.FontStyle = {
            Bold: 1,
            Italic: 2,
            Underline: 4,
            Strikeout: 8
        };
        this.DataAttributes = {
            Bar: 'bar',
            Axis: 'axis',
            NormalizedValue: 'normalizedValue',
            ZeroPosition: 'zeroPosition',
            AllowNegativeAxis: 'allowNegativeAxis',
            DrawAxis: 'drawAxis'
        };
        this.cfModel = undefined;
        this.cssCustomClasses = [];
        this.cssCustomClassesLinks = [];
        this.id = styleSettingsProvider.inctanceCounter++;
        this.drawingLocked = true;
        this.barCache = {};
        this.padding = null;
        this.barPrefixes = [];
    }
    styleSettingsProvider.toIconCssClass = function (iconType) {
        return styleSettingsProvider.cssClassNames.iconConditionalFormatting + '-' + iconType.toLowerCase();
    };
    styleSettingsProvider._getRangeBackColorStyleSettings = function (styleSettings, condition) {
        var rangeIndex = styleSettings.RangeIndex, leftIndex = -1, rightIndex = -1, leftModel, rightModel, resultModel, leftColor, rightColor, color;
        Object.keys(condition.FixedColors)
            .map(Number)
            .forEach(function (index) {
            if (index < rangeIndex && (leftIndex === -1 || index > leftIndex))
                leftIndex = index;
            if (index > rangeIndex && (rightIndex === -1 || index < rightIndex))
                rightIndex = index;
        });
        leftModel = condition.FixedColors[leftIndex];
        rightModel = condition.FixedColors[rightIndex];
        leftColor = new color_1.default(_appearance_settings_provider_1.appearanceSettingsProvider.getColor(leftModel));
        rightColor = new color_1.default(_appearance_settings_provider_1.appearanceSettingsProvider.getColor(rightModel));
        return {
            AppearanceType: APPEARANCE_TYPE_CUSTOM,
            Color: leftColor.blend(rightColor, (rangeIndex - leftIndex) / (rightIndex - leftIndex)),
            ForeColor: leftModel.ForeColor,
            FontFamily: leftModel.FontFamily,
            FontSize: leftModel.FontSize,
            FontStyle: leftModel.FontStyle,
            IsBarStyle: leftModel.IsBarStyle
        };
    };
    styleSettingsProvider.prototype.initialize = function (cfModel, wordWrap) {
        if (cfModel) {
            this.cfModel = cfModel;
            this._clearCssClasses();
            this._registerCssClasses();
            this.drawingLocked = true;
            this.barCache = {};
            this.padding = null;
            this.barPrefixes = [];
        }
        this.wordWrap = wordWrap !== undefined ? wordWrap : this.wordWrap;
    };
    styleSettingsProvider.prototype.dispose = function () {
        this._clearCssClasses();
    };
    styleSettingsProvider.prototype.draw = function () {
        var _this = this;
        Object.values(this.barCache).forEach(function (columnCacheItem) {
            columnCacheItem.forEach(function (barCacheItem) {
                var textDiv = barCacheItem.getTextDiv();
                while (barCacheItem.container.firstChild) {
                    barCacheItem.container.removeChild(barCacheItem.container.firstChild);
                }
                if (!barCacheItem.container.classList.contains(styleSettingsProvider.cssClassNames.barContainer)) {
                    barCacheItem.container.classList.add(styleSettingsProvider.cssClassNames.barContainer);
                }
                var barContainer = barCacheItem.barContainer;
                barCacheItem.container.appendChild(barContainer);
                barContainer.appendChild(barCacheItem.barDiv);
                if (barCacheItem.drawAxis) {
                    barContainer.appendChild(barCacheItem.axisDiv);
                }
                if (!barCacheItem.showBarOnly) {
                    barContainer.appendChild(textDiv);
                }
                else {
                    barCacheItem.container.appendChild(textDiv);
                    barCacheItem.container.appendChild(barCacheItem.tooltipDiv);
                }
            });
        });
        this.drawingLocked = false;
        this.barPrefixes.forEach(function (barPrefix) { return _this.updateBarWidth(barPrefix); });
    };
    styleSettingsProvider.prototype.updateBarWidth = function (barPrefix) {
        var _this = this;
        if (!this.drawingLocked) {
            var barCacheItems = this.barCache[barPrefix], containerHeights_1;
            if (barCacheItems) {
                containerHeights_1 = this._getContainerHeights(barCacheItems);
                barCacheItems.forEach(function (barCacheItem, i) {
                    var bar = barCacheItem.barDiv, normalizedValue = _jquery_helpers_1.accessJQueryData(bar, _this.DataAttributes.NormalizedValue), zeroPosition = _jquery_helpers_1.accessJQueryData(bar, _this.DataAttributes.ZeroPosition), allowNegativeAxis = _jquery_helpers_1.accessJQueryData(bar, _this.DataAttributes.AllowNegativeAxis), drawAxis = _jquery_helpers_1.accessJQueryData(bar, _this.DataAttributes.DrawAxis), containerHeight = containerHeights_1[i], axisDiv = bar.parentNode && bar.parentNode.querySelector('.' + _this.DataAttributes.Axis + '_' + barPrefix);
                    _this._setBarBounds(bar, containerHeight, zeroPosition, normalizedValue, allowNegativeAxis, drawAxis);
                    if (axisDiv) {
                        _this._setAxisBounds(axisDiv, containerHeight, zeroPosition);
                    }
                });
            }
        }
    };
    styleSettingsProvider.prototype.applyStyleSettings = function (container, popupContainer, styleSettingsInfo, ignoreImageSettings, barPrefix, forceLeftAlignment, isSecondaryStyle) {
        var _this = this;
        var styleSettingsModel, sortedStyleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined, condition, ruleIndex, barInfo, iconType;
        if (sortedStyleIndexes && sortedStyleIndexes.length > 0) {
            sortedStyleIndexes.sort(function (a, b) { return a - b; });
            sortedStyleIndexes.forEach(function (styleIndex) {
                styleSettingsModel = _this.cfModel.FormatConditionStyleSettings[styleIndex];
                ruleIndex = styleSettingsInfo.styleAndRuleMappingTable[styleIndex];
                if (styleSettingsModel.IsBarStyle) {
                    condition = _this.cfModel.RuleModels[ruleIndex].ConditionModel;
                    barInfo = _this._getBarInfo(styleSettingsModel, styleIndex, condition);
                }
                else if (styleSettingsModel.RangeIndex || styleSettingsModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
                    var style = isSecondaryStyle === true ? _this.cssCustomClasses[styleIndex].secondary : _this.cssCustomClasses[styleIndex].primary;
                    container.classList.add(style);
                }
                else if (styleSettingsModel.IconType !== ICON_TYPE_NONE)
                    iconType = styleSettingsModel.IconType;
            });
            if (barInfo) {
                barInfo.normalizedValue = styleSettingsInfo.normalizedValue;
                barInfo.zeroPosition = styleSettingsInfo.zeroPosition;
                this._createBarContent(container, popupContainer, barInfo, barPrefix, forceLeftAlignment);
            }
            else if (!ignoreImageSettings && iconType) {
                this._applyIconSettings(container, iconType, forceLeftAlignment);
            }
        }
    };
    styleSettingsProvider.prototype._getContainerHeights = function (barCacheItems) {
        var containerHeights = [];
        barCacheItems.forEach(function (barCacheItem) {
            var containerElement = barCacheItem.container, containerBounds = containerElement.getBoundingClientRect(), containerStyles = getComputedStyle(containerElement), topBorderWidth = parseInt(containerStyles.borderTopWidth) || 0, bottomBorderWidth = parseInt(containerStyles.borderBottomWidth) || 0, height = browser_1.default.webkit ? containerBounds.height - topBorderWidth : containerBounds.height - topBorderWidth - bottomBorderWidth;
            containerHeights.push(height);
        });
        return containerHeights;
    };
    styleSettingsProvider.prototype._createCssClassName = function (prefix, styleIndex, postFix) {
        var styleName = prefix + '-' + this.id + '-' + styleIndex;
        if (postFix)
            styleName += '-' + postFix;
        return styleName;
    };
    styleSettingsProvider.prototype._applyIconSettings = function (container, iconType, forceLeftAlignment, flexParentStyle) {
        var _a;
        if (flexParentStyle === void 0) { flexParentStyle = styleSettingsProvider.cssClassNames.flexParent; }
        if (!container.classList.contains('dx-white-space-column')) {
            var classes = styleSettingsProvider.cssClassNames;
            var textAlignmentIsLeft = this._textAlignmentIsLeft(container);
            var imageClasses = [classes.iconConditionalFormatting, styleSettingsProvider.toIconCssClass(iconType)];
            this._wrapChildElementsToApplyIconSettings(container, classes, forceLeftAlignment);
            var marginClass = textAlignmentIsLeft ? classes.leftMargin : classes.rightMargin;
            imageClasses.push(classes.fixed, marginClass);
            var imageElt = document.createElement('div');
            (_a = imageElt.classList).add.apply(_a, imageClasses);
            if (textAlignmentIsLeft) {
                container.appendChild(imageElt);
            }
            else {
                container.insertBefore(imageElt, container.firstChild);
            }
            var wrappingElement = document.createElement('div');
            wrappingElement.classList.add(flexParentStyle);
            _jquery_helpers_1.wrapInner(container, wrappingElement);
        }
    };
    styleSettingsProvider.prototype._wrapChildElementsToApplyIconSettings = function (container, classes, forceLeftAlignment) {
        var _a;
        var textClasses = [this.wordWrap ? classes.wordWrap : classes.truncated,
            forceLeftAlignment ? '' : classes.stretched];
        if (container.children.length > 0) {
            container.querySelectorAll('.dx-expand-icon-container').forEach(function (element) { return element.classList.add(classes.fixed); });
            container.querySelectorAll(':scope>:not(.dx-expand-icon-container)').forEach(function (element) {
                var _a;
                return (_a = element.classList).add.apply(_a, textClasses);
            });
        }
        else {
            var wrappingElement = document.createElement('div');
            (_a = wrappingElement.classList).add.apply(_a, textClasses);
            _jquery_helpers_1.wrapInner(container, wrappingElement);
        }
    };
    styleSettingsProvider.prototype._textAlignmentIsLeft = function (container) {
        var textAlignment = getComputedStyle(container).textAlign;
        return textAlignment === 'left' || textAlignment === 'start' || textAlignment === 'center' || textAlignment === 'justify';
    };
    styleSettingsProvider.prototype._getBarInfo = function (styleSettingsModel, styleIndex, condition) {
        if (this._shouldDrawBarStyle(styleSettingsModel)) {
            return {
                showBarOnly: condition.BarOptions.ShowBarOnly,
                allowNegativeAxis: condition.BarOptions.AllowNegativeAxis,
                drawAxis: condition.BarOptions.DrawAxis,
                cssClass: this.cssCustomClasses[styleIndex].primary
            };
        }
        return null;
    };
    styleSettingsProvider.prototype._createBarContent = function (container, popupContainer, barInfo, barPrefix, forceLeftAlignment) {
        var barCacheItem = new BarCacheItem();
        var displayText = container.textContent;
        var containerContent = Array.from(container.childNodes);
        if (!this.padding) {
            var computedStyles = getComputedStyle(container);
            this.padding = computedStyles.paddingTop + ' ' + computedStyles.paddingLeft;
        }
        if (!this.barCache[barPrefix])
            this.barCache[barPrefix] = [];
        this.barCache[barPrefix].push(barCacheItem);
        var barContainer = document.createElement('div');
        barContainer.classList.add(styleSettingsProvider.cssClassNames.relativePosition);
        barCacheItem.container = container;
        barCacheItem.barContainer = barContainer;
        if (!this.barPrefixes.some(function (prefix) { return prefix === barPrefix; }))
            this.barPrefixes.push(barPrefix);
        barCacheItem.barDiv = this._createBarDiv(barInfo, barPrefix);
        barCacheItem.showBarOnly = barInfo.showBarOnly;
        barCacheItem.drawAxis = barInfo.drawAxis;
        if (barInfo.drawAxis) {
            barCacheItem.axisDiv = this._createAxisDiv(barPrefix, barInfo.zeroPosition);
        }
        var textDiv;
        barCacheItem.getTextDiv = function () {
            if (!textDiv) {
                textDiv = document.createElement('div');
                if (barInfo.showBarOnly) {
                    textDiv.append(nbspSymbol);
                }
                else {
                    textDiv.classList.add(styleSettingsProvider.cssClassNames.barValue);
                    containerContent.forEach(function (node) { return textDiv.appendChild(node); });
                }
            }
            return textDiv;
        };
        if (barInfo.showBarOnly) {
            var index = styleSettingsProvider.hiddenTextCounter++;
            var tooltipId = TOOLTIP_PREFIX + index;
            var containerId = HIDDEN_TEXT_PREFIX + index;
            container.id = containerId;
            var tooltipDiv = document.createElement('div');
            tooltipDiv.innerText = displayText;
            tooltipDiv.id = tooltipId;
            new tooltip_1.default(tooltipDiv, {
                target: '#' + containerId,
                container: popupContainer,
                showEvent: 'dxhoverstart',
                hideEvent: 'dxhoverend',
            });
            barCacheItem.tooltipDiv = tooltipDiv;
            $(container).unbind().hover(function () { $(tooltipDiv).toggle(); });
        }
    };
    styleSettingsProvider.prototype._createBarDiv = function (barInfo, barPrefix) {
        var barDiv = document.createElement('div');
        barDiv.classList.add(styleSettingsProvider.cssClassNames.absolutePosition);
        barDiv.classList.add(barInfo.cssClass);
        barDiv.classList.add(this.DataAttributes.Bar + '_' + barPrefix);
        barDiv.append(nbspSymbol);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.NormalizedValue, barInfo.normalizedValue);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.ZeroPosition, barInfo.zeroPosition);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.AllowNegativeAxis, barInfo.allowNegativeAxis);
        _jquery_helpers_1.accessJQueryData(barDiv, this.DataAttributes.DrawAxis, barInfo.drawAxis);
        return barDiv;
    };
    styleSettingsProvider.prototype._createAxisDiv = function (barPrefix, zeroPosition) {
        var axisDiv = document.createElement('div');
        axisDiv.classList.add(styleSettingsProvider.cssClassNames.absolutePosition);
        axisDiv.classList.add(this.DataAttributes.Axis + '_' + barPrefix, styleSettingsProvider.cssClassNames.barAxis);
        _jquery_helpers_1.accessJQueryData(axisDiv, this.DataAttributes.ZeroPosition, zeroPosition);
        return axisDiv;
    };
    styleSettingsProvider.prototype._setBarBounds = function (barDiv, containerHeight, zeroPosition, normalizedValue, allowNegativeAxis, drawAxis) {
        var barWidth = Math.abs(normalizedValue * 100), axisPosition = Math.abs(zeroPosition * 100), width = allowNegativeAxis && drawAxis && normalizedValue < 0 && zeroPosition > 0 ? 'calc(' + barWidth + '% + 1px)' : barWidth + '%';
        barDiv.style.height = containerHeight + 'px';
        barDiv.style.width = width;
        if (allowNegativeAxis && normalizedValue < 0 && zeroPosition > 0) {
            if (drawAxis) {
                barDiv.style.right = 'calc(' + (100 - axisPosition) + '% - 1px)';
            }
            else {
                barDiv.style.right = (100 - axisPosition) + '%';
            }
        }
        else
            barDiv.style.left = axisPosition + '%';
    };
    styleSettingsProvider.prototype._setAxisBounds = function (axisDiv, containerHeight, zeroPosition) {
        axisDiv.style.left = Math.abs(zeroPosition * 100) + '%';
        axisDiv.style.height = Math.max(0, containerHeight - VERTICAL_AXIS_PADDING * 2) + 'px';
    };
    styleSettingsProvider.prototype._clearCssClasses = function () {
        this.cssCustomClassesLinks.forEach(function (style) { return style.remove(); });
        this.cssCustomClassesLinks = [];
    };
    styleSettingsProvider.prototype._registerCssClasses = function () {
        if (this.cfModel != undefined) {
            for (var styleIndex = 0; styleIndex < this.cfModel.FormatConditionStyleSettings.length; styleIndex++) {
                var styleSettingsModel = this.cfModel.FormatConditionStyleSettings[styleIndex];
                this._registerCssClassByStyleModel(styleSettingsModel, styleIndex, false);
                if (this._isShouldGenerateSecondaryStyle(styleSettingsModel)) {
                    this._registerCssClassByStyleModel(styleSettingsModel, styleIndex, true);
                }
            }
        }
    };
    styleSettingsProvider.prototype._registerCssClassByStyleModel = function (styleSettingsModel, styleIndex, isSecondaryStyle) {
        var className = this._generateCssClassName(styleIndex, isSecondaryStyle);
        this._addCssClassToDictionary(className, styleIndex, isSecondaryStyle);
        this._generateCssClassBody(styleSettingsModel, className, this._getDrawProperty(isSecondaryStyle));
    };
    styleSettingsProvider.prototype._addCssClassToDictionary = function (styleName, styleIndex, isSecondary) {
        var primaryStyle, secondaryStyle;
        if (this.cssCustomClasses[styleIndex]) {
            primaryStyle = this.cssCustomClasses[styleIndex].primary;
            secondaryStyle = this.cssCustomClasses[styleIndex].secondary;
        }
        if (isSecondary)
            secondaryStyle = styleName;
        else
            primaryStyle = styleName;
        this.cssCustomClasses[styleIndex] = {
            primary: primaryStyle,
            secondary: secondaryStyle
        };
    };
    styleSettingsProvider.prototype._generateCssClassName = function (styleIndex, isSecondary) {
        var postFix = this._getStylePostFix(isSecondary);
        var cssClassName = this._createCssClassName(styleSettingsProvider.cssClassNames.customStyle, styleIndex, postFix);
        return cssClassName;
    };
    styleSettingsProvider.prototype.addNewStyle = function (styleName, styleIndex, isSecond) {
        this.cssCustomClasses[styleIndex] = {
            secondary: styleName,
            primary: styleName
        };
    };
    styleSettingsProvider.prototype._isShouldGenerateSecondaryStyle = function (styleSettingsModel) {
        return false;
    };
    styleSettingsProvider.prototype._isSecondaryStyle = function (styleSettingsModel) {
        return false;
    };
    styleSettingsProvider.prototype._getStylePostFix = function (isSecondary) {
        return null;
    };
    styleSettingsProvider.prototype._getDrawProperty = function (isSecondaryStyle) {
        return null;
    };
    styleSettingsProvider.prototype._shouldDrawBarStyle = function (styleSettingsModel) {
        return true;
    };
    styleSettingsProvider.prototype._generateCssClassBody = function (styleSettingsModel, cssClassName, drawProperty) {
        var selector = this._getCssTdSelector(cssClassName);
        if (styleSettingsModel.RangeIndex) {
            var condition = this.cfModel.RuleModels[styleSettingsModel.RuleIndex].ConditionModel;
            styleSettingsModel = styleSettingsProvider._getRangeBackColorStyleSettings(styleSettingsModel, condition);
            this._createCssClassFromCustomAppearanceType(styleSettingsModel, selector, drawProperty);
        }
        else if (styleSettingsModel.AppearanceType === APPEARANCE_TYPE_CUSTOM) {
            this._createCssClassFromCustomAppearanceType(styleSettingsModel, selector, drawProperty);
        }
        else if (styleSettingsModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
            this._createCssClassFromPredefinedAppearanceType(selector, styleSettingsModel.AppearanceType, drawProperty);
        }
    };
    styleSettingsProvider.prototype._getCssTdSelector = function (cssClassname) {
        return '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + cssClassname + ', '
            + GRID_BANDED_ROW_SELECTOR + ' .' + cssClassname + ', '
            + PIVOT_AREA_SELECTOR + ' .' + cssClassname;
    };
    styleSettingsProvider.prototype._createCssClassFromCustomAppearanceType = function (styleSettingsModel, cssSelector, drawProperty) {
        var cssProperties = Array();
        if (drawProperty == null || drawProperty.shouldDrawBackColorStyle)
            cssProperties.push(this._createBackColorStyle(styleSettingsModel));
        if (drawProperty == null || drawProperty.shouldDrawFontStyles)
            cssProperties = cssProperties.concat(this._createFontStyles(styleSettingsModel));
        this.cssCustomClassesLinks.push(_cssHelper_1.createCssClass(cssSelector, cssProperties));
    };
    styleSettingsProvider.prototype._createFontStyles = function (styleSettingsModel) {
        var fontStyles = Array();
        var isUnderline = (styleSettingsModel.FontStyle & this.FontStyle.Underline) !== 0, isStrikeout = (styleSettingsModel.FontStyle & this.FontStyle.Strikeout) !== 0;
        if (styleSettingsModel.ForeColor)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('color', _utils_1.toColor(styleSettingsModel.ForeColor)));
        if (styleSettingsModel.FontFamily)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-family', styleSettingsModel.FontFamily));
        if (styleSettingsModel.FontSize && styleSettingsModel.FontSize > 0)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-size', styleSettingsModel.FontSize));
        if ((styleSettingsModel.FontStyle & this.FontStyle.Bold) !== 0)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-weight', 'bold'));
        if ((styleSettingsModel.FontStyle & this.FontStyle.Italic) !== 0)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('font-style', 'italic'));
        if (isUnderline && isStrikeout)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('text-decoration', 'underline line-through'));
        else if (isUnderline)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('text-decoration', 'underline'));
        else if (isStrikeout)
            fontStyles.push(_cssHelper_1.createCssPropertyWrapper('text-decoration', 'line-through'));
        return fontStyles;
    };
    styleSettingsProvider.prototype._createBackColorStyle = function (styleSettingsModel) {
        return styleSettingsModel.Color ? _cssHelper_1.createCssPropertyWrapper('background-color', _appearance_settings_provider_1.appearanceSettingsProvider.getColor(styleSettingsModel)) : null;
    };
    styleSettingsProvider.prototype._createCssClassFromPredefinedAppearanceType = function (selector, appearanceType, drawProperty) {
        this.cssCustomClassesLinks.push(_cssHelper_1.createCssClass(selector, _appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(appearanceType, drawProperty)));
    };
    styleSettingsProvider.cssClassNames = {
        iconConditionalFormatting: 'dx-icon-dashboard-cf',
        barAxis: 'dx-dashboard-bar-axis',
        customStyle: 'dx-dashboard-cf-style',
        customGradientStyle: 'dx-dashboard-cf-gradient-style',
        dashboardContainer: 'dx-dashboard-container',
        absolutePosition: 'dx-dashboard-absolute-position',
        relativePosition: 'dx-dashboard-relative-position',
        flexParent: 'dx-dashboard-flex-parent',
        flexParentBaseline: 'dx-dashboard-flex-parent-baseline',
        truncated: 'dx-dashboard-truncated',
        wordWrap: 'dx-dashboard-word-wrap',
        stretched: 'dx-dashboard-stretched',
        fixed: 'dx-dashboard-fixed',
        leftMargin: 'dx-dashboard-left-margin',
        rightMargin: 'dx-dashboard-right-margin',
        barContainer: 'dx-dashboard-cf-bar-container',
        barValue: 'dx-dashboard-cf-bar-value'
    };
    styleSettingsProvider.inctanceCounter = 0;
    styleSettingsProvider.hiddenTextCounter = 0;
    return styleSettingsProvider;
}());
exports.styleSettingsProvider = styleSettingsProvider;
var cardItemStyleSettingsProvider = (function (_super) {
    __extends(cardItemStyleSettingsProvider, _super);
    function cardItemStyleSettingsProvider() {
        return _super.call(this) || this;
    }
    cardItemStyleSettingsProvider.prototype._getDrawProperty = function (isSecondaryStyle) {
        var drawProperty = new DrawProperty();
        drawProperty.shouldDrawBackColorStyle = isSecondaryStyle;
        drawProperty.shouldDrawFontStyles = !isSecondaryStyle;
        return drawProperty;
    };
    cardItemStyleSettingsProvider.prototype._getStylePostFix = function (isSecondaryStyle) {
        return isSecondaryStyle ? 'card' : null;
    };
    cardItemStyleSettingsProvider.prototype._isShouldGenerateSecondaryStyle = function (styleSettingsModel) {
        return true;
    };
    cardItemStyleSettingsProvider.prototype._shouldDrawBarStyle = function (styleSettingsModel) {
        return false;
    };
    cardItemStyleSettingsProvider.prototype._textAlignmentIsLeft = function (container) {
        return false;
    };
    cardItemStyleSettingsProvider.prototype._getCssTdSelector = function (cssClassname) {
        var notSelectedOrHovered = ':not(.dx-selected-viewer-item):not(.dx-hovered-viewer-item)';
        return '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + _css_class_names_1.layoutCardCssClassNames.card + notSelectedOrHovered + ' .' + cssClassname + ', '
            + '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + _css_class_names_1.layoutCardCssClassNames.card + notSelectedOrHovered + '.' + cssClassname;
    };
    cardItemStyleSettingsProvider.prototype._applyIconSettings = function (container, iconType, forceLeftAlignment, flexParentStyle) {
        if (flexParentStyle === void 0) { flexParentStyle = styleSettingsProvider.cssClassNames.flexParent; }
        _super.prototype._applyIconSettings.call(this, container, iconType, forceLeftAlignment, styleSettingsProvider.cssClassNames.flexParentBaseline);
    };
    cardItemStyleSettingsProvider.prototype._wrapChildElementsToApplyIconSettings = function (container, classes, forceLeftAlignment) {
        var _a;
        var textClasses = [this.wordWrap ? classes.wordWrap : classes.truncated, classes.stretched];
        var wrappingElement = document.createElement('div');
        (_a = wrappingElement.classList).add.apply(_a, textClasses);
        _jquery_helpers_1.wrapInner(container, wrappingElement);
    };
    cardItemStyleSettingsProvider.prototype.getIconType = function (styleSettingsInfo) {
        var _this = this;
        var sortedStyleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined;
        var iconType;
        if (sortedStyleIndexes && sortedStyleIndexes.length > 0) {
            sortedStyleIndexes.sort(function (a, b) { return a - b; });
            sortedStyleIndexes.forEach(function (index) {
                var styleSettingsModel = _this.cfModel.FormatConditionStyleSettings[index];
                if (styleSettingsModel.IconType !== ICON_TYPE_NONE)
                    iconType = styleSettingsModel.IconType;
            });
        }
        return iconType;
    };
    cardItemStyleSettingsProvider.prototype.applyIndicatorStyle = function (container, iconType) {
        this._applyIconSettings(container, iconType, null);
    };
    return cardItemStyleSettingsProvider;
}(styleSettingsProvider));
exports.cardItemStyleSettingsProvider = cardItemStyleSettingsProvider;
