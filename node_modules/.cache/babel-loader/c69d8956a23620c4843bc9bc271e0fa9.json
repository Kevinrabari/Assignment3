{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_indicator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GaugeDeltaIndicator = void 0;\n\nvar circular_gauge_1 = require(\"devextreme/viz/circular_gauge\");\n\nvar utils_1 = require(\"devextreme/viz/core/utils\");\n\nvar linear_gauge_1 = require(\"devextreme/viz/linear_gauge\");\n\nvar _format_helper_1 = require(\"../../../../data/_format-helper\");\n\nvar _utils_1 = require(\"../../../../data/_utils\");\n\nvar _delta_indicator_1 = require(\"../_delta-indicator\");\n\nvar DELTA_INDENT = 10,\n    DELTA_SIZE_COEFF = 0.5,\n    DELTA_ASPECT_RATIO = 3 / 4;\n\nvar GaugeDeltaIndicator = function () {\n  function GaugeDeltaIndicator(parameters) {\n    this._renderer = parameters.renderer;\n    this._root = parameters.renderer.g().attr({\n      'class': 'dxg-delta-indicator'\n    }).linkOn(parameters.container, {\n      name: 'delta-indicator',\n      after: 'peripheral'\n    });\n    this._getOptions = parameters.optionsCallback;\n  }\n\n  GaugeDeltaIndicator.prototype.dispose = function () {\n    this._root.linkOff();\n\n    this._renderer = this._root = null;\n    return this;\n  };\n\n  GaugeDeltaIndicator.prototype.draw = function () {\n    var that = this,\n        options = that._getOptions(),\n        textValue = formatText(options.text);\n\n    if (textValue === null) return null;\n\n    that._root.linkAppend();\n\n    var text = that._renderer.text(textValue, 0, 0).attr({\n      align: 'center',\n      'class': _delta_indicator_1.DeltaIndicator.getIndicatorColorType(options.type, options.hasPositiveMeaning, options.text.useDefaultColor)\n    }).css(utils_1.patchFontOptions(options.text.font)).append(that._root);\n\n    var textBox = text.getBBox(),\n        shapeHeight = Math.round(textBox.height * DELTA_SIZE_COEFF),\n        shapeWidth = Math.round(shapeHeight / DELTA_ASPECT_RATIO);\n    var shape = new _delta_indicator_1.DeltaIndicator({\n      renderer: that._renderer\n    }).draw({\n      type: options.type,\n      hasPositiveMeaning: options.hasPositiveMeaning,\n      rect: {\n        left: 0,\n        right: shapeWidth,\n        top: -textBox.y - shapeHeight,\n        bottom: -textBox.y\n      }\n    });\n    var width = textBox.width,\n        height = textBox.height,\n        x = Math.round(textBox.width / 2),\n        y = -textBox.y;\n\n    if (shape) {\n      shape.append(that._root);\n      width += shapeWidth + DELTA_INDENT;\n      x += shapeWidth + DELTA_INDENT;\n    }\n\n    text.attr({\n      x: x,\n      y: y\n    });\n    return [width, height];\n  };\n\n  GaugeDeltaIndicator.prototype.layoutOptions = function () {\n    var options = this._getOptions(),\n        layout = options.layout || {};\n\n    return formatText(options.text) !== null ? {\n      horizontalAlignment: layout.horizontalAlignment || 'center',\n      verticalAlignment: layout.verticalAlignment || 'bottom'\n    } : null;\n  };\n\n  GaugeDeltaIndicator.prototype.measure = function () {\n    this.freeSpace();\n    return this.draw();\n  };\n\n  GaugeDeltaIndicator.prototype.move = function (rect) {\n    this._root.attr({\n      translateX: Math.round(rect[0]),\n      translateY: Math.round(rect[1])\n    });\n  };\n\n  GaugeDeltaIndicator.prototype.freeSpace = function () {\n    this._root.linkRemove().clear();\n  };\n\n  return GaugeDeltaIndicator;\n}();\n\nexports.GaugeDeltaIndicator = GaugeDeltaIndicator;\n\nvar formatText = function (options) {\n  var text;\n\n  if (options.value !== undefined) {\n    var obj = {\n      value: options.value,\n      valueText: _format_helper_1.formatHelper.format(options.value, {\n        type: options.format,\n        precision: options.precision\n      })\n    };\n    text = _utils_1.type.isFunction(options.customizeText) ? options.customizeText.call(obj, obj) : obj.valueText;\n  }\n\n  if (_utils_1.type.isString(text) && text) {\n    return text;\n  }\n\n  return null;\n};\n\nvar plugin = {\n  name: 'delta_indicator',\n  init: function () {\n    var that = this;\n    that._delta_indicator = new GaugeDeltaIndicator({\n      renderer: that._renderer,\n      container: that._renderer.root,\n      optionsCallback: function () {\n        return that._getOption('indicator');\n      }\n    });\n\n    that._layout.add(that._delta_indicator);\n  },\n  dispose: function () {\n    this._delta_indicator.freeSpace();\n\n    this._delta_indicator.dispose();\n  }\n};\ncircular_gauge_1.default.addPlugin(plugin);\nlinear_gauge_1.default.addPlugin(plugin);","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/widgets/indicators/gauges/_indicator.js"],"names":["Object","defineProperty","exports","value","GaugeDeltaIndicator","circular_gauge_1","require","utils_1","linear_gauge_1","_format_helper_1","_utils_1","_delta_indicator_1","DELTA_INDENT","DELTA_SIZE_COEFF","DELTA_ASPECT_RATIO","parameters","_renderer","renderer","_root","g","attr","linkOn","container","name","after","_getOptions","optionsCallback","prototype","dispose","linkOff","draw","that","options","textValue","formatText","text","linkAppend","align","DeltaIndicator","getIndicatorColorType","type","hasPositiveMeaning","useDefaultColor","css","patchFontOptions","font","append","textBox","getBBox","shapeHeight","Math","round","height","shapeWidth","shape","rect","left","right","top","y","bottom","width","x","layoutOptions","layout","horizontalAlignment","verticalAlignment","measure","freeSpace","move","translateX","translateY","linkRemove","clear","undefined","obj","valueText","formatHelper","format","precision","isFunction","customizeText","call","isString","plugin","init","_delta_indicator","root","_getOption","_layout","add","default","addPlugin"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_indicator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GaugeDeltaIndicator = void 0;\nvar circular_gauge_1 = require(\"devextreme/viz/circular_gauge\");\nvar utils_1 = require(\"devextreme/viz/core/utils\");\nvar linear_gauge_1 = require(\"devextreme/viz/linear_gauge\");\nvar _format_helper_1 = require(\"../../../../data/_format-helper\");\nvar _utils_1 = require(\"../../../../data/_utils\");\nvar _delta_indicator_1 = require(\"../_delta-indicator\");\nvar DELTA_INDENT = 10, DELTA_SIZE_COEFF = 0.5, DELTA_ASPECT_RATIO = 3 / 4;\nvar GaugeDeltaIndicator = (function () {\n    function GaugeDeltaIndicator(parameters) {\n        this._renderer = parameters.renderer;\n        this._root = parameters.renderer.g().attr({ 'class': 'dxg-delta-indicator' }).linkOn(parameters.container, { name: 'delta-indicator', after: 'peripheral' });\n        this._getOptions = parameters.optionsCallback;\n    }\n    GaugeDeltaIndicator.prototype.dispose = function () {\n        this._root.linkOff();\n        this._renderer = this._root = null;\n        return this;\n    };\n    GaugeDeltaIndicator.prototype.draw = function () {\n        var that = this, options = that._getOptions(), textValue = formatText(options.text);\n        if (textValue === null)\n            return null;\n        that._root.linkAppend();\n        var text = that._renderer.text(textValue, 0, 0).attr({\n            align: 'center',\n            'class': _delta_indicator_1.DeltaIndicator.getIndicatorColorType(options.type, options.hasPositiveMeaning, options.text.useDefaultColor)\n        }).css(utils_1.patchFontOptions(options.text.font)).append(that._root);\n        var textBox = text.getBBox(), shapeHeight = Math.round(textBox.height * DELTA_SIZE_COEFF), shapeWidth = Math.round(shapeHeight / DELTA_ASPECT_RATIO);\n        var shape = new _delta_indicator_1.DeltaIndicator({ renderer: that._renderer }).draw({\n            type: options.type,\n            hasPositiveMeaning: options.hasPositiveMeaning,\n            rect: {\n                left: 0,\n                right: shapeWidth,\n                top: -textBox.y - shapeHeight,\n                bottom: -textBox.y\n            }\n        });\n        var width = textBox.width, height = textBox.height, x = Math.round(textBox.width / 2), y = -textBox.y;\n        if (shape) {\n            shape.append(that._root);\n            width += shapeWidth + DELTA_INDENT;\n            x += shapeWidth + DELTA_INDENT;\n        }\n        text.attr({ x: x, y: y });\n        return [width, height];\n    };\n    GaugeDeltaIndicator.prototype.layoutOptions = function () {\n        var options = this._getOptions(), layout = options.layout || {};\n        return formatText(options.text) !== null ? {\n            horizontalAlignment: layout.horizontalAlignment || 'center',\n            verticalAlignment: layout.verticalAlignment || 'bottom'\n        } : null;\n    };\n    GaugeDeltaIndicator.prototype.measure = function () {\n        this.freeSpace();\n        return this.draw();\n    };\n    GaugeDeltaIndicator.prototype.move = function (rect) {\n        this._root.attr({ translateX: Math.round(rect[0]), translateY: Math.round(rect[1]) });\n    };\n    GaugeDeltaIndicator.prototype.freeSpace = function () {\n        this._root.linkRemove().clear();\n    };\n    return GaugeDeltaIndicator;\n}());\nexports.GaugeDeltaIndicator = GaugeDeltaIndicator;\nvar formatText = function (options) {\n    var text;\n    if (options.value !== undefined) {\n        var obj = {\n            value: options.value,\n            valueText: _format_helper_1.formatHelper.format(options.value, { type: options.format, precision: options.precision })\n        };\n        text = _utils_1.type.isFunction(options.customizeText) ? options.customizeText.call(obj, obj) : obj.valueText;\n    }\n    if (_utils_1.type.isString(text) && text) {\n        return text;\n    }\n    return null;\n};\nvar plugin = {\n    name: 'delta_indicator',\n    init: function () {\n        var that = this;\n        that._delta_indicator = new GaugeDeltaIndicator({\n            renderer: that._renderer,\n            container: that._renderer.root,\n            optionsCallback: function () { return that._getOption('indicator'); }\n        });\n        that._layout.add(that._delta_indicator);\n    },\n    dispose: function () {\n        this._delta_indicator.freeSpace();\n        this._delta_indicator.dispose();\n    }\n};\ncircular_gauge_1.default.addPlugin(plugin);\nlinear_gauge_1.default.addPlugin(plugin);\n"]},"metadata":{},"sourceType":"script"}