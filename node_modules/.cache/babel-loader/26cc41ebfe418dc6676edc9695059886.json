{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport \"./ui.tree_list.editor_factory\";\nimport $ from \"../../core/renderer\";\nimport errors from \"../widget/ui.errors\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\nimport { editingModule } from \"../grid_core/ui.grid_core.editing\";\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\nvar EditingController = editingModule.controllers.editing.inherit({\n  _generateNewItem: function (key) {\n    var item = this.callBase(key);\n    item.data = {\n      key: key\n    };\n    item.children = [];\n    item.level = 0;\n    item.parentKey = this.option(\"rootValue\");\n    return item;\n  },\n  _isProcessedItem: function () {\n    return true;\n  },\n  _setInsertAfterOrBeforeKey: function (change, parentKey) {\n    if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\n      change.insertAfterKey = parentKey;\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _getLoadedRowIndex: function (items, change) {\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentKey = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.parentKeyOf(change.data);\n\n    if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\n      var rowIndex = gridCoreUtils.getIndexByKey(parentKey, items);\n\n      if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\n        return rowIndex + 1;\n      }\n\n      return -1;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _isEditColumnVisible: function () {\n    var result = this.callBase.apply(this, arguments);\n    var editingOptions = this.option(\"editing\");\n    return result || editingOptions.allowAdding;\n  },\n  _isDefaultButtonVisible: function (button, options) {\n    var result = this.callBase.apply(this, arguments);\n    var row = options.row;\n\n    if (\"add\" === button.name) {\n      return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow);\n    }\n\n    return result;\n  },\n  _getEditingButtons: function (options) {\n    var buttons = this.callBase.apply(this, arguments);\n\n    if (!options.column.buttons) {\n      buttons.unshift(this._getButtonConfig(\"add\", options));\n    }\n\n    return buttons;\n  },\n  _beforeSaveEditData: function (change) {\n    var dataController = this._dataController;\n    var result = this.callBase.apply(this, arguments);\n\n    if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\n      var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\n      var key = null === store || void 0 === store ? void 0 : store.key();\n\n      if (!isDefined(key)) {\n        throw errors.Error(\"E1045\");\n      }\n    }\n\n    return result;\n  },\n  addRowByRowIndex: function (rowIndex) {\n    var dataController = this.getController(\"data\");\n    var row = dataController.getVisibleRows()[rowIndex];\n    return this.addRow(row ? row.key : void 0);\n  },\n  addRow: function (key) {\n    if (void 0 === key) {\n      key = this.option(\"rootValue\");\n    }\n\n    return this.callBase.call(this, key);\n  },\n  _addRowCore: function (data, parentKey, oldEditRowIndex) {\n    var callBase = this.callBase;\n    var rootValue = this.option(\"rootValue\");\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentKeyGetter = dataSourceAdapter.createParentIdGetter();\n    parentKey = parentKeyGetter(data);\n\n    if (void 0 !== parentKey && parentKey !== rootValue && !dataController.isRowExpanded(parentKey)) {\n      var deferred = new Deferred();\n      dataController.expandRow(parentKey).done(() => {\n        setTimeout(() => {\n          callBase.call(this, data, parentKey, oldEditRowIndex).done(deferred.resolve).fail(deferred.reject);\n        });\n      }).fail(deferred.reject);\n      return deferred.promise();\n    }\n\n    return callBase.call(this, data, parentKey, oldEditRowIndex);\n  },\n  _initNewRow: function (options, parentKey) {\n    var dataController = this.getController(\"data\");\n    var dataSourceAdapter = dataController.dataSource();\n    var parentIdSetter = dataSourceAdapter.createParentIdSetter();\n    parentIdSetter(options.data, parentKey);\n    return this.callBase.apply(this, arguments);\n  },\n  allowAdding: function (options) {\n    return this._allowEditAction(\"allowAdding\", options);\n  },\n  _needToCloseEditableCell: function ($targetElement) {\n    return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing();\n  },\n\n  getButtonLocalizationNames() {\n    var names = this.callBase.apply(this);\n    names.add = \"dxTreeList-editingAddRowToNode\";\n    return names;\n  }\n\n});\nvar originalRowClick = editingModule.extenders.views.rowsView._rowClick;\nvar originalRowDblClick = editingModule.extenders.views.rowsView._rowDblClick;\n\nvar validateClick = function (e) {\n  var $targetElement = $(e.event.target);\n  var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\n\n  if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n    return false;\n  }\n\n  return !needToCallOriginalClickHandler.call(this, e, originalClickHandler);\n};\n\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\n  var $targetElement = $(e.event.target);\n\n  if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\n    originalClickHandler.call(this, e);\n    return true;\n  }\n\n  return false;\n}\n\nvar RowsViewExtender = extend({}, editingModule.extenders.views.rowsView, {\n  _renderCellCommandContent: function ($container, options) {\n    var editingController = this._editingController;\n    var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\n    var isEditing = options.isEditing || isEditRow;\n\n    if (!isEditing) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return false;\n  },\n  _rowClick: function (e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _rowDblClick: function (e) {\n    if (validateClick.call(this, e)) {\n      this.callBase.apply(this, arguments);\n    }\n  }\n});\ntreeListCore.registerModule(\"editing\", {\n  defaultOptions: function () {\n    return extend(true, editingModule.defaultOptions(), {\n      editing: {\n        texts: {\n          addRowToNode: messageLocalization.format(\"dxTreeList-editingAddRowToNode\")\n        }\n      }\n    });\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: extend(true, {}, editingModule.extenders.controllers, {\n      data: {\n        changeRowExpand: function () {\n          this._editingController.refresh();\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    }),\n    views: {\n      rowsView: RowsViewExtender,\n      headerPanel: editingModule.extenders.views.headerPanel\n    }\n  }\n});","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing.js"],"names":["$","errors","isDefined","extend","Deferred","messageLocalization","treeListCore","gridCoreUtils","editingModule","TREELIST_EXPAND_ICON_CONTAINER_CLASS","SELECT_CHECKBOX_CLASS","DATA_EDIT_DATA_INSERT_TYPE","EditingController","controllers","editing","inherit","_generateNewItem","key","item","callBase","data","children","level","parentKey","option","_isProcessedItem","_setInsertAfterOrBeforeKey","change","insertAfterKey","apply","arguments","_getLoadedRowIndex","items","dataController","getController","dataSourceAdapter","dataSource","parentKeyOf","rowIndex","getIndexByKey","_dataController","isRowExpanded","_isEditColumnVisible","result","editingOptions","allowAdding","_isDefaultButtonVisible","button","options","row","name","_getVisibleEditRowIndex","removed","isNewRow","_getEditingButtons","buttons","column","unshift","_getButtonConfig","_beforeSaveEditData","type","store","Error","addRowByRowIndex","getVisibleRows","addRow","call","_addRowCore","oldEditRowIndex","rootValue","parentKeyGetter","createParentIdGetter","deferred","expandRow","done","setTimeout","resolve","fail","reject","promise","_initNewRow","parentIdSetter","createParentIdSetter","_allowEditAction","_needToCloseEditableCell","$targetElement","closest","length","isEditing","getButtonLocalizationNames","names","add","originalRowClick","extenders","views","rowsView","_rowClick","originalRowDblClick","_rowDblClick","validateClick","e","event","target","originalClickHandler","needToCallOriginalClickHandler","RowsViewExtender","_renderCellCommandContent","$container","editingController","_editingController","isEditRow","registerModule","defaultOptions","texts","addRowToNode","format","changeRowExpand","refresh","headerPanel"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.editing.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport \"./ui.tree_list.editor_factory\";\r\nimport $ from \"../../core/renderer\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport treeListCore from \"./ui.tree_list.core\";\r\nimport gridCoreUtils from \"../grid_core/ui.grid_core.utils\";\r\nimport {\r\n    editingModule\r\n} from \"../grid_core/ui.grid_core.editing\";\r\nvar TREELIST_EXPAND_ICON_CONTAINER_CLASS = \"dx-treelist-icon-container\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar EditingController = editingModule.controllers.editing.inherit({\r\n    _generateNewItem: function(key) {\r\n        var item = this.callBase(key);\r\n        item.data = {\r\n            key: key\r\n        };\r\n        item.children = [];\r\n        item.level = 0;\r\n        item.parentKey = this.option(\"rootValue\");\r\n        return item\r\n    },\r\n    _isProcessedItem: function() {\r\n        return true\r\n    },\r\n    _setInsertAfterOrBeforeKey: function(change, parentKey) {\r\n        if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\r\n            change.insertAfterKey = parentKey\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _getLoadedRowIndex: function(items, change) {\r\n        var dataController = this.getController(\"data\");\r\n        var dataSourceAdapter = dataController.dataSource();\r\n        var parentKey = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.parentKeyOf(change.data);\r\n        if (void 0 !== parentKey && parentKey !== this.option(\"rootValue\")) {\r\n            var rowIndex = gridCoreUtils.getIndexByKey(parentKey, items);\r\n            if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {\r\n                return rowIndex + 1\r\n            }\r\n            return -1\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _isEditColumnVisible: function() {\r\n        var result = this.callBase.apply(this, arguments);\r\n        var editingOptions = this.option(\"editing\");\r\n        return result || editingOptions.allowAdding\r\n    },\r\n    _isDefaultButtonVisible: function(button, options) {\r\n        var result = this.callBase.apply(this, arguments);\r\n        var row = options.row;\r\n        if (\"add\" === button.name) {\r\n            return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow)\r\n        }\r\n        return result\r\n    },\r\n    _getEditingButtons: function(options) {\r\n        var buttons = this.callBase.apply(this, arguments);\r\n        if (!options.column.buttons) {\r\n            buttons.unshift(this._getButtonConfig(\"add\", options))\r\n        }\r\n        return buttons\r\n    },\r\n    _beforeSaveEditData: function(change) {\r\n        var dataController = this._dataController;\r\n        var result = this.callBase.apply(this, arguments);\r\n        if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {\r\n            var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();\r\n            var key = null === store || void 0 === store ? void 0 : store.key();\r\n            if (!isDefined(key)) {\r\n                throw errors.Error(\"E1045\")\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    addRowByRowIndex: function(rowIndex) {\r\n        var dataController = this.getController(\"data\");\r\n        var row = dataController.getVisibleRows()[rowIndex];\r\n        return this.addRow(row ? row.key : void 0)\r\n    },\r\n    addRow: function(key) {\r\n        if (void 0 === key) {\r\n            key = this.option(\"rootValue\")\r\n        }\r\n        return this.callBase.call(this, key)\r\n    },\r\n    _addRowCore: function(data, parentKey, oldEditRowIndex) {\r\n        var callBase = this.callBase;\r\n        var rootValue = this.option(\"rootValue\");\r\n        var dataController = this.getController(\"data\");\r\n        var dataSourceAdapter = dataController.dataSource();\r\n        var parentKeyGetter = dataSourceAdapter.createParentIdGetter();\r\n        parentKey = parentKeyGetter(data);\r\n        if (void 0 !== parentKey && parentKey !== rootValue && !dataController.isRowExpanded(parentKey)) {\r\n            var deferred = new Deferred;\r\n            dataController.expandRow(parentKey).done(() => {\r\n                setTimeout(() => {\r\n                    callBase.call(this, data, parentKey, oldEditRowIndex).done(deferred.resolve).fail(deferred.reject)\r\n                })\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        }\r\n        return callBase.call(this, data, parentKey, oldEditRowIndex)\r\n    },\r\n    _initNewRow: function(options, parentKey) {\r\n        var dataController = this.getController(\"data\");\r\n        var dataSourceAdapter = dataController.dataSource();\r\n        var parentIdSetter = dataSourceAdapter.createParentIdSetter();\r\n        parentIdSetter(options.data, parentKey);\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    allowAdding: function(options) {\r\n        return this._allowEditAction(\"allowAdding\", options)\r\n    },\r\n    _needToCloseEditableCell: function($targetElement) {\r\n        return this.callBase.apply(this, arguments) || $targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length && this.isEditing()\r\n    },\r\n    getButtonLocalizationNames() {\r\n        var names = this.callBase.apply(this);\r\n        names.add = \"dxTreeList-editingAddRowToNode\";\r\n        return names\r\n    }\r\n});\r\nvar originalRowClick = editingModule.extenders.views.rowsView._rowClick;\r\nvar originalRowDblClick = editingModule.extenders.views.rowsView._rowDblClick;\r\nvar validateClick = function(e) {\r\n    var $targetElement = $(e.event.target);\r\n    var originalClickHandler = \"dxdblclick\" === e.event.type ? originalRowDblClick : originalRowClick;\r\n    if ($targetElement.closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n        return false\r\n    }\r\n    return !needToCallOriginalClickHandler.call(this, e, originalClickHandler)\r\n};\r\n\r\nfunction needToCallOriginalClickHandler(e, originalClickHandler) {\r\n    var $targetElement = $(e.event.target);\r\n    if (!$targetElement.closest(\".\" + TREELIST_EXPAND_ICON_CONTAINER_CLASS).length) {\r\n        originalClickHandler.call(this, e);\r\n        return true\r\n    }\r\n    return false\r\n}\r\nvar RowsViewExtender = extend({}, editingModule.extenders.views.rowsView, {\r\n    _renderCellCommandContent: function($container, options) {\r\n        var editingController = this._editingController;\r\n        var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);\r\n        var isEditing = options.isEditing || isEditRow;\r\n        if (!isEditing) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return false\r\n    },\r\n    _rowClick: function(e) {\r\n        if (validateClick.call(this, e)) {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _rowDblClick: function(e) {\r\n        if (validateClick.call(this, e)) {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    }\r\n});\r\ntreeListCore.registerModule(\"editing\", {\r\n    defaultOptions: function() {\r\n        return extend(true, editingModule.defaultOptions(), {\r\n            editing: {\r\n                texts: {\r\n                    addRowToNode: messageLocalization.format(\"dxTreeList-editingAddRowToNode\")\r\n                }\r\n            }\r\n        })\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: extend(true, {}, editingModule.extenders.controllers, {\r\n            data: {\r\n                changeRowExpand: function() {\r\n                    this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        }),\r\n        views: {\r\n            rowsView: RowsViewExtender,\r\n            headerPanel: editingModule.extenders.views.headerPanel\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}