{"ast":null,"code":"/**\r\n* DevExpress Dashboard (range-converter.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatConditionConverter = exports.FormatConditionIconGroups = exports.FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeSetPredefinedType = void 0;\nvar FormatConditionRangeSetPredefinedType;\n\n(function (FormatConditionRangeSetPredefinedType) {\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"None\"] = 0] = \"None\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Custom\"] = 1] = \"Custom\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows2\"] = 2] = \"Arrows2\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows3\"] = 3] = \"Arrows3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows4\"] = 4] = \"Arrows4\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows5\"] = 5] = \"Arrows5\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray2\"] = 6] = \"ArrowsGray2\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray3\"] = 7] = \"ArrowsGray3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray4\"] = 8] = \"ArrowsGray4\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray5\"] = 9] = \"ArrowsGray5\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"PositiveNegative3\"] = 10] = \"PositiveNegative3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Stars3\"] = 11] = \"Stars3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Quarters5\"] = 12] = \"Quarters5\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Bars4\"] = 13] = \"Bars4\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Bars5\"] = 14] = \"Bars5\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Boxes5\"] = 15] = \"Boxes5\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"TrafficLights3\"] = 16] = \"TrafficLights3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Circles2\"] = 17] = \"Circles2\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Circles3\"] = 18] = \"Circles3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Circles4\"] = 19] = \"Circles4\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"CirclesRedToBlack4\"] = 20] = \"CirclesRedToBlack4\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Signs3\"] = 21] = \"Signs3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Symbols2\"] = 22] = \"Symbols2\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Symbols3\"] = 23] = \"Symbols3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"SymbolsCircled2\"] = 24] = \"SymbolsCircled2\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"SymbolsCircled3\"] = 25] = \"SymbolsCircled3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Flags3\"] = 26] = \"Flags3\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedGreen\"] = 27] = \"ColorsPaleRedGreen\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedGreenBlue\"] = 28] = \"ColorsPaleRedGreenBlue\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedYellowGreenBlue\"] = 29] = \"ColorsPaleRedYellowGreenBlue\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedOrangeYellowGreenBlue\"] = 30] = \"ColorsPaleRedOrangeYellowGreenBlue\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedGreen\"] = 31] = \"ColorsRedGreen\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedGreenBlue\"] = 32] = \"ColorsRedGreenBlue\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedYellowGreenBlue\"] = 33] = \"ColorsRedYellowGreenBlue\";\n  FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedOrangeYellowGreenBlue\"] = 34] = \"ColorsRedOrangeYellowGreenBlue\";\n})(FormatConditionRangeSetPredefinedType = exports.FormatConditionRangeSetPredefinedType || (exports.FormatConditionRangeSetPredefinedType = {}));\n\nvar FormatConditionRangeGradientPredefinedType;\n\n(function (FormatConditionRangeGradientPredefinedType) {\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"None\"] = 0] = \"None\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"Custom\"] = 1] = \"Custom\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenWhite\"] = 2] = \"GreenWhite\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"WhiteGreen\"] = 3] = \"WhiteGreen\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedWhite\"] = 4] = \"RedWhite\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"WhiteRed\"] = 5] = \"WhiteRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"YellowGreen\"] = 6] = \"YellowGreen\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenYellow\"] = 7] = \"GreenYellow\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"YellowRed\"] = 8] = \"YellowRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedYellow\"] = 9] = \"RedYellow\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueWhite\"] = 10] = \"BlueWhite\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"WhiteBlue\"] = 11] = \"WhiteBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueRed\"] = 12] = \"BlueRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedBlue\"] = 13] = \"RedBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"YellowBlue\"] = 14] = \"YellowBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueYellow\"] = 15] = \"BlueYellow\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenBlue\"] = 16] = \"GreenBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueGreen\"] = 17] = \"BlueGreen\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenWhiteBlue\"] = 18] = \"GreenWhiteBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueWhiteGreen\"] = 19] = \"BlueWhiteGreen\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueWhiteRed\"] = 20] = \"BlueWhiteRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedWhiteBlue\"] = 21] = \"RedWhiteBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenWhiteRed\"] = 22] = \"GreenWhiteRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedWhiteGreen\"] = 23] = \"RedWhiteGreen\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenYellowRed\"] = 24] = \"GreenYellowRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedYellowGreen\"] = 25] = \"RedYellowGreen\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueYellowRed\"] = 26] = \"BlueYellowRed\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedYellowBlue\"] = 27] = \"RedYellowBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenYellowBlue\"] = 28] = \"GreenYellowBlue\";\n  FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueYellowGreen\"] = 29] = \"BlueYellowGreen\";\n})(FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeGradientPredefinedType || (exports.FormatConditionRangeGradientPredefinedType = {}));\n\nvar FormatConditionIconGroups;\n\n(function (FormatConditionIconGroups) {\n  FormatConditionIconGroups[FormatConditionIconGroups[\"Directional\"] = 0] = \"Directional\";\n  FormatConditionIconGroups[FormatConditionIconGroups[\"Indicators\"] = 1] = \"Indicators\";\n  FormatConditionIconGroups[FormatConditionIconGroups[\"Flags\"] = 2] = \"Flags\";\n  FormatConditionIconGroups[FormatConditionIconGroups[\"Shapes\"] = 3] = \"Shapes\";\n  FormatConditionIconGroups[FormatConditionIconGroups[\"RatingsMonochrome\"] = 4] = \"RatingsMonochrome\";\n  FormatConditionIconGroups[FormatConditionIconGroups[\"RatingsColor\"] = 5] = \"RatingsColor\";\n})(FormatConditionIconGroups = exports.FormatConditionIconGroups || (exports.FormatConditionIconGroups = {}));\n\nvar FormatConditionRangeSetTypeGroups;\n\n(function (FormatConditionRangeSetTypeGroups) {\n  FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges2\"] = 0] = \"Ranges2\";\n  FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges3\"] = 1] = \"Ranges3\";\n  FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges4\"] = 2] = \"Ranges4\";\n  FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges5\"] = 3] = \"Ranges5\";\n})(FormatConditionRangeSetTypeGroups || (FormatConditionRangeSetTypeGroups = {}));\n\nvar FormatConditionRangeGradientTypeGroups;\n\n(function (FormatConditionRangeGradientTypeGroups) {\n  FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups[\"TwoColors\"] = 0] = \"TwoColors\";\n  FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups[\"ThreeColors\"] = 1] = \"ThreeColors\";\n})(FormatConditionRangeGradientTypeGroups || (FormatConditionRangeGradientTypeGroups = {}));\n\nvar FormatConditionConverter = function () {\n  function FormatConditionConverter() {}\n\n  FormatConditionConverter.getStyleList = function (type) {\n    var styleList = {};\n    var iconTypes = FormatConditionConverter.toIconTypes(type);\n\n    if (iconTypes) {\n      styleList.list = iconTypes;\n      styleList.isIcon = true;\n    } else {\n      styleList.list = FormatConditionConverter.toColorTypes(type);\n      styleList.isIcon = false;\n    }\n\n    return styleList;\n  };\n\n  FormatConditionConverter.toColorTypes = function (colorRangeSetType) {\n    switch (colorRangeSetType) {\n      case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen:\n        return ['PaleRed', 'PaleGreen'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue:\n        return ['PaleRed', 'PaleGreen', 'PaleBlue'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue:\n        return ['PaleRed', 'PaleYellow', 'PaleGreen', 'PaleBlue'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue:\n        return ['PaleRed', 'PaleOrange', 'PaleYellow', 'PaleGreen', 'PaleBlue'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsRedGreen:\n        return ['Red', 'Green'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue:\n        return ['Red', 'Green', 'Blue'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue:\n        return ['Red', 'Yellow', 'Green', 'Blue'];\n\n      case FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue:\n        return ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];\n\n      default:\n        return null;\n    }\n  };\n\n  FormatConditionConverter.toIconTypes = function (iconRangeSetType) {\n    switch (iconRangeSetType) {\n      case FormatConditionRangeSetPredefinedType.Arrows2:\n        return ['DirectionalRedDownArrow', 'DirectionalGreenArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.Arrows3:\n        return ['DirectionalRedDownArrow', 'DirectionalYellowSideArrow', 'DirectionalGreenArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.Arrows4:\n        return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.Arrows5:\n        return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowSideArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.ArrowsGray2:\n        return ['DirectionalGrayDownArrow', 'DirectionalGrayArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.ArrowsGray3:\n        return ['DirectionalGrayDownArrow', 'DirectionalGraySideArrow', 'DirectionalGrayArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.ArrowsGray4:\n        return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.ArrowsGray5:\n        return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGraySideArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];\n\n      case FormatConditionRangeSetPredefinedType.PositiveNegative3:\n        return ['DirectionalRedTriangleDown', 'DirectionalYellowDash', 'DirectionalGreenTriangleUp'];\n\n      case FormatConditionRangeSetPredefinedType.Stars3:\n        return ['RatingEmptyGrayStar', 'RatingHalfGrayStar', 'RatingFullGrayStar'];\n\n      case FormatConditionRangeSetPredefinedType.Quarters5:\n        return ['RatingEmptyGrayCircle', 'Rating3QuartersGrayCircle', 'Rating2QuartersGrayCircle', 'Rating1QuarterGrayCircle', 'RatingFullGrayCircle'];\n\n      case FormatConditionRangeSetPredefinedType.Bars4:\n        return ['Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];\n\n      case FormatConditionRangeSetPredefinedType.Bars5:\n        return ['Rating0Bars', 'Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];\n\n      case FormatConditionRangeSetPredefinedType.Boxes5:\n        return ['Rating0FilledBoxes', 'Rating1FilledBox', 'Rating2FilledBoxes', 'Rating3FilledBoxes', 'Rating4FilledBoxes'];\n\n      case FormatConditionRangeSetPredefinedType.TrafficLights3:\n        return ['ShapeRedTrafficLight', 'ShapeYellowTrafficLight', 'ShapeGreenTrafficLight'];\n\n      case FormatConditionRangeSetPredefinedType.Circles2:\n        return ['ShapeRedCircle', 'ShapeGreenCircle'];\n\n      case FormatConditionRangeSetPredefinedType.Circles3:\n        return ['ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];\n\n      case FormatConditionRangeSetPredefinedType.Circles4:\n        return ['RatingFullGrayCircle', 'ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];\n\n      case FormatConditionRangeSetPredefinedType.CirclesRedToBlack4:\n        return ['RatingFullGrayCircle', 'ShapeLightGrayCircle', 'ShapeLightRedCircle', 'ShapeRedCircle'];\n\n      case FormatConditionRangeSetPredefinedType.Signs3:\n        return ['ShapeRedDiamond', 'ShapeYellowTriangle', 'ShapeGreenCircle'];\n\n      case FormatConditionRangeSetPredefinedType.Symbols2:\n        return ['IndicatorRedCross', 'IndicatorGreenCheck'];\n\n      case FormatConditionRangeSetPredefinedType.Symbols3:\n        return ['IndicatorRedCross', 'IndicatorYellowExclamation', 'IndicatorGreenCheck'];\n\n      case FormatConditionRangeSetPredefinedType.SymbolsCircled2:\n        return ['IndicatorCircledRedCross', 'IndicatorCircledGreenCheck'];\n\n      case FormatConditionRangeSetPredefinedType.SymbolsCircled3:\n        return ['IndicatorCircledRedCross', 'IndicatorCircledYellowExclamation', 'IndicatorCircledGreenCheck'];\n\n      case FormatConditionRangeSetPredefinedType.Flags3:\n        return ['IndicatorRedFlag', 'IndicatorYellowFlag', 'IndicatorGreenFlag'];\n\n      default:\n        return null;\n    }\n  };\n\n  FormatConditionConverter.toAppearanceTypes = function (gradientType) {\n    switch (gradientType) {\n      case FormatConditionRangeGradientPredefinedType.GreenWhite:\n        return ['GradientGreen', 'GradientTransparent'];\n\n      case FormatConditionRangeGradientPredefinedType.WhiteGreen:\n        return ['GradientTransparent', 'GradientGreen'];\n\n      case FormatConditionRangeGradientPredefinedType.RedWhite:\n        return ['GradientRed', 'GradientTransparent'];\n\n      case FormatConditionRangeGradientPredefinedType.WhiteRed:\n        return ['GradientTransparent', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.GreenYellow:\n        return ['GradientGreen', 'GradientYellow'];\n\n      case FormatConditionRangeGradientPredefinedType.YellowGreen:\n        return ['GradientYellow', 'GradientGreen'];\n\n      case FormatConditionRangeGradientPredefinedType.RedYellow:\n        return ['GradientRed', 'GradientYellow'];\n\n      case FormatConditionRangeGradientPredefinedType.YellowRed:\n        return ['GradientYellow', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueWhite:\n        return ['GradientBlue', 'GradientTransparent'];\n\n      case FormatConditionRangeGradientPredefinedType.WhiteBlue:\n        return ['GradientTransparent', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueRed:\n        return ['GradientBlue', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.RedBlue:\n        return ['GradientRed', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueYellow:\n        return ['GradientBlue', 'GradientYellow'];\n\n      case FormatConditionRangeGradientPredefinedType.YellowBlue:\n        return ['GradientYellow', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueGreen:\n        return ['GradientBlue', 'GradientGreen'];\n\n      case FormatConditionRangeGradientPredefinedType.GreenBlue:\n        return ['GradientGreen', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.GreenWhiteBlue:\n        return ['GradientGreen', 'GradientTransparent', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueWhiteGreen:\n        return ['GradientBlue', 'GradientTransparent', 'GradientGreen'];\n\n      case FormatConditionRangeGradientPredefinedType.RedWhiteBlue:\n        return ['GradientRed', 'GradientTransparent', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueWhiteRed:\n        return ['GradientBlue', 'GradientTransparent', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.GreenWhiteRed:\n        return ['GradientGreen', 'GradientTransparent', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.RedWhiteGreen:\n        return ['GradientRed', 'GradientTransparent', 'GradientGreen'];\n\n      case FormatConditionRangeGradientPredefinedType.GreenYellowRed:\n        return ['GradientGreen', 'GradientYellow', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.RedYellowGreen:\n        return ['GradientRed', 'GradientYellow', 'GradientGreen'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueYellowRed:\n        return ['GradientBlue', 'GradientYellow', 'GradientRed'];\n\n      case FormatConditionRangeGradientPredefinedType.RedYellowBlue:\n        return ['GradientRed', 'GradientYellow', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.GreenYellowBlue:\n        return ['GradientGreen', 'GradientYellow', 'GradientBlue'];\n\n      case FormatConditionRangeGradientPredefinedType.BlueYellowGreen:\n        return ['GradientBlue', 'GradientYellow', 'GradientGreen'];\n\n      default:\n        return null;\n    }\n  };\n\n  FormatConditionConverter.toGroupIconTypes = function (iconsGroup) {\n    switch (iconsGroup) {\n      case FormatConditionIconGroups.Directional:\n        return ['DirectionalGreenArrowUp', 'DirectionalYellowUpInclineArrow', 'DirectionalYellowSideArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalRedDownArrow', 'DirectionalGrayArrowUp', 'DirectionalGrayUpInclineArrow', 'DirectionalGraySideArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGrayDownArrow', 'DirectionalYellowDash', 'DirectionalRedTriangleDown', 'DirectionalGreenTriangleUp'];\n\n      case FormatConditionIconGroups.RatingsMonochrome:\n        return ['RatingFullGrayCircle', 'Rating1QuarterGrayCircle', 'Rating2QuartersGrayCircle', 'Rating3QuartersGrayCircle', 'RatingEmptyGrayCircle', 'RatingFullGrayStar', 'RatingHalfGrayStar', 'RatingEmptyGrayStar'];\n\n      case FormatConditionIconGroups.RatingsColor:\n        return ['Rating4Bars', 'Rating3Bars', 'Rating2Bars', 'Rating1Bar', 'Rating0Bars', 'Rating4FilledBoxes', 'Rating3FilledBoxes', 'Rating2FilledBoxes', 'Rating1FilledBox', 'Rating0FilledBoxes'];\n\n      case FormatConditionIconGroups.Indicators:\n        return ['IndicatorGreenCheck', 'IndicatorYellowExclamation', 'IndicatorRedCross', 'IndicatorCircledGreenCheck', 'IndicatorCircledYellowExclamation', 'IndicatorCircledRedCross', 'ShapeYellowTriangle', 'ShapeRedDiamond'];\n\n      case FormatConditionIconGroups.Flags:\n        return ['IndicatorGreenFlag', 'IndicatorYellowFlag', 'IndicatorRedFlag'];\n\n      case FormatConditionIconGroups.Shapes:\n        return ['ShapeGreenTrafficLight', 'ShapeYellowTrafficLight', 'ShapeRedTrafficLight', 'ShapeGreenCircle', 'ShapeYellowCircle', 'ShapeRedCircle', 'ShapeLightRedCircle', 'ShapeLightGrayCircle'];\n\n      default:\n        throw new Error('Undefined icon group type');\n    }\n  };\n\n  return FormatConditionConverter;\n}();\n\nexports.FormatConditionConverter = FormatConditionConverter;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/model/format-rules/conditions/range/range-converter.js"],"names":["Object","defineProperty","exports","value","FormatConditionConverter","FormatConditionIconGroups","FormatConditionRangeGradientPredefinedType","FormatConditionRangeSetPredefinedType","FormatConditionRangeSetTypeGroups","FormatConditionRangeGradientTypeGroups","getStyleList","type","styleList","iconTypes","toIconTypes","list","isIcon","toColorTypes","colorRangeSetType","ColorsPaleRedGreen","ColorsPaleRedGreenBlue","ColorsPaleRedYellowGreenBlue","ColorsPaleRedOrangeYellowGreenBlue","ColorsRedGreen","ColorsRedGreenBlue","ColorsRedYellowGreenBlue","ColorsRedOrangeYellowGreenBlue","iconRangeSetType","Arrows2","Arrows3","Arrows4","Arrows5","ArrowsGray2","ArrowsGray3","ArrowsGray4","ArrowsGray5","PositiveNegative3","Stars3","Quarters5","Bars4","Bars5","Boxes5","TrafficLights3","Circles2","Circles3","Circles4","CirclesRedToBlack4","Signs3","Symbols2","Symbols3","SymbolsCircled2","SymbolsCircled3","Flags3","toAppearanceTypes","gradientType","GreenWhite","WhiteGreen","RedWhite","WhiteRed","GreenYellow","YellowGreen","RedYellow","YellowRed","BlueWhite","WhiteBlue","BlueRed","RedBlue","BlueYellow","YellowBlue","BlueGreen","GreenBlue","GreenWhiteBlue","BlueWhiteGreen","RedWhiteBlue","BlueWhiteRed","GreenWhiteRed","RedWhiteGreen","GreenYellowRed","RedYellowGreen","BlueYellowRed","RedYellowBlue","GreenYellowBlue","BlueYellowGreen","toGroupIconTypes","iconsGroup","Directional","RatingsMonochrome","RatingsColor","Indicators","Flags","Shapes","Error"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (range-converter.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatConditionConverter = exports.FormatConditionIconGroups = exports.FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeSetPredefinedType = void 0;\nvar FormatConditionRangeSetPredefinedType;\n(function (FormatConditionRangeSetPredefinedType) {\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"None\"] = 0] = \"None\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Custom\"] = 1] = \"Custom\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows2\"] = 2] = \"Arrows2\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows3\"] = 3] = \"Arrows3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows4\"] = 4] = \"Arrows4\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Arrows5\"] = 5] = \"Arrows5\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray2\"] = 6] = \"ArrowsGray2\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray3\"] = 7] = \"ArrowsGray3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray4\"] = 8] = \"ArrowsGray4\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ArrowsGray5\"] = 9] = \"ArrowsGray5\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"PositiveNegative3\"] = 10] = \"PositiveNegative3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Stars3\"] = 11] = \"Stars3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Quarters5\"] = 12] = \"Quarters5\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Bars4\"] = 13] = \"Bars4\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Bars5\"] = 14] = \"Bars5\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Boxes5\"] = 15] = \"Boxes5\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"TrafficLights3\"] = 16] = \"TrafficLights3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Circles2\"] = 17] = \"Circles2\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Circles3\"] = 18] = \"Circles3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Circles4\"] = 19] = \"Circles4\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"CirclesRedToBlack4\"] = 20] = \"CirclesRedToBlack4\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Signs3\"] = 21] = \"Signs3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Symbols2\"] = 22] = \"Symbols2\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Symbols3\"] = 23] = \"Symbols3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"SymbolsCircled2\"] = 24] = \"SymbolsCircled2\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"SymbolsCircled3\"] = 25] = \"SymbolsCircled3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"Flags3\"] = 26] = \"Flags3\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedGreen\"] = 27] = \"ColorsPaleRedGreen\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedGreenBlue\"] = 28] = \"ColorsPaleRedGreenBlue\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedYellowGreenBlue\"] = 29] = \"ColorsPaleRedYellowGreenBlue\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsPaleRedOrangeYellowGreenBlue\"] = 30] = \"ColorsPaleRedOrangeYellowGreenBlue\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedGreen\"] = 31] = \"ColorsRedGreen\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedGreenBlue\"] = 32] = \"ColorsRedGreenBlue\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedYellowGreenBlue\"] = 33] = \"ColorsRedYellowGreenBlue\";\n    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType[\"ColorsRedOrangeYellowGreenBlue\"] = 34] = \"ColorsRedOrangeYellowGreenBlue\";\n})(FormatConditionRangeSetPredefinedType = exports.FormatConditionRangeSetPredefinedType || (exports.FormatConditionRangeSetPredefinedType = {}));\nvar FormatConditionRangeGradientPredefinedType;\n(function (FormatConditionRangeGradientPredefinedType) {\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"None\"] = 0] = \"None\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"Custom\"] = 1] = \"Custom\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenWhite\"] = 2] = \"GreenWhite\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"WhiteGreen\"] = 3] = \"WhiteGreen\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedWhite\"] = 4] = \"RedWhite\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"WhiteRed\"] = 5] = \"WhiteRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"YellowGreen\"] = 6] = \"YellowGreen\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenYellow\"] = 7] = \"GreenYellow\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"YellowRed\"] = 8] = \"YellowRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedYellow\"] = 9] = \"RedYellow\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueWhite\"] = 10] = \"BlueWhite\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"WhiteBlue\"] = 11] = \"WhiteBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueRed\"] = 12] = \"BlueRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedBlue\"] = 13] = \"RedBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"YellowBlue\"] = 14] = \"YellowBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueYellow\"] = 15] = \"BlueYellow\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenBlue\"] = 16] = \"GreenBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueGreen\"] = 17] = \"BlueGreen\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenWhiteBlue\"] = 18] = \"GreenWhiteBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueWhiteGreen\"] = 19] = \"BlueWhiteGreen\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueWhiteRed\"] = 20] = \"BlueWhiteRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedWhiteBlue\"] = 21] = \"RedWhiteBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenWhiteRed\"] = 22] = \"GreenWhiteRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedWhiteGreen\"] = 23] = \"RedWhiteGreen\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenYellowRed\"] = 24] = \"GreenYellowRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedYellowGreen\"] = 25] = \"RedYellowGreen\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueYellowRed\"] = 26] = \"BlueYellowRed\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"RedYellowBlue\"] = 27] = \"RedYellowBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"GreenYellowBlue\"] = 28] = \"GreenYellowBlue\";\n    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType[\"BlueYellowGreen\"] = 29] = \"BlueYellowGreen\";\n})(FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeGradientPredefinedType || (exports.FormatConditionRangeGradientPredefinedType = {}));\nvar FormatConditionIconGroups;\n(function (FormatConditionIconGroups) {\n    FormatConditionIconGroups[FormatConditionIconGroups[\"Directional\"] = 0] = \"Directional\";\n    FormatConditionIconGroups[FormatConditionIconGroups[\"Indicators\"] = 1] = \"Indicators\";\n    FormatConditionIconGroups[FormatConditionIconGroups[\"Flags\"] = 2] = \"Flags\";\n    FormatConditionIconGroups[FormatConditionIconGroups[\"Shapes\"] = 3] = \"Shapes\";\n    FormatConditionIconGroups[FormatConditionIconGroups[\"RatingsMonochrome\"] = 4] = \"RatingsMonochrome\";\n    FormatConditionIconGroups[FormatConditionIconGroups[\"RatingsColor\"] = 5] = \"RatingsColor\";\n})(FormatConditionIconGroups = exports.FormatConditionIconGroups || (exports.FormatConditionIconGroups = {}));\nvar FormatConditionRangeSetTypeGroups;\n(function (FormatConditionRangeSetTypeGroups) {\n    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges2\"] = 0] = \"Ranges2\";\n    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges3\"] = 1] = \"Ranges3\";\n    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges4\"] = 2] = \"Ranges4\";\n    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups[\"Ranges5\"] = 3] = \"Ranges5\";\n})(FormatConditionRangeSetTypeGroups || (FormatConditionRangeSetTypeGroups = {}));\nvar FormatConditionRangeGradientTypeGroups;\n(function (FormatConditionRangeGradientTypeGroups) {\n    FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups[\"TwoColors\"] = 0] = \"TwoColors\";\n    FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups[\"ThreeColors\"] = 1] = \"ThreeColors\";\n})(FormatConditionRangeGradientTypeGroups || (FormatConditionRangeGradientTypeGroups = {}));\nvar FormatConditionConverter = (function () {\n    function FormatConditionConverter() {\n    }\n    FormatConditionConverter.getStyleList = function (type) {\n        var styleList = {};\n        var iconTypes = FormatConditionConverter.toIconTypes(type);\n        if (iconTypes) {\n            styleList.list = iconTypes;\n            styleList.isIcon = true;\n        }\n        else {\n            styleList.list = FormatConditionConverter.toColorTypes(type);\n            styleList.isIcon = false;\n        }\n        return styleList;\n    };\n    FormatConditionConverter.toColorTypes = function (colorRangeSetType) {\n        switch (colorRangeSetType) {\n            case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen:\n                return ['PaleRed', 'PaleGreen'];\n            case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue:\n                return ['PaleRed', 'PaleGreen', 'PaleBlue'];\n            case FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue:\n                return ['PaleRed', 'PaleYellow', 'PaleGreen', 'PaleBlue'];\n            case FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue:\n                return ['PaleRed', 'PaleOrange', 'PaleYellow', 'PaleGreen', 'PaleBlue'];\n            case FormatConditionRangeSetPredefinedType.ColorsRedGreen:\n                return ['Red', 'Green'];\n            case FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue:\n                return ['Red', 'Green', 'Blue'];\n            case FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue:\n                return ['Red', 'Yellow', 'Green', 'Blue'];\n            case FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue:\n                return ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];\n            default:\n                return null;\n        }\n    };\n    FormatConditionConverter.toIconTypes = function (iconRangeSetType) {\n        switch (iconRangeSetType) {\n            case FormatConditionRangeSetPredefinedType.Arrows2:\n                return ['DirectionalRedDownArrow', 'DirectionalGreenArrowUp'];\n            case FormatConditionRangeSetPredefinedType.Arrows3:\n                return ['DirectionalRedDownArrow', 'DirectionalYellowSideArrow', 'DirectionalGreenArrowUp'];\n            case FormatConditionRangeSetPredefinedType.Arrows4:\n                return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];\n            case FormatConditionRangeSetPredefinedType.Arrows5:\n                return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowSideArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];\n            case FormatConditionRangeSetPredefinedType.ArrowsGray2:\n                return ['DirectionalGrayDownArrow', 'DirectionalGrayArrowUp'];\n            case FormatConditionRangeSetPredefinedType.ArrowsGray3:\n                return ['DirectionalGrayDownArrow', 'DirectionalGraySideArrow', 'DirectionalGrayArrowUp'];\n            case FormatConditionRangeSetPredefinedType.ArrowsGray4:\n                return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];\n            case FormatConditionRangeSetPredefinedType.ArrowsGray5:\n                return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGraySideArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];\n            case FormatConditionRangeSetPredefinedType.PositiveNegative3:\n                return ['DirectionalRedTriangleDown', 'DirectionalYellowDash', 'DirectionalGreenTriangleUp'];\n            case FormatConditionRangeSetPredefinedType.Stars3:\n                return ['RatingEmptyGrayStar', 'RatingHalfGrayStar', 'RatingFullGrayStar'];\n            case FormatConditionRangeSetPredefinedType.Quarters5:\n                return ['RatingEmptyGrayCircle', 'Rating3QuartersGrayCircle', 'Rating2QuartersGrayCircle', 'Rating1QuarterGrayCircle', 'RatingFullGrayCircle'];\n            case FormatConditionRangeSetPredefinedType.Bars4:\n                return ['Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];\n            case FormatConditionRangeSetPredefinedType.Bars5:\n                return ['Rating0Bars', 'Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];\n            case FormatConditionRangeSetPredefinedType.Boxes5:\n                return ['Rating0FilledBoxes', 'Rating1FilledBox', 'Rating2FilledBoxes', 'Rating3FilledBoxes', 'Rating4FilledBoxes'];\n            case FormatConditionRangeSetPredefinedType.TrafficLights3:\n                return ['ShapeRedTrafficLight', 'ShapeYellowTrafficLight', 'ShapeGreenTrafficLight'];\n            case FormatConditionRangeSetPredefinedType.Circles2:\n                return ['ShapeRedCircle', 'ShapeGreenCircle'];\n            case FormatConditionRangeSetPredefinedType.Circles3:\n                return ['ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];\n            case FormatConditionRangeSetPredefinedType.Circles4:\n                return ['RatingFullGrayCircle', 'ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];\n            case FormatConditionRangeSetPredefinedType.CirclesRedToBlack4:\n                return ['RatingFullGrayCircle', 'ShapeLightGrayCircle', 'ShapeLightRedCircle', 'ShapeRedCircle'];\n            case FormatConditionRangeSetPredefinedType.Signs3:\n                return ['ShapeRedDiamond', 'ShapeYellowTriangle', 'ShapeGreenCircle'];\n            case FormatConditionRangeSetPredefinedType.Symbols2:\n                return ['IndicatorRedCross', 'IndicatorGreenCheck'];\n            case FormatConditionRangeSetPredefinedType.Symbols3:\n                return ['IndicatorRedCross', 'IndicatorYellowExclamation', 'IndicatorGreenCheck'];\n            case FormatConditionRangeSetPredefinedType.SymbolsCircled2:\n                return ['IndicatorCircledRedCross', 'IndicatorCircledGreenCheck'];\n            case FormatConditionRangeSetPredefinedType.SymbolsCircled3:\n                return ['IndicatorCircledRedCross', 'IndicatorCircledYellowExclamation', 'IndicatorCircledGreenCheck'];\n            case FormatConditionRangeSetPredefinedType.Flags3:\n                return ['IndicatorRedFlag', 'IndicatorYellowFlag', 'IndicatorGreenFlag'];\n            default:\n                return null;\n        }\n    };\n    FormatConditionConverter.toAppearanceTypes = function (gradientType) {\n        switch (gradientType) {\n            case FormatConditionRangeGradientPredefinedType.GreenWhite:\n                return ['GradientGreen', 'GradientTransparent'];\n            case FormatConditionRangeGradientPredefinedType.WhiteGreen:\n                return ['GradientTransparent', 'GradientGreen'];\n            case FormatConditionRangeGradientPredefinedType.RedWhite:\n                return ['GradientRed', 'GradientTransparent'];\n            case FormatConditionRangeGradientPredefinedType.WhiteRed:\n                return ['GradientTransparent', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.GreenYellow:\n                return ['GradientGreen', 'GradientYellow'];\n            case FormatConditionRangeGradientPredefinedType.YellowGreen:\n                return ['GradientYellow', 'GradientGreen'];\n            case FormatConditionRangeGradientPredefinedType.RedYellow:\n                return ['GradientRed', 'GradientYellow'];\n            case FormatConditionRangeGradientPredefinedType.YellowRed:\n                return ['GradientYellow', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.BlueWhite:\n                return ['GradientBlue', 'GradientTransparent'];\n            case FormatConditionRangeGradientPredefinedType.WhiteBlue:\n                return ['GradientTransparent', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.BlueRed:\n                return ['GradientBlue', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.RedBlue:\n                return ['GradientRed', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.BlueYellow:\n                return ['GradientBlue', 'GradientYellow'];\n            case FormatConditionRangeGradientPredefinedType.YellowBlue:\n                return ['GradientYellow', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.BlueGreen:\n                return ['GradientBlue', 'GradientGreen'];\n            case FormatConditionRangeGradientPredefinedType.GreenBlue:\n                return ['GradientGreen', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.GreenWhiteBlue:\n                return ['GradientGreen', 'GradientTransparent', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.BlueWhiteGreen:\n                return ['GradientBlue', 'GradientTransparent', 'GradientGreen'];\n            case FormatConditionRangeGradientPredefinedType.RedWhiteBlue:\n                return ['GradientRed', 'GradientTransparent', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.BlueWhiteRed:\n                return ['GradientBlue', 'GradientTransparent', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.GreenWhiteRed:\n                return ['GradientGreen', 'GradientTransparent', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.RedWhiteGreen:\n                return ['GradientRed', 'GradientTransparent', 'GradientGreen'];\n            case FormatConditionRangeGradientPredefinedType.GreenYellowRed:\n                return ['GradientGreen', 'GradientYellow', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.RedYellowGreen:\n                return ['GradientRed', 'GradientYellow', 'GradientGreen'];\n            case FormatConditionRangeGradientPredefinedType.BlueYellowRed:\n                return ['GradientBlue', 'GradientYellow', 'GradientRed'];\n            case FormatConditionRangeGradientPredefinedType.RedYellowBlue:\n                return ['GradientRed', 'GradientYellow', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.GreenYellowBlue:\n                return ['GradientGreen', 'GradientYellow', 'GradientBlue'];\n            case FormatConditionRangeGradientPredefinedType.BlueYellowGreen:\n                return ['GradientBlue', 'GradientYellow', 'GradientGreen'];\n            default:\n                return null;\n        }\n    };\n    FormatConditionConverter.toGroupIconTypes = function (iconsGroup) {\n        switch (iconsGroup) {\n            case FormatConditionIconGroups.Directional:\n                return ['DirectionalGreenArrowUp',\n                    'DirectionalYellowUpInclineArrow',\n                    'DirectionalYellowSideArrow',\n                    'DirectionalYellowDownInclineArrow',\n                    'DirectionalRedDownArrow',\n                    'DirectionalGrayArrowUp',\n                    'DirectionalGrayUpInclineArrow',\n                    'DirectionalGraySideArrow',\n                    'DirectionalGrayDownInclineArrow',\n                    'DirectionalGrayDownArrow',\n                    'DirectionalYellowDash',\n                    'DirectionalRedTriangleDown',\n                    'DirectionalGreenTriangleUp'];\n            case FormatConditionIconGroups.RatingsMonochrome:\n                return ['RatingFullGrayCircle',\n                    'Rating1QuarterGrayCircle',\n                    'Rating2QuartersGrayCircle',\n                    'Rating3QuartersGrayCircle',\n                    'RatingEmptyGrayCircle',\n                    'RatingFullGrayStar',\n                    'RatingHalfGrayStar',\n                    'RatingEmptyGrayStar'];\n            case FormatConditionIconGroups.RatingsColor:\n                return ['Rating4Bars',\n                    'Rating3Bars',\n                    'Rating2Bars',\n                    'Rating1Bar',\n                    'Rating0Bars',\n                    'Rating4FilledBoxes',\n                    'Rating3FilledBoxes',\n                    'Rating2FilledBoxes',\n                    'Rating1FilledBox',\n                    'Rating0FilledBoxes'];\n            case FormatConditionIconGroups.Indicators:\n                return ['IndicatorGreenCheck',\n                    'IndicatorYellowExclamation',\n                    'IndicatorRedCross',\n                    'IndicatorCircledGreenCheck',\n                    'IndicatorCircledYellowExclamation',\n                    'IndicatorCircledRedCross',\n                    'ShapeYellowTriangle',\n                    'ShapeRedDiamond'];\n            case FormatConditionIconGroups.Flags:\n                return ['IndicatorGreenFlag',\n                    'IndicatorYellowFlag',\n                    'IndicatorRedFlag'];\n            case FormatConditionIconGroups.Shapes:\n                return ['ShapeGreenTrafficLight',\n                    'ShapeYellowTrafficLight',\n                    'ShapeRedTrafficLight',\n                    'ShapeGreenCircle',\n                    'ShapeYellowCircle',\n                    'ShapeRedCircle',\n                    'ShapeLightRedCircle',\n                    'ShapeLightGrayCircle'];\n            default:\n                throw new Error('Undefined icon group type');\n        }\n    };\n    return FormatConditionConverter;\n}());\nexports.FormatConditionConverter = FormatConditionConverter;\n"]},"metadata":{},"sourceType":"script"}