{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_aggregated-data-source.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataInspectorItemDataMeasureComparer = exports.dataInspectorItemDataDimensionComparer = exports.generateAggregatedSource = void 0;\n\nvar _item_data_tuple_1 = require(\"../../../data/item-data/_item-data-tuple\");\n\nvar _default_1 = require(\"../../../data/localization/_default\");\n\nvar _utils_1 = require(\"../../../data/_utils\");\n\nvar _date_filter_element_1 = require(\"../../../viewer-parts/viewer-items/filter-items/_date-filter-element\");\n\nvar _inspected_data_colum_generator_1 = require(\"./_inspected-data-colum-generator\");\n\nfunction _createDimensionColumnInfo(dimension, axisName) {\n  return {\n    getValue: function (row) {\n      var point = row.getAxisPoint(axisName);\n\n      if (point) {\n        var dimensionValue = point.getDimensionValue(dimension.id);\n\n        if (dimensionValue) {\n          return {\n            displayValue: dimensionValue.getDisplayText(),\n            value: dimensionValue.getUniqueValue()\n          };\n        }\n      }\n\n      return null;\n    },\n    getGridColumn: function () {\n      return {\n        dataField: dimension.id,\n        caption: dimension.name || dimension.dataMember || dimension.id,\n        calculateCellValue: function (row) {\n          return row[dimension.id] && row[dimension.id].value;\n        }\n      };\n    }\n  };\n}\n\nfunction _createMeasureColumnInfo(itemData, measure, isSparklineMeasure) {\n  var sparklineColumnId = '_Sparkline';\n\n  var getSparklineCellText = function (defaultAxisPoint) {\n    var argumentValueSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineArgumentValueSeparator');\n\n    var valuesSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineValuesSeparator');\n\n    return itemData.getAxis('Sparkline').getPoints().map(function (sparklinePoint) {\n      var measureValue = itemData.getSlice(sparklinePoint).getSlice(defaultAxisPoint).getMeasureValue(measure.id);\n\n      if (measureValue) {\n        return sparklinePoint.getDisplayText() + argumentValueSeparator + measureValue.getDisplayText();\n      }\n\n      return '';\n    }).join(valuesSeparator);\n  };\n\n  return {\n    getValue: function (row) {\n      if (isSparklineMeasure && itemData.getAxisNames().indexOf('Sparkline') !== -1) {\n        var cellText = getSparklineCellText(row.getAxisPoint());\n        return {\n          displayValue: cellText,\n          value: cellText\n        };\n      }\n\n      return {\n        displayValue: itemData.getSlice(row).getMeasureValue(measure.id).getDisplayText(),\n        value: itemData.getSlice(row).getMeasureValue(measure.id).getValue()\n      };\n    },\n    getGridColumn: function () {\n      var dataField = !isSparklineMeasure ? measure.id : measure.id + sparklineColumnId;\n      var caption = measure.name || measure.dataMember || measure.id;\n\n      switch (measure.id) {\n        case _date_filter_element_1.dateFilterElement.MinMeasureId:\n          caption += ' ' + _default_1.getLocalizationById('DashboardStringId.StartDate');\n          break;\n\n        case _date_filter_element_1.dateFilterElement.MaxMeasureId:\n          caption += ' ' + _default_1.getLocalizationById('DashboardStringId.EndDate');\n          break;\n      }\n\n      return {\n        dataField: dataField,\n        caption: caption,\n        calculateCellValue: function (row) {\n          return row[dataField] && row[dataField].value;\n        }\n      };\n    }\n  };\n}\n\nfunction _createColumns(itemData, axes, args) {\n  return axes.reduce(function (acc, axis) {\n    var distinctDimensions = _utils_1.distinct(itemData.getDimensions(axis), function (dim1, dim2) {\n      return dataInspectorItemDataDimensionComparer(dim1, dim2, itemData);\n    });\n\n    return acc.concat(distinctDimensions.map(function (dimension) {\n      return _createDimensionColumnInfo(dimension, axis);\n    }));\n  }, []).concat(_utils_1.distinct(_inspected_data_colum_generator_1.getMeasureColumns(itemData), function (m1, m2) {\n    return dataInspectorItemDataMeasureComparer(m1, m2, itemData, args.addSparklineTotal, args.sparklineMeasures);\n  }).reduce(function (acc, measure) {\n    var isSparklineMeasure = args.sparklineMeasures != null && args.sparklineMeasures.indexOf(measure.id) !== -1;\n    acc.push(_createMeasureColumnInfo(itemData, measure, isSparklineMeasure));\n\n    if (isSparklineMeasure && args.addSparklineTotal) {\n      acc.push(_createMeasureColumnInfo(itemData, measure, false));\n    }\n\n    return acc;\n  }, []));\n}\n\nfunction _createRows(itemData, axes) {\n  if (axes.length) {\n    return itemData.getAxis(axes[0]).getAvaliableLeafPoints().reduce(function (acc, primaryAxisPoint) {\n      if (axes.length > 1) {\n        acc = acc.concat(itemData.getAxis(axes[1]).getAvaliableLeafPoints().map(function (secondaryAxisPoint) {\n          return new _item_data_tuple_1.itemDataTuple([primaryAxisPoint, secondaryAxisPoint]);\n        }));\n      } else {\n        acc.push(new _item_data_tuple_1.itemDataTuple([primaryAxisPoint]));\n      }\n\n      return acc;\n    }, []);\n  } else {\n    var defaultAxis = itemData.getAxisNames()[0];\n    var axisPoints = defaultAxis ? [itemData.getAxis(defaultAxis).getRootPoint()] : [];\n    return [new _item_data_tuple_1.itemDataTuple(axisPoints)];\n  }\n}\n\nfunction generateAggregatedSource(itemData, args) {\n  if (itemData && !itemData.isEmpty()) {\n    var axes = _inspected_data_colum_generator_1.getSortedAxes(itemData, true);\n\n    var columnsInfo_1 = _createColumns(itemData, axes, args);\n\n    var rows = _createRows(itemData, axes);\n\n    return {\n      columns: columnsInfo_1.map(function (columnInfo) {\n        return columnInfo.getGridColumn();\n      }),\n      customizeColumns: function () {},\n      data: rows.map(function (row) {\n        return columnsInfo_1.reduce(function (acc, columnInfo) {\n          acc[columnInfo.getGridColumn().dataField] = columnInfo.getValue(row);\n          return acc;\n        }, {});\n      })\n    };\n  }\n\n  return {\n    columns: [],\n    customizeColumns: function () {},\n    data: []\n  };\n}\n\nexports.generateAggregatedSource = generateAggregatedSource;\n\nfunction dataInspectorItemDataDimensionComparer(x, y, data) {\n  return x.name === y.name && x.dataMember === y.dataMember && x.dateTimeGroupInterval === y.dateTimeGroupInterval && x.textGroupInterval === y.textGroupInterval && _utils_1.deepStrictEquals(data.getDimensionFormat(x.id), data.getDimensionFormat(y.id));\n}\n\nexports.dataInspectorItemDataDimensionComparer = dataInspectorItemDataDimensionComparer;\n\nfunction dataInspectorItemDataMeasureComparer(x, y, data, addSparklineTotal, sparklineMeasures) {\n  return x.name === y.name && x.dataMember == y.dataMember && (addSparklineTotal || !sparklineMeasures || sparklineMeasures.indexOf(x.id) !== -1 === (sparklineMeasures.indexOf(y.id) !== -1)) && (_utils_1.type.isDefined(data.getMeasureExpression(x.id)) || _utils_1.type.isDefined(data.getMeasureExpression(y.id)) ? data.getMeasureExpression(x.id) === data.getMeasureExpression(y.id) : x.summaryType === y.summaryType) && _utils_1.deepStrictEquals(data.getMeasureCalculation(x.id), data.getMeasureCalculation(y.id)) && _utils_1.deepStrictEquals(data.getMeasureWindowDefinition(x.id), data.getMeasureWindowDefinition(y.id)) && _utils_1.deepStrictEquals(data.getMeasureFormat(x.id), data.getMeasureFormat(y.id));\n}\n\nexports.dataInspectorItemDataMeasureComparer = dataInspectorItemDataMeasureComparer;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/common/extensions/data-inspector-extension/_aggregated-data-source.js"],"names":["Object","defineProperty","exports","value","dataInspectorItemDataMeasureComparer","dataInspectorItemDataDimensionComparer","generateAggregatedSource","_item_data_tuple_1","require","_default_1","_utils_1","_date_filter_element_1","_inspected_data_colum_generator_1","_createDimensionColumnInfo","dimension","axisName","getValue","row","point","getAxisPoint","dimensionValue","getDimensionValue","id","displayValue","getDisplayText","getUniqueValue","getGridColumn","dataField","caption","name","dataMember","calculateCellValue","_createMeasureColumnInfo","itemData","measure","isSparklineMeasure","sparklineColumnId","getSparklineCellText","defaultAxisPoint","argumentValueSeparator","getLocalizationById","valuesSeparator","getAxis","getPoints","map","sparklinePoint","measureValue","getSlice","getMeasureValue","join","getAxisNames","indexOf","cellText","dateFilterElement","MinMeasureId","MaxMeasureId","_createColumns","axes","args","reduce","acc","axis","distinctDimensions","distinct","getDimensions","dim1","dim2","concat","getMeasureColumns","m1","m2","addSparklineTotal","sparklineMeasures","push","_createRows","length","getAvaliableLeafPoints","primaryAxisPoint","secondaryAxisPoint","itemDataTuple","defaultAxis","axisPoints","getRootPoint","isEmpty","getSortedAxes","columnsInfo_1","rows","columns","columnInfo","customizeColumns","data","x","y","dateTimeGroupInterval","textGroupInterval","deepStrictEquals","getDimensionFormat","type","isDefined","getMeasureExpression","summaryType","getMeasureCalculation","getMeasureWindowDefinition","getMeasureFormat"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_aggregated-data-source.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dataInspectorItemDataMeasureComparer = exports.dataInspectorItemDataDimensionComparer = exports.generateAggregatedSource = void 0;\nvar _item_data_tuple_1 = require(\"../../../data/item-data/_item-data-tuple\");\nvar _default_1 = require(\"../../../data/localization/_default\");\nvar _utils_1 = require(\"../../../data/_utils\");\nvar _date_filter_element_1 = require(\"../../../viewer-parts/viewer-items/filter-items/_date-filter-element\");\nvar _inspected_data_colum_generator_1 = require(\"./_inspected-data-colum-generator\");\nfunction _createDimensionColumnInfo(dimension, axisName) {\n    return {\n        getValue: function (row) {\n            var point = row.getAxisPoint(axisName);\n            if (point) {\n                var dimensionValue = point.getDimensionValue(dimension.id);\n                if (dimensionValue) {\n                    return {\n                        displayValue: dimensionValue.getDisplayText(),\n                        value: dimensionValue.getUniqueValue()\n                    };\n                }\n            }\n            return null;\n        },\n        getGridColumn: function () {\n            return {\n                dataField: dimension.id,\n                caption: dimension.name || dimension.dataMember || dimension.id,\n                calculateCellValue: function (row) { return row[dimension.id] && row[dimension.id].value; }\n            };\n        }\n    };\n}\nfunction _createMeasureColumnInfo(itemData, measure, isSparklineMeasure) {\n    var sparklineColumnId = '_Sparkline';\n    var getSparklineCellText = function (defaultAxisPoint) {\n        var argumentValueSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineArgumentValueSeparator');\n        var valuesSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineValuesSeparator');\n        return itemData\n            .getAxis('Sparkline')\n            .getPoints()\n            .map(function (sparklinePoint) {\n            var measureValue = itemData.getSlice(sparklinePoint).getSlice(defaultAxisPoint).getMeasureValue(measure.id);\n            if (measureValue) {\n                return sparklinePoint.getDisplayText() + argumentValueSeparator + measureValue.getDisplayText();\n            }\n            return '';\n        })\n            .join(valuesSeparator);\n    };\n    return {\n        getValue: function (row) {\n            if (isSparklineMeasure && itemData.getAxisNames().indexOf('Sparkline') !== -1) {\n                var cellText = getSparklineCellText(row.getAxisPoint());\n                return { displayValue: cellText, value: cellText };\n            }\n            return {\n                displayValue: itemData.getSlice(row).getMeasureValue(measure.id).getDisplayText(),\n                value: itemData.getSlice(row).getMeasureValue(measure.id).getValue()\n            };\n        },\n        getGridColumn: function () {\n            var dataField = !isSparklineMeasure ? measure.id : measure.id + sparklineColumnId;\n            var caption = measure.name || measure.dataMember || measure.id;\n            switch (measure.id) {\n                case _date_filter_element_1.dateFilterElement.MinMeasureId:\n                    caption += ' ' + _default_1.getLocalizationById('DashboardStringId.StartDate');\n                    break;\n                case _date_filter_element_1.dateFilterElement.MaxMeasureId:\n                    caption += ' ' + _default_1.getLocalizationById('DashboardStringId.EndDate');\n                    break;\n            }\n            return {\n                dataField: dataField,\n                caption: caption,\n                calculateCellValue: function (row) { return row[dataField] && row[dataField].value; }\n            };\n        }\n    };\n}\nfunction _createColumns(itemData, axes, args) {\n    return axes\n        .reduce(function (acc, axis) {\n        var distinctDimensions = _utils_1.distinct(itemData.getDimensions(axis), function (dim1, dim2) { return dataInspectorItemDataDimensionComparer(dim1, dim2, itemData); });\n        return acc.concat(distinctDimensions.map(function (dimension) { return _createDimensionColumnInfo(dimension, axis); }));\n    }, [])\n        .concat(_utils_1.distinct(_inspected_data_colum_generator_1.getMeasureColumns(itemData), function (m1, m2) { return dataInspectorItemDataMeasureComparer(m1, m2, itemData, args.addSparklineTotal, args.sparklineMeasures); })\n        .reduce(function (acc, measure) {\n        var isSparklineMeasure = args.sparklineMeasures != null && args.sparklineMeasures.indexOf(measure.id) !== -1;\n        acc.push(_createMeasureColumnInfo(itemData, measure, isSparklineMeasure));\n        if (isSparklineMeasure && args.addSparklineTotal) {\n            acc.push(_createMeasureColumnInfo(itemData, measure, false));\n        }\n        return acc;\n    }, []));\n}\nfunction _createRows(itemData, axes) {\n    if (axes.length) {\n        return itemData\n            .getAxis(axes[0])\n            .getAvaliableLeafPoints()\n            .reduce(function (acc, primaryAxisPoint) {\n            if (axes.length > 1) {\n                acc = acc.concat(itemData\n                    .getAxis(axes[1])\n                    .getAvaliableLeafPoints()\n                    .map(function (secondaryAxisPoint) { return new _item_data_tuple_1.itemDataTuple([primaryAxisPoint, secondaryAxisPoint]); }));\n            }\n            else {\n                acc.push(new _item_data_tuple_1.itemDataTuple([primaryAxisPoint]));\n            }\n            return acc;\n        }, []);\n    }\n    else {\n        var defaultAxis = itemData.getAxisNames()[0];\n        var axisPoints = defaultAxis ? [itemData.getAxis(defaultAxis).getRootPoint()] : [];\n        return [new _item_data_tuple_1.itemDataTuple(axisPoints)];\n    }\n}\nfunction generateAggregatedSource(itemData, args) {\n    if (itemData && !itemData.isEmpty()) {\n        var axes = _inspected_data_colum_generator_1.getSortedAxes(itemData, true);\n        var columnsInfo_1 = _createColumns(itemData, axes, args);\n        var rows = _createRows(itemData, axes);\n        return {\n            columns: columnsInfo_1.map(function (columnInfo) { return columnInfo.getGridColumn(); }),\n            customizeColumns: function () { },\n            data: rows.map(function (row) {\n                return columnsInfo_1.reduce(function (acc, columnInfo) {\n                    acc[columnInfo.getGridColumn().dataField] = columnInfo.getValue(row);\n                    return acc;\n                }, {});\n            })\n        };\n    }\n    return {\n        columns: [],\n        customizeColumns: function () { },\n        data: []\n    };\n}\nexports.generateAggregatedSource = generateAggregatedSource;\nfunction dataInspectorItemDataDimensionComparer(x, y, data) {\n    return x.name === y.name\n        && x.dataMember === y.dataMember\n        && x.dateTimeGroupInterval === y.dateTimeGroupInterval\n        && x.textGroupInterval === y.textGroupInterval\n        && _utils_1.deepStrictEquals(data.getDimensionFormat(x.id), data.getDimensionFormat(y.id));\n}\nexports.dataInspectorItemDataDimensionComparer = dataInspectorItemDataDimensionComparer;\nfunction dataInspectorItemDataMeasureComparer(x, y, data, addSparklineTotal, sparklineMeasures) {\n    return x.name === y.name\n        && x.dataMember == y.dataMember\n        && (addSparklineTotal ||\n            !sparklineMeasures || ((sparklineMeasures.indexOf(x.id) !== -1) === (sparklineMeasures.indexOf(y.id) !== -1)))\n        && ((_utils_1.type.isDefined(data.getMeasureExpression(x.id)) || _utils_1.type.isDefined(data.getMeasureExpression(y.id))) ?\n            (data.getMeasureExpression(x.id) === data.getMeasureExpression(y.id)) : (x.summaryType === y.summaryType))\n        && _utils_1.deepStrictEquals(data.getMeasureCalculation(x.id), data.getMeasureCalculation(y.id))\n        && _utils_1.deepStrictEquals(data.getMeasureWindowDefinition(x.id), data.getMeasureWindowDefinition(y.id))\n        && _utils_1.deepStrictEquals(data.getMeasureFormat(x.id), data.getMeasureFormat(y.id));\n}\nexports.dataInspectorItemDataMeasureComparer = dataInspectorItemDataMeasureComparer;\n"]},"metadata":{},"sourceType":"script"}