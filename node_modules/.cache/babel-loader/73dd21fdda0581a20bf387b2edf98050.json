{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.file_uploader.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getInnerHeight, setHeight, setWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport Guid from \"../../core/guid\";\nimport Widget from \"../widget/ui.widget\";\nimport FileUploader from \"../file_uploader\";\nimport { whenSome } from \"./ui.file_manager.common\";\nvar FILE_MANAGER_FILE_UPLOADER_CLASS = \"dx-filemanager-fileuploader\";\nvar FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS = \"dx-filemanager-fileuploader-dropzone-placeholder\";\n\nclass FileManagerFileUploader extends Widget {\n  _initMarkup() {\n    this._initActions();\n\n    this.$element().addClass(FILE_MANAGER_FILE_UPLOADER_CLASS);\n    this._uploaderInfos = [];\n\n    this._createInternalFileUploader();\n\n    this._createDropZonePlaceholder();\n\n    this._setDropZonePlaceholderVisible(false);\n\n    super._initMarkup();\n  }\n\n  _createInternalFileUploader() {\n    var chunkSize = this._getController().chunkSize;\n\n    var $fileUploader = $(\"<div>\").appendTo(this.$element());\n\n    var fileUploader = this._createComponent($fileUploader, FileUploader, {\n      name: \"file\",\n      multiple: true,\n      showFileList: false,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      labelText: \"\",\n      readyToUploadMessage: \"\",\n      accept: \"*\",\n      chunkSize: chunkSize,\n      dropZone: this.option(\"dropZone\"),\n      onValueChanged: e => this._onFileUploaderValueChanged(e),\n      onProgress: e => this._onFileUploaderProgress(e),\n      onUploaded: e => this._onFileUploaderUploaded(e),\n      onUploadAborted: e => this._onFileUploaderUploadAborted(e),\n      onUploadError: e => this._onFileUploaderUploadError(e),\n      onDropZoneEnter: () => this._setDropZonePlaceholderVisible(true),\n      onDropZoneLeave: () => this._setDropZonePlaceholderVisible(false)\n    });\n\n    fileUploader.option({\n      uploadChunk: (file, chunksData) => this._fileUploaderUploadChunk(fileUploader, file, chunksData),\n      abortUpload: (file, chunksData) => this._fileUploaderAbortUpload(fileUploader, file, chunksData)\n    });\n    fileUploader._shouldRaiseDragLeaveBase = fileUploader._shouldRaiseDragLeave;\n\n    fileUploader._shouldRaiseDragLeave = e => this._shouldRaiseDragLeave(e, fileUploader);\n\n    var uploaderInfo = {\n      fileUploader: fileUploader\n    };\n\n    this._uploaderInfos.push(uploaderInfo);\n  }\n\n  tryUpload() {\n    var info = this._findAndUpdateAvailableUploaderInfo();\n\n    if (info) {\n      info.fileUploader._selectButtonClickHandler();\n    }\n  }\n\n  cancelUpload(sessionId) {\n    this._cancelUpload(sessionId);\n  }\n\n  cancelFileUpload(sessionId, fileIndex) {\n    this._cancelUpload(sessionId, fileIndex);\n  }\n\n  _cancelUpload(sessionId, fileIndex) {\n    var {\n      fileUploader: fileUploader\n    } = this._findUploaderInfoBySessionId(sessionId);\n\n    fileUploader.abortUpload(fileIndex);\n  }\n\n  _fileUploaderUploadChunk(fileUploader, file, chunksInfo) {\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(fileUploader, file);\n\n    var controller = session.controller;\n    chunksInfo.fileIndex = fileIndex;\n    return controller.uploadFileChunk(file, chunksInfo);\n  }\n\n  _fileUploaderAbortUpload(fileUploader, file, chunksInfo) {\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(fileUploader, file);\n\n    var controller = session.controller;\n    chunksInfo.fileIndex = fileIndex;\n    return controller.abortFileUpload(file, chunksInfo);\n  }\n\n  _onFileUploaderValueChanged(_ref) {\n    var {\n      component: component,\n      value: value\n    } = _ref;\n\n    if (0 === value.length) {\n      return;\n    }\n\n    var files = value.slice();\n\n    var uploaderInfo = this._findUploaderInfo(component);\n\n    this._uploadFiles(uploaderInfo, files);\n\n    setTimeout(() => {\n      if (!this._findAndUpdateAvailableUploaderInfo()) {\n        this._createInternalFileUploader();\n      }\n    });\n  }\n\n  _onFileUploaderProgress(_ref2) {\n    var {\n      component: component,\n      file: file,\n      bytesLoaded: bytesLoaded,\n      bytesTotal: bytesTotal\n    } = _ref2;\n\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(component, file);\n\n    var fileValue = 0 !== bytesTotal ? bytesLoaded / bytesTotal : 1;\n    var commonValue = component.option(\"progress\") / 100;\n    var args = {\n      sessionId: session.id,\n      fileIndex: fileIndex,\n      commonValue: commonValue,\n      fileValue: fileValue\n    };\n\n    this._raiseUploadProgress(args);\n  }\n\n  _onFileUploaderUploaded(_ref3) {\n    var {\n      component: component,\n      file: file\n    } = _ref3;\n\n    var deferred = this._getDeferredForFile(component, file);\n\n    deferred.resolve();\n  }\n\n  _onFileUploaderUploadAborted(_ref4) {\n    var {\n      component: component,\n      file: file\n    } = _ref4;\n\n    var deferred = this._getDeferredForFile(component, file);\n\n    deferred.resolve({\n      canceled: true\n    });\n  }\n\n  _onFileUploaderUploadError(_ref5) {\n    var {\n      component: component,\n      file: file,\n      error: error\n    } = _ref5;\n\n    var deferred = this._getDeferredForFile(component, file);\n\n    deferred.reject(error);\n  }\n\n  _createDropZonePlaceholder() {\n    this._$dropZonePlaceholder = $(\"<div>\").addClass(FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS).appendTo(this.option(\"dropZonePlaceholderContainer\"));\n  }\n\n  _adjustDropZonePlaceholder() {\n    var $dropZoneTarget = this.option(\"dropZone\");\n\n    if (!hasWindow() || 0 === $dropZoneTarget.length) {\n      return;\n    }\n\n    var placeholderBorderTopWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderTopWidth\"));\n    var placeholderBorderLeftWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderLeftWidth\"));\n    var $placeholderContainer = this.option(\"dropZonePlaceholderContainer\");\n    var containerBorderBottomWidth = parseFloat($placeholderContainer.css(\"borderBottomWidth\"));\n    var containerBorderLeftWidth = parseFloat($placeholderContainer.css(\"borderLeftWidth\"));\n    var containerHeight = getInnerHeight($placeholderContainer);\n    var containerOffset = $placeholderContainer.offset();\n    var dropZoneOffset = $dropZoneTarget.offset();\n\n    this._$dropZonePlaceholder.css({\n      top: dropZoneOffset.top - containerOffset.top - containerHeight - containerBorderBottomWidth,\n      left: dropZoneOffset.left - containerOffset.left - containerBorderLeftWidth\n    });\n\n    setHeight(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetHeight - 2 * placeholderBorderTopWidth);\n    setWidth(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetWidth - 2 * placeholderBorderLeftWidth);\n  }\n\n  _setDropZonePlaceholderVisible(visible) {\n    if (visible) {\n      this._adjustDropZonePlaceholder();\n\n      this._$dropZonePlaceholder.css(\"display\", \"\");\n    } else {\n      this._$dropZonePlaceholder.css(\"display\", \"none\");\n    }\n  }\n\n  _shouldRaiseDragLeave(e, uploaderInstance) {\n    return uploaderInstance.isMouseOverElement(e, this.option(\"splitterElement\")) || uploaderInstance._shouldRaiseDragLeaveBase(e, true);\n  }\n\n  _uploadFiles(uploaderInfo, files) {\n    this._setDropZonePlaceholderVisible(false);\n\n    var sessionId = new Guid().toString();\n\n    var controller = this._getController();\n\n    var deferreds = files.map(() => new Deferred());\n    var session = {\n      id: sessionId,\n      controller: controller,\n      files: files,\n      deferreds: deferreds\n    };\n    uploaderInfo.session = session;\n    var sessionInfo = {\n      sessionId: sessionId,\n      deferreds: deferreds,\n      files: files\n    };\n\n    this._raiseUploadSessionStarted(sessionInfo);\n\n    return whenSome(deferreds).always(() => setTimeout(() => {\n      uploaderInfo.fileUploader.reset();\n      uploaderInfo.session = null;\n    }));\n  }\n\n  _getDeferredForFile(fileUploader, file) {\n    var {\n      session: session,\n      fileIndex: fileIndex\n    } = this._findSessionByFile(fileUploader, file);\n\n    return session.deferreds[fileIndex];\n  }\n\n  _findSessionByFile(fileUploader, file) {\n    var uploaderInfo = this._findUploaderInfo(fileUploader);\n\n    var session = uploaderInfo.session;\n    var fileIndex = session.files.indexOf(file);\n    return {\n      session: session,\n      fileIndex: fileIndex\n    };\n  }\n\n  _findUploaderInfoBySessionId(sessionId) {\n    for (var i = 0; i < this._uploaderInfos.length; i++) {\n      var uploaderInfo = this._uploaderInfos[i];\n      var session = uploaderInfo.session;\n\n      if (session && session.id === sessionId) {\n        return uploaderInfo;\n      }\n    }\n\n    return null;\n  }\n\n  _findAndUpdateAvailableUploaderInfo() {\n    var _info;\n\n    var info = null;\n\n    for (var i = 0; i < this._uploaderInfos.length; i++) {\n      var currentInfo = this._uploaderInfos[i];\n      currentInfo.fileUploader.option(\"dropZone\", \"\");\n\n      if (!info && !currentInfo.session) {\n        info = currentInfo;\n      }\n    }\n\n    null === (_info = info) || void 0 === _info ? void 0 : _info.fileUploader.option(\"dropZone\", this.option(\"dropZone\"));\n    return info;\n  }\n\n  _findUploaderInfo(fileUploader) {\n    for (var i = 0; i < this._uploaderInfos.length; i++) {\n      var info = this._uploaderInfos[i];\n\n      if (info.fileUploader === fileUploader) {\n        return info;\n      }\n    }\n\n    return null;\n  }\n\n  _getController() {\n    var controllerGetter = this.option(\"getController\");\n    return controllerGetter();\n  }\n\n  _raiseUploadSessionStarted(sessionInfo) {\n    this._actions.onUploadSessionStarted({\n      sessionInfo: sessionInfo\n    });\n  }\n\n  _raiseUploadProgress(args) {\n    this._actions.onUploadProgress(args);\n  }\n\n  _initActions() {\n    this._actions = {\n      onUploadSessionStarted: this._createActionByOption(\"onUploadSessionStarted\"),\n      onUploadProgress: this._createActionByOption(\"onUploadProgress\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      getController: null,\n      onUploadSessionStarted: null,\n      onUploadProgress: null,\n      splitterElement: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"getController\":\n        this.repaint();\n        break;\n\n      case \"onUploadSessionStarted\":\n      case \"onUploadProgress\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      case \"dropZone\":\n        this._findAndUpdateAvailableUploaderInfo();\n\n        this._adjustDropZonePlaceholder();\n\n        break;\n\n      case \"dropZonePlaceholderContainer\":\n        this._$dropZonePlaceholder.detach();\n\n        this._$dropZonePlaceholder.appendTo(args.value);\n\n        break;\n\n      case \"splitterElement\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default FileManagerFileUploader;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.file_uploader.js"],"names":["getInnerHeight","setHeight","setWidth","$","extend","Deferred","hasWindow","Guid","Widget","FileUploader","whenSome","FILE_MANAGER_FILE_UPLOADER_CLASS","FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS","FileManagerFileUploader","_initMarkup","_initActions","$element","addClass","_uploaderInfos","_createInternalFileUploader","_createDropZonePlaceholder","_setDropZonePlaceholderVisible","chunkSize","_getController","$fileUploader","appendTo","fileUploader","_createComponent","name","multiple","showFileList","activeStateEnabled","focusStateEnabled","hoverStateEnabled","labelText","readyToUploadMessage","accept","dropZone","option","onValueChanged","e","_onFileUploaderValueChanged","onProgress","_onFileUploaderProgress","onUploaded","_onFileUploaderUploaded","onUploadAborted","_onFileUploaderUploadAborted","onUploadError","_onFileUploaderUploadError","onDropZoneEnter","onDropZoneLeave","uploadChunk","file","chunksData","_fileUploaderUploadChunk","abortUpload","_fileUploaderAbortUpload","_shouldRaiseDragLeaveBase","_shouldRaiseDragLeave","uploaderInfo","push","tryUpload","info","_findAndUpdateAvailableUploaderInfo","_selectButtonClickHandler","cancelUpload","sessionId","_cancelUpload","cancelFileUpload","fileIndex","_findUploaderInfoBySessionId","chunksInfo","session","_findSessionByFile","controller","uploadFileChunk","abortFileUpload","_ref","component","value","length","files","slice","_findUploaderInfo","_uploadFiles","setTimeout","_ref2","bytesLoaded","bytesTotal","fileValue","commonValue","args","id","_raiseUploadProgress","_ref3","deferred","_getDeferredForFile","resolve","_ref4","canceled","_ref5","error","reject","_$dropZonePlaceholder","_adjustDropZonePlaceholder","$dropZoneTarget","placeholderBorderTopWidth","parseFloat","css","placeholderBorderLeftWidth","$placeholderContainer","containerBorderBottomWidth","containerBorderLeftWidth","containerHeight","containerOffset","offset","dropZoneOffset","top","left","get","offsetHeight","offsetWidth","visible","uploaderInstance","isMouseOverElement","toString","deferreds","map","sessionInfo","_raiseUploadSessionStarted","always","reset","indexOf","i","_info","currentInfo","controllerGetter","_actions","onUploadSessionStarted","onUploadProgress","_createActionByOption","_getDefaultOptions","getController","splitterElement","_optionChanged","repaint","detach"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.file_uploader.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getInnerHeight,\r\n    setHeight,\r\n    setWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport Guid from \"../../core/guid\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport FileUploader from \"../file_uploader\";\r\nimport {\r\n    whenSome\r\n} from \"./ui.file_manager.common\";\r\nvar FILE_MANAGER_FILE_UPLOADER_CLASS = \"dx-filemanager-fileuploader\";\r\nvar FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS = \"dx-filemanager-fileuploader-dropzone-placeholder\";\r\nclass FileManagerFileUploader extends Widget {\r\n    _initMarkup() {\r\n        this._initActions();\r\n        this.$element().addClass(FILE_MANAGER_FILE_UPLOADER_CLASS);\r\n        this._uploaderInfos = [];\r\n        this._createInternalFileUploader();\r\n        this._createDropZonePlaceholder();\r\n        this._setDropZonePlaceholderVisible(false);\r\n        super._initMarkup()\r\n    }\r\n    _createInternalFileUploader() {\r\n        var chunkSize = this._getController().chunkSize;\r\n        var $fileUploader = $(\"<div>\").appendTo(this.$element());\r\n        var fileUploader = this._createComponent($fileUploader, FileUploader, {\r\n            name: \"file\",\r\n            multiple: true,\r\n            showFileList: false,\r\n            activeStateEnabled: false,\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            labelText: \"\",\r\n            readyToUploadMessage: \"\",\r\n            accept: \"*\",\r\n            chunkSize: chunkSize,\r\n            dropZone: this.option(\"dropZone\"),\r\n            onValueChanged: e => this._onFileUploaderValueChanged(e),\r\n            onProgress: e => this._onFileUploaderProgress(e),\r\n            onUploaded: e => this._onFileUploaderUploaded(e),\r\n            onUploadAborted: e => this._onFileUploaderUploadAborted(e),\r\n            onUploadError: e => this._onFileUploaderUploadError(e),\r\n            onDropZoneEnter: () => this._setDropZonePlaceholderVisible(true),\r\n            onDropZoneLeave: () => this._setDropZonePlaceholderVisible(false)\r\n        });\r\n        fileUploader.option({\r\n            uploadChunk: (file, chunksData) => this._fileUploaderUploadChunk(fileUploader, file, chunksData),\r\n            abortUpload: (file, chunksData) => this._fileUploaderAbortUpload(fileUploader, file, chunksData)\r\n        });\r\n        fileUploader._shouldRaiseDragLeaveBase = fileUploader._shouldRaiseDragLeave;\r\n        fileUploader._shouldRaiseDragLeave = e => this._shouldRaiseDragLeave(e, fileUploader);\r\n        var uploaderInfo = {\r\n            fileUploader: fileUploader\r\n        };\r\n        this._uploaderInfos.push(uploaderInfo)\r\n    }\r\n    tryUpload() {\r\n        var info = this._findAndUpdateAvailableUploaderInfo();\r\n        if (info) {\r\n            info.fileUploader._selectButtonClickHandler()\r\n        }\r\n    }\r\n    cancelUpload(sessionId) {\r\n        this._cancelUpload(sessionId)\r\n    }\r\n    cancelFileUpload(sessionId, fileIndex) {\r\n        this._cancelUpload(sessionId, fileIndex)\r\n    }\r\n    _cancelUpload(sessionId, fileIndex) {\r\n        var {\r\n            fileUploader: fileUploader\r\n        } = this._findUploaderInfoBySessionId(sessionId);\r\n        fileUploader.abortUpload(fileIndex)\r\n    }\r\n    _fileUploaderUploadChunk(fileUploader, file, chunksInfo) {\r\n        var {\r\n            session: session,\r\n            fileIndex: fileIndex\r\n        } = this._findSessionByFile(fileUploader, file);\r\n        var controller = session.controller;\r\n        chunksInfo.fileIndex = fileIndex;\r\n        return controller.uploadFileChunk(file, chunksInfo)\r\n    }\r\n    _fileUploaderAbortUpload(fileUploader, file, chunksInfo) {\r\n        var {\r\n            session: session,\r\n            fileIndex: fileIndex\r\n        } = this._findSessionByFile(fileUploader, file);\r\n        var controller = session.controller;\r\n        chunksInfo.fileIndex = fileIndex;\r\n        return controller.abortFileUpload(file, chunksInfo)\r\n    }\r\n    _onFileUploaderValueChanged(_ref) {\r\n        var {\r\n            component: component,\r\n            value: value\r\n        } = _ref;\r\n        if (0 === value.length) {\r\n            return\r\n        }\r\n        var files = value.slice();\r\n        var uploaderInfo = this._findUploaderInfo(component);\r\n        this._uploadFiles(uploaderInfo, files);\r\n        setTimeout(() => {\r\n            if (!this._findAndUpdateAvailableUploaderInfo()) {\r\n                this._createInternalFileUploader()\r\n            }\r\n        })\r\n    }\r\n    _onFileUploaderProgress(_ref2) {\r\n        var {\r\n            component: component,\r\n            file: file,\r\n            bytesLoaded: bytesLoaded,\r\n            bytesTotal: bytesTotal\r\n        } = _ref2;\r\n        var {\r\n            session: session,\r\n            fileIndex: fileIndex\r\n        } = this._findSessionByFile(component, file);\r\n        var fileValue = 0 !== bytesTotal ? bytesLoaded / bytesTotal : 1;\r\n        var commonValue = component.option(\"progress\") / 100;\r\n        var args = {\r\n            sessionId: session.id,\r\n            fileIndex: fileIndex,\r\n            commonValue: commonValue,\r\n            fileValue: fileValue\r\n        };\r\n        this._raiseUploadProgress(args)\r\n    }\r\n    _onFileUploaderUploaded(_ref3) {\r\n        var {\r\n            component: component,\r\n            file: file\r\n        } = _ref3;\r\n        var deferred = this._getDeferredForFile(component, file);\r\n        deferred.resolve()\r\n    }\r\n    _onFileUploaderUploadAborted(_ref4) {\r\n        var {\r\n            component: component,\r\n            file: file\r\n        } = _ref4;\r\n        var deferred = this._getDeferredForFile(component, file);\r\n        deferred.resolve({\r\n            canceled: true\r\n        })\r\n    }\r\n    _onFileUploaderUploadError(_ref5) {\r\n        var {\r\n            component: component,\r\n            file: file,\r\n            error: error\r\n        } = _ref5;\r\n        var deferred = this._getDeferredForFile(component, file);\r\n        deferred.reject(error)\r\n    }\r\n    _createDropZonePlaceholder() {\r\n        this._$dropZonePlaceholder = $(\"<div>\").addClass(FILE_MANAGER_FILE_UPLOADER_DROPZONE_PLACEHOLER_CLASS).appendTo(this.option(\"dropZonePlaceholderContainer\"))\r\n    }\r\n    _adjustDropZonePlaceholder() {\r\n        var $dropZoneTarget = this.option(\"dropZone\");\r\n        if (!hasWindow() || 0 === $dropZoneTarget.length) {\r\n            return\r\n        }\r\n        var placeholderBorderTopWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderTopWidth\"));\r\n        var placeholderBorderLeftWidth = parseFloat(this._$dropZonePlaceholder.css(\"borderLeftWidth\"));\r\n        var $placeholderContainer = this.option(\"dropZonePlaceholderContainer\");\r\n        var containerBorderBottomWidth = parseFloat($placeholderContainer.css(\"borderBottomWidth\"));\r\n        var containerBorderLeftWidth = parseFloat($placeholderContainer.css(\"borderLeftWidth\"));\r\n        var containerHeight = getInnerHeight($placeholderContainer);\r\n        var containerOffset = $placeholderContainer.offset();\r\n        var dropZoneOffset = $dropZoneTarget.offset();\r\n        this._$dropZonePlaceholder.css({\r\n            top: dropZoneOffset.top - containerOffset.top - containerHeight - containerBorderBottomWidth,\r\n            left: dropZoneOffset.left - containerOffset.left - containerBorderLeftWidth\r\n        });\r\n        setHeight(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetHeight - 2 * placeholderBorderTopWidth);\r\n        setWidth(this._$dropZonePlaceholder, $dropZoneTarget.get(0).offsetWidth - 2 * placeholderBorderLeftWidth)\r\n    }\r\n    _setDropZonePlaceholderVisible(visible) {\r\n        if (visible) {\r\n            this._adjustDropZonePlaceholder();\r\n            this._$dropZonePlaceholder.css(\"display\", \"\")\r\n        } else {\r\n            this._$dropZonePlaceholder.css(\"display\", \"none\")\r\n        }\r\n    }\r\n    _shouldRaiseDragLeave(e, uploaderInstance) {\r\n        return uploaderInstance.isMouseOverElement(e, this.option(\"splitterElement\")) || uploaderInstance._shouldRaiseDragLeaveBase(e, true)\r\n    }\r\n    _uploadFiles(uploaderInfo, files) {\r\n        this._setDropZonePlaceholderVisible(false);\r\n        var sessionId = (new Guid).toString();\r\n        var controller = this._getController();\r\n        var deferreds = files.map(() => new Deferred);\r\n        var session = {\r\n            id: sessionId,\r\n            controller: controller,\r\n            files: files,\r\n            deferreds: deferreds\r\n        };\r\n        uploaderInfo.session = session;\r\n        var sessionInfo = {\r\n            sessionId: sessionId,\r\n            deferreds: deferreds,\r\n            files: files\r\n        };\r\n        this._raiseUploadSessionStarted(sessionInfo);\r\n        return whenSome(deferreds).always(() => setTimeout(() => {\r\n            uploaderInfo.fileUploader.reset();\r\n            uploaderInfo.session = null\r\n        }))\r\n    }\r\n    _getDeferredForFile(fileUploader, file) {\r\n        var {\r\n            session: session,\r\n            fileIndex: fileIndex\r\n        } = this._findSessionByFile(fileUploader, file);\r\n        return session.deferreds[fileIndex]\r\n    }\r\n    _findSessionByFile(fileUploader, file) {\r\n        var uploaderInfo = this._findUploaderInfo(fileUploader);\r\n        var session = uploaderInfo.session;\r\n        var fileIndex = session.files.indexOf(file);\r\n        return {\r\n            session: session,\r\n            fileIndex: fileIndex\r\n        }\r\n    }\r\n    _findUploaderInfoBySessionId(sessionId) {\r\n        for (var i = 0; i < this._uploaderInfos.length; i++) {\r\n            var uploaderInfo = this._uploaderInfos[i];\r\n            var session = uploaderInfo.session;\r\n            if (session && session.id === sessionId) {\r\n                return uploaderInfo\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _findAndUpdateAvailableUploaderInfo() {\r\n        var _info;\r\n        var info = null;\r\n        for (var i = 0; i < this._uploaderInfos.length; i++) {\r\n            var currentInfo = this._uploaderInfos[i];\r\n            currentInfo.fileUploader.option(\"dropZone\", \"\");\r\n            if (!info && !currentInfo.session) {\r\n                info = currentInfo\r\n            }\r\n        }\r\n        null === (_info = info) || void 0 === _info ? void 0 : _info.fileUploader.option(\"dropZone\", this.option(\"dropZone\"));\r\n        return info\r\n    }\r\n    _findUploaderInfo(fileUploader) {\r\n        for (var i = 0; i < this._uploaderInfos.length; i++) {\r\n            var info = this._uploaderInfos[i];\r\n            if (info.fileUploader === fileUploader) {\r\n                return info\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getController() {\r\n        var controllerGetter = this.option(\"getController\");\r\n        return controllerGetter()\r\n    }\r\n    _raiseUploadSessionStarted(sessionInfo) {\r\n        this._actions.onUploadSessionStarted({\r\n            sessionInfo: sessionInfo\r\n        })\r\n    }\r\n    _raiseUploadProgress(args) {\r\n        this._actions.onUploadProgress(args)\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onUploadSessionStarted: this._createActionByOption(\"onUploadSessionStarted\"),\r\n            onUploadProgress: this._createActionByOption(\"onUploadProgress\")\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            getController: null,\r\n            onUploadSessionStarted: null,\r\n            onUploadProgress: null,\r\n            splitterElement: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"getController\":\r\n                this.repaint();\r\n                break;\r\n            case \"onUploadSessionStarted\":\r\n            case \"onUploadProgress\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            case \"dropZone\":\r\n                this._findAndUpdateAvailableUploaderInfo();\r\n                this._adjustDropZonePlaceholder();\r\n                break;\r\n            case \"dropZonePlaceholderContainer\":\r\n                this._$dropZonePlaceholder.detach();\r\n                this._$dropZonePlaceholder.appendTo(args.value);\r\n                break;\r\n            case \"splitterElement\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nexport default FileManagerFileUploader;\r\n"]},"metadata":{},"sourceType":"module"}