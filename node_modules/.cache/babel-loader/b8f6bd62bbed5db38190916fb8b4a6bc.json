{"ast":null,"code":"/**\n* DevExpress Analytics (query-builder\\utils\\_columnExpressionCollectionHelper.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColumnExpressionCollectionHelper = void 0;\n\nvar ko = require(\"knockout\");\n\nvar columnExpression_1 = require(\"../elements/columnExpression\");\n\nvar _arrayutils_1 = require(\"../../core/utils/_arrayutils\");\n\nvar _getNameHelpers_1 = require(\"../../core/internal/_getNameHelpers\");\n\nvar columnExpressionMeta_1 = require(\"../elements/columnExpressionMeta\");\n\nvar federatedQueryExpression_1 = require(\"../dataSource/federation/federatedQueryExpression\");\n\nvar ColumnExpressionCollectionHelper = function () {\n  function ColumnExpressionCollectionHelper() {}\n\n  ColumnExpressionCollectionHelper.find = function (collection, tableName, columnName) {\n    return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) {\n      return item.column() === columnName && item.table() === tableName;\n    });\n  };\n\n  ColumnExpressionCollectionHelper.findByName = function (collection, actualName) {\n    return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) {\n      return item.actualName() === actualName;\n    });\n  };\n\n  ColumnExpressionCollectionHelper.removeDependend = function (collection, tableName) {\n    collection.remove(function (item) {\n      return item.isDepended(tableName);\n    });\n  };\n\n  ColumnExpressionCollectionHelper.toExpresson = function (column, columns, value) {\n    column.table = ko.observable(null);\n    column.column = ko.observable(null);\n    column.expression = column['__expression'];\n    column.itemType(columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]);\n    if (!column.alias()) column.alias(ColumnExpressionCollectionHelper.setUniqueAlias(columns, 'Expr'));\n    column.expression(value);\n  };\n\n  ColumnExpressionCollectionHelper.setUniqueAlias = function (collection, alias) {\n    if (ColumnExpressionCollectionHelper.findByName(collection, alias)) {\n      return _getNameHelpers_1.getUniqueName(collection().map(function (item) {\n        return item.actualName();\n      }), alias + '_');\n    }\n\n    return alias;\n  };\n\n  ColumnExpressionCollectionHelper.createNew = function (query, collection, table, column) {\n    var newItem = new columnExpression_1.ColumnExpression({\n      '@Table': table,\n      '@Name': column,\n      '@ItemType': 'Column'\n    }, query);\n\n    if (query.columns === collection && !newItem.alias() && ColumnExpressionCollectionHelper.findByName(collection, newItem.actualName())) {\n      newItem.alias(this.setUniqueAlias(collection, newItem.table() + '_' + newItem.column()));\n    }\n\n    return newItem;\n  };\n\n  ColumnExpressionCollectionHelper.addNew = function (query, collection, table, column, lazy) {\n    if (lazy === void 0) {\n      lazy = false;\n    }\n\n    var newItem = this.createNew(query, collection, table, column);\n    (lazy ? collection() : collection).push(newItem);\n    return newItem;\n  };\n\n  ColumnExpressionCollectionHelper.remove = function (collection, tableName, columnName, lazy) {\n    if (lazy === void 0) {\n      lazy = false;\n    }\n\n    if (!lazy) {\n      collection.remove(function (item) {\n        return item.column() === columnName && item.table() === tableName;\n      });\n    } else for (var i = 0; i < collection().length; i++) {\n      if (collection()[i].column() === columnName && collection()[i].table() === tableName) {\n        collection().splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  ColumnExpressionCollectionHelper.columnTypeToFederated = function (type) {\n    switch (type) {\n      case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]:\n        return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectExpression];\n\n      case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns]:\n        return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression];\n\n      case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery]:\n        return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression];\n\n      default:\n        return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectColumnExpression];\n    }\n  };\n\n  ColumnExpressionCollectionHelper.federatedTypeToColumn = function (type) {\n    switch (type) {\n      case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectExpression]:\n        return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression];\n\n      case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression]:\n        return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns];\n\n      case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression]:\n        return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery];\n\n      default:\n        return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Column];\n    }\n  };\n\n  return ColumnExpressionCollectionHelper;\n}();\n\nexports.ColumnExpressionCollectionHelper = ColumnExpressionCollectionHelper;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/@devexpress/analytics-core/query-builder/utils/_columnExpressionCollectionHelper.js"],"names":["Object","defineProperty","exports","value","ColumnExpressionCollectionHelper","ko","require","columnExpression_1","_arrayutils_1","_getNameHelpers_1","columnExpressionMeta_1","federatedQueryExpression_1","find","collection","tableName","columnName","findFirstItemMatchesCondition","item","column","table","findByName","actualName","removeDependend","remove","isDepended","toExpresson","columns","observable","expression","itemType","ColumnType","Expression","alias","setUniqueAlias","getUniqueName","map","createNew","query","newItem","ColumnExpression","addNew","lazy","push","i","length","splice","columnTypeToFederated","type","FederatedQueryExpressionType","SelectExpression","AllColumns","SelectAllNodeColumnsExpression","AllColumnsQuery","SelectAllColumnsExpression","SelectColumnExpression","federatedTypeToColumn","Column"],"mappings":"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","sourcesContent":["/**\n* DevExpress Analytics (query-builder\\utils\\_columnExpressionCollectionHelper.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnExpressionCollectionHelper = void 0;\nvar ko = require(\"knockout\");\nvar columnExpression_1 = require(\"../elements/columnExpression\");\nvar _arrayutils_1 = require(\"../../core/utils/_arrayutils\");\nvar _getNameHelpers_1 = require(\"../../core/internal/_getNameHelpers\");\nvar columnExpressionMeta_1 = require(\"../elements/columnExpressionMeta\");\nvar federatedQueryExpression_1 = require(\"../dataSource/federation/federatedQueryExpression\");\nvar ColumnExpressionCollectionHelper = (function () {\n    function ColumnExpressionCollectionHelper() {\n    }\n    ColumnExpressionCollectionHelper.find = function (collection, tableName, columnName) {\n        return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) { return item.column() === columnName && item.table() === tableName; });\n    };\n    ColumnExpressionCollectionHelper.findByName = function (collection, actualName) {\n        return _arrayutils_1.findFirstItemMatchesCondition(collection(), function (item) { return item.actualName() === actualName; });\n    };\n    ColumnExpressionCollectionHelper.removeDependend = function (collection, tableName) {\n        collection.remove(function (item) { return item.isDepended(tableName); });\n    };\n    ColumnExpressionCollectionHelper.toExpresson = function (column, columns, value) {\n        column.table = ko.observable(null);\n        column.column = ko.observable(null);\n        column.expression = column['__expression'];\n        column.itemType(columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]);\n        if (!column.alias())\n            column.alias(ColumnExpressionCollectionHelper.setUniqueAlias(columns, 'Expr'));\n        column.expression(value);\n    };\n    ColumnExpressionCollectionHelper.setUniqueAlias = function (collection, alias) {\n        if (ColumnExpressionCollectionHelper.findByName(collection, alias)) {\n            return _getNameHelpers_1.getUniqueName(collection().map(function (item) { return item.actualName(); }), alias + '_');\n        }\n        return alias;\n    };\n    ColumnExpressionCollectionHelper.createNew = function (query, collection, table, column) {\n        var newItem = new columnExpression_1.ColumnExpression({ '@Table': table, '@Name': column, '@ItemType': 'Column' }, query);\n        if (query.columns === collection && !newItem.alias() && ColumnExpressionCollectionHelper.findByName(collection, newItem.actualName())) {\n            newItem.alias(this.setUniqueAlias(collection, newItem.table() + '_' + newItem.column()));\n        }\n        return newItem;\n    };\n    ColumnExpressionCollectionHelper.addNew = function (query, collection, table, column, lazy) {\n        if (lazy === void 0) { lazy = false; }\n        var newItem = this.createNew(query, collection, table, column);\n        (lazy ? collection() : collection).push(newItem);\n        return newItem;\n    };\n    ColumnExpressionCollectionHelper.remove = function (collection, tableName, columnName, lazy) {\n        if (lazy === void 0) { lazy = false; }\n        if (!lazy) {\n            collection.remove(function (item) { return item.column() === columnName && item.table() === tableName; });\n        }\n        else\n            for (var i = 0; i < collection().length; i++) {\n                if (collection()[i].column() === columnName && collection()[i].table() === tableName) {\n                    collection().splice(i, 1);\n                    return;\n                }\n            }\n    };\n    ColumnExpressionCollectionHelper.columnTypeToFederated = function (type) {\n        switch (type) {\n            case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression]:\n                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectExpression];\n            case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns]:\n                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression];\n            case columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery]:\n                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression];\n            default:\n                return federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectColumnExpression];\n        }\n    };\n    ColumnExpressionCollectionHelper.federatedTypeToColumn = function (type) {\n        switch (type) {\n            case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectExpression]:\n                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Expression];\n            case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllNodeColumnsExpression]:\n                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumns];\n            case federatedQueryExpression_1.FederatedQueryExpressionType[federatedQueryExpression_1.FederatedQueryExpressionType.SelectAllColumnsExpression]:\n                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.AllColumnsQuery];\n            default:\n                return columnExpressionMeta_1.ColumnType[columnExpressionMeta_1.ColumnType.Column];\n        }\n    };\n    return ColumnExpressionCollectionHelper;\n}());\nexports.ColumnExpressionCollectionHelper = ColumnExpressionCollectionHelper;\n"]},"metadata":{},"sourceType":"script"}