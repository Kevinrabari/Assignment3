{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.scroll_view.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ScrollView from \"../scroll_view\";\nimport { calculateScrollbarWidth } from \"../pivot_grid/utils/calculate_scrollbar_width\";\nimport { getDiagram } from \"./diagram.importer\";\n\nclass DiagramScrollView extends Widget {\n  _init() {\n    super._init();\n\n    var {\n      EventDispatcher: EventDispatcher\n    } = getDiagram();\n    this.onScroll = new EventDispatcher();\n\n    this._createOnCreateDiagramAction();\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    var $scrollViewWrapper = $(\"<div>\").appendTo(this.$element());\n    var options = {\n      direction: \"both\",\n      bounceEnabled: false,\n      scrollByContent: false,\n      onScroll: _ref => {\n        var {\n          scrollOffset: scrollOffset\n        } = _ref;\n\n        this._raiseOnScroll(scrollOffset.left, scrollOffset.top);\n      }\n    };\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n\n    if (void 0 !== useNativeScrolling) {\n      options.useNative = useNativeScrolling;\n    }\n\n    this._scrollView = this._createComponent($scrollViewWrapper, ScrollView, options);\n\n    this._onCreateDiagramAction({\n      $parent: $(this._scrollView.content()),\n      scrollView: this\n    });\n  }\n\n  setScroll(left, top) {\n    this._scrollView.scrollTo({\n      left: left,\n      top: top\n    });\n\n    this._raiseOnScrollWithoutPoint();\n  }\n\n  offsetScroll(left, top) {\n    this._scrollView.scrollBy({\n      left: left,\n      top: top\n    });\n\n    this._raiseOnScrollWithoutPoint();\n  }\n\n  getSize() {\n    var {\n      Size: Size\n    } = getDiagram();\n\n    var $element = this._scrollView.$element();\n\n    return new Size(Math.floor(getWidth($element)), Math.floor(getHeight($element)));\n  }\n\n  getScrollContainer() {\n    return this._scrollView.$element()[0];\n  }\n\n  getScrollBarWidth() {\n    return this.option(\"useNativeScrolling\") ? calculateScrollbarWidth() : 0;\n  }\n\n  detachEvents() {}\n\n  _raiseOnScroll(left, top) {\n    var {\n      Point: Point\n    } = getDiagram();\n    this.onScroll.raise(\"notifyScrollChanged\", () => new Point(left, top));\n  }\n\n  _raiseOnScrollWithoutPoint() {\n    var {\n      Point: Point\n    } = getDiagram();\n    this.onScroll.raise(\"notifyScrollChanged\", () => new Point(this._scrollView.scrollLeft(), this._scrollView.scrollTop()));\n  }\n\n  _createOnCreateDiagramAction() {\n    this._onCreateDiagramAction = this._createActionByOption(\"onCreateDiagram\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onCreateDiagram\":\n        this._createOnCreateDiagramAction();\n\n        break;\n\n      case \"useNativeScrolling\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nexport default DiagramScrollView;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/diagram/ui.diagram.scroll_view.js"],"names":["getWidth","getHeight","$","Widget","ScrollView","calculateScrollbarWidth","getDiagram","DiagramScrollView","_init","EventDispatcher","onScroll","_createOnCreateDiagramAction","_initMarkup","$scrollViewWrapper","appendTo","$element","options","direction","bounceEnabled","scrollByContent","_ref","scrollOffset","_raiseOnScroll","left","top","useNativeScrolling","option","useNative","_scrollView","_createComponent","_onCreateDiagramAction","$parent","content","scrollView","setScroll","scrollTo","_raiseOnScrollWithoutPoint","offsetScroll","scrollBy","getSize","Size","Math","floor","getScrollContainer","getScrollBarWidth","detachEvents","Point","raise","scrollLeft","scrollTop","_createActionByOption","_optionChanged","args","name"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.scroll_view.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth,\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport ScrollView from \"../scroll_view\";\r\nimport {\r\n    calculateScrollbarWidth\r\n} from \"../pivot_grid/utils/calculate_scrollbar_width\";\r\nimport {\r\n    getDiagram\r\n} from \"./diagram.importer\";\r\nclass DiagramScrollView extends Widget {\r\n    _init() {\r\n        super._init();\r\n        var {\r\n            EventDispatcher: EventDispatcher\r\n        } = getDiagram();\r\n        this.onScroll = new EventDispatcher;\r\n        this._createOnCreateDiagramAction()\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        var $scrollViewWrapper = $(\"<div>\").appendTo(this.$element());\r\n        var options = {\r\n            direction: \"both\",\r\n            bounceEnabled: false,\r\n            scrollByContent: false,\r\n            onScroll: _ref => {\r\n                var {\r\n                    scrollOffset: scrollOffset\r\n                } = _ref;\r\n                this._raiseOnScroll(scrollOffset.left, scrollOffset.top)\r\n            }\r\n        };\r\n        var useNativeScrolling = this.option(\"useNativeScrolling\");\r\n        if (void 0 !== useNativeScrolling) {\r\n            options.useNative = useNativeScrolling\r\n        }\r\n        this._scrollView = this._createComponent($scrollViewWrapper, ScrollView, options);\r\n        this._onCreateDiagramAction({\r\n            $parent: $(this._scrollView.content()),\r\n            scrollView: this\r\n        })\r\n    }\r\n    setScroll(left, top) {\r\n        this._scrollView.scrollTo({\r\n            left: left,\r\n            top: top\r\n        });\r\n        this._raiseOnScrollWithoutPoint()\r\n    }\r\n    offsetScroll(left, top) {\r\n        this._scrollView.scrollBy({\r\n            left: left,\r\n            top: top\r\n        });\r\n        this._raiseOnScrollWithoutPoint()\r\n    }\r\n    getSize() {\r\n        var {\r\n            Size: Size\r\n        } = getDiagram();\r\n        var $element = this._scrollView.$element();\r\n        return new Size(Math.floor(getWidth($element)), Math.floor(getHeight($element)))\r\n    }\r\n    getScrollContainer() {\r\n        return this._scrollView.$element()[0]\r\n    }\r\n    getScrollBarWidth() {\r\n        return this.option(\"useNativeScrolling\") ? calculateScrollbarWidth() : 0\r\n    }\r\n    detachEvents() {}\r\n    _raiseOnScroll(left, top) {\r\n        var {\r\n            Point: Point\r\n        } = getDiagram();\r\n        this.onScroll.raise(\"notifyScrollChanged\", () => new Point(left, top))\r\n    }\r\n    _raiseOnScrollWithoutPoint() {\r\n        var {\r\n            Point: Point\r\n        } = getDiagram();\r\n        this.onScroll.raise(\"notifyScrollChanged\", () => new Point(this._scrollView.scrollLeft(), this._scrollView.scrollTop()))\r\n    }\r\n    _createOnCreateDiagramAction() {\r\n        this._onCreateDiagramAction = this._createActionByOption(\"onCreateDiagram\")\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"onCreateDiagram\":\r\n                this._createOnCreateDiagramAction();\r\n                break;\r\n            case \"useNativeScrolling\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nexport default DiagramScrollView;\r\n"]},"metadata":{},"sourceType":"module"}