{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_delta-indicator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeltaIndicator = void 0;\n\nvar renderer_1 = require(\"devextreme/viz/core/renderers/renderer\");\n\nvar $ = require(\"jquery\");\n\nvar _consts_1 = require(\"./_consts\");\n\nvar DeltaIndicator = function () {\n  function DeltaIndicator(options) {\n    options = options || {};\n    this._container = $(options.container);\n    this._renderer = options.renderer;\n    this._shape = null;\n\n    this._init();\n\n    if (this._container.length) {\n      this.draw(options);\n    }\n  }\n\n  DeltaIndicator.prototype._init = function () {\n    var container = this._container,\n        width = 0,\n        height = 0;\n\n    if (!container.length) {\n      return;\n    }\n\n    width = container.width(), height = container.height();\n\n    if (!(width > 0 && height > 0)) {\n      return;\n    }\n\n    this._renderer = new renderer_1.Renderer({\n      container: container[0]\n    });\n  };\n\n  DeltaIndicator.prototype.draw = function (options) {\n    var params = this._prepareDrawParams(options);\n\n    if (params.readyToDraw) {\n      this._render(params);\n    }\n\n    return this._shape;\n  };\n\n  DeltaIndicator.prototype._prepareDrawParams = function (options) {\n    var container = this._container,\n        params = {\n      readyToDraw: false\n    },\n        rectOptions = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n\n    if (container.length) {\n      rectOptions.right = container.width() || 0;\n      rectOptions.bottom = container.height() || 0;\n    } else if (options.rect) {\n      rectOptions = options.rect;\n    }\n\n    params.rectangle = rectOptions;\n    params.type = options.type || _consts_1.indicatorType.none;\n    params.hasPositiveMeaning = !!options.hasPositiveMeaning;\n    params.readyToDraw = !!(this._renderer && rectOptions.right - rectOptions.left > 0 && rectOptions.bottom - rectOptions.top > 0);\n    params.drawToContainer = !!this._container.length;\n    return params;\n  };\n\n  DeltaIndicator.prototype._render = function (params) {\n    var rect = params.rectangle,\n        shape;\n    this._shape = null;\n\n    if (params.drawToContainer) {\n      this._renderer.resize(rect.right - rect.left, rect.bottom - rect.top);\n\n      shape = this._drawShape(params);\n\n      if (shape) {\n        shape.append(this._renderer.root);\n      }\n    } else {\n      shape = this._drawShape(params);\n    }\n\n    this._shape = shape;\n  };\n\n  DeltaIndicator.prototype._drawShape = function (params) {\n    var shape = null,\n        rect = params.rectangle,\n        cx = rect.left + rect.right >> 1,\n        cy = rect.top + rect.bottom >> 1,\n        r = ~~(Math.min(rect.right - rect.left, rect.bottom - rect.top) / 2),\n        coords = [],\n        colorClassName = DeltaIndicator.getIndicatorColorType(params.type, params.hasPositiveMeaning);\n\n    switch (params.type) {\n      case _consts_1.indicatorType.none:\n        break;\n\n      case _consts_1.indicatorType.up:\n        coords.push(rect.left);\n        coords.push(rect.bottom);\n        coords.push(cx);\n        coords.push(rect.top);\n        coords.push(rect.right);\n        coords.push(rect.bottom);\n        shape = this._renderer.path(coords, 'area').attr({\n          'class': colorClassName\n        });\n        shape._useCSSTheme = true;\n        break;\n\n      case _consts_1.indicatorType.down:\n        coords.push(rect.left);\n        coords.push(rect.top);\n        coords.push(cx);\n        coords.push(rect.bottom);\n        coords.push(rect.right);\n        coords.push(rect.top);\n        shape = this._renderer.path(coords, 'area').attr({\n          'class': colorClassName\n        });\n        shape._useCSSTheme = true;\n        break;\n\n      case _consts_1.indicatorType.warning:\n        shape = this._renderer.circle(cx, cy, r).attr({\n          'class': colorClassName\n        });\n        shape._useCSSTheme = true;\n        break;\n    }\n\n    return shape;\n  };\n\n  DeltaIndicator.getIndicatorColorType = function (type, hasPositiveMeaning, useDefaultColor) {\n    var color;\n\n    if (useDefaultColor) {\n      color = 'dx-carditem-default-color';\n    } else {\n      switch (type) {\n        case _consts_1.indicatorType.up:\n        case _consts_1.indicatorType.down:\n          color = hasPositiveMeaning ? 'dx-carditem-positive-color' : 'dx-carditem-negative-color';\n          break;\n\n        case _consts_1.indicatorType.warning:\n          color = 'dx-carditem-warning-color';\n          break;\n\n        default:\n          color = 'dx-carditem-none-color';\n          break;\n      }\n    }\n\n    return color;\n  };\n\n  return DeltaIndicator;\n}();\n\nexports.DeltaIndicator = DeltaIndicator;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/widgets/indicators/_delta-indicator.js"],"names":["Object","defineProperty","exports","value","DeltaIndicator","renderer_1","require","$","_consts_1","options","_container","container","_renderer","renderer","_shape","_init","length","draw","prototype","width","height","Renderer","params","_prepareDrawParams","readyToDraw","_render","rectOptions","left","top","right","bottom","rect","rectangle","type","indicatorType","none","hasPositiveMeaning","drawToContainer","shape","resize","_drawShape","append","root","cx","cy","r","Math","min","coords","colorClassName","getIndicatorColorType","up","push","path","attr","_useCSSTheme","down","warning","circle","useDefaultColor","color"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_delta-indicator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeltaIndicator = void 0;\nvar renderer_1 = require(\"devextreme/viz/core/renderers/renderer\");\nvar $ = require(\"jquery\");\nvar _consts_1 = require(\"./_consts\");\nvar DeltaIndicator = (function () {\n    function DeltaIndicator(options) {\n        options = options || {};\n        this._container = $(options.container);\n        this._renderer = options.renderer;\n        this._shape = null;\n        this._init();\n        if (this._container.length) {\n            this.draw(options);\n        }\n    }\n    DeltaIndicator.prototype._init = function () {\n        var container = this._container, width = 0, height = 0;\n        if (!container.length) {\n            return;\n        }\n        width = container.width(),\n            height = container.height();\n        if (!(width > 0 && height > 0)) {\n            return;\n        }\n        this._renderer = new renderer_1.Renderer({ container: container[0] });\n    };\n    DeltaIndicator.prototype.draw = function (options) {\n        var params = this._prepareDrawParams(options);\n        if (params.readyToDraw) {\n            this._render(params);\n        }\n        return this._shape;\n    };\n    DeltaIndicator.prototype._prepareDrawParams = function (options) {\n        var container = this._container, params = { readyToDraw: false }, rectOptions = { left: 0, top: 0, right: 0, bottom: 0 };\n        if (container.length) {\n            rectOptions.right = container.width() || 0;\n            rectOptions.bottom = container.height() || 0;\n        }\n        else if (options.rect) {\n            rectOptions = options.rect;\n        }\n        params.rectangle = rectOptions;\n        params.type = options.type || _consts_1.indicatorType.none;\n        params.hasPositiveMeaning = !!(options.hasPositiveMeaning);\n        params.readyToDraw = !!(this._renderer && rectOptions.right - rectOptions.left > 0 && rectOptions.bottom - rectOptions.top > 0);\n        params.drawToContainer = !!(this._container.length);\n        return params;\n    };\n    DeltaIndicator.prototype._render = function (params) {\n        var rect = params.rectangle, shape;\n        this._shape = null;\n        if (params.drawToContainer) {\n            this._renderer.resize(rect.right - rect.left, rect.bottom - rect.top);\n            shape = this._drawShape(params);\n            if (shape) {\n                shape.append(this._renderer.root);\n            }\n        }\n        else {\n            shape = this._drawShape(params);\n        }\n        this._shape = shape;\n    };\n    DeltaIndicator.prototype._drawShape = function (params) {\n        var shape = null, rect = params.rectangle, cx = (rect.left + rect.right) >> 1, cy = (rect.top + rect.bottom) >> 1, r = ~~(Math.min(rect.right - rect.left, rect.bottom - rect.top) / 2), coords = [], colorClassName = DeltaIndicator.getIndicatorColorType(params.type, params.hasPositiveMeaning);\n        switch (params.type) {\n            case _consts_1.indicatorType.none:\n                break;\n            case _consts_1.indicatorType.up:\n                coords.push(rect.left);\n                coords.push(rect.bottom);\n                coords.push(cx);\n                coords.push(rect.top);\n                coords.push(rect.right);\n                coords.push(rect.bottom);\n                shape = this._renderer.path(coords, 'area').attr({ 'class': colorClassName });\n                shape._useCSSTheme = true;\n                break;\n            case _consts_1.indicatorType.down:\n                coords.push(rect.left);\n                coords.push(rect.top);\n                coords.push(cx);\n                coords.push(rect.bottom);\n                coords.push(rect.right);\n                coords.push(rect.top);\n                shape = this._renderer.path(coords, 'area').attr({ 'class': colorClassName });\n                shape._useCSSTheme = true;\n                break;\n            case _consts_1.indicatorType.warning:\n                shape = this._renderer.circle(cx, cy, r).attr({ 'class': colorClassName });\n                shape._useCSSTheme = true;\n                break;\n        }\n        return shape;\n    };\n    DeltaIndicator.getIndicatorColorType = function (type, hasPositiveMeaning, useDefaultColor) {\n        var color;\n        if (useDefaultColor) {\n            color = 'dx-carditem-default-color';\n        }\n        else {\n            switch (type) {\n                case _consts_1.indicatorType.up:\n                case _consts_1.indicatorType.down:\n                    color = hasPositiveMeaning ? 'dx-carditem-positive-color' : 'dx-carditem-negative-color';\n                    break;\n                case _consts_1.indicatorType.warning:\n                    color = 'dx-carditem-warning-color';\n                    break;\n                default:\n                    color = 'dx-carditem-none-color';\n                    break;\n            }\n        }\n        return color;\n    };\n    return DeltaIndicator;\n}());\nexports.DeltaIndicator = DeltaIndicator;\n"]},"metadata":{},"sourceType":"script"}