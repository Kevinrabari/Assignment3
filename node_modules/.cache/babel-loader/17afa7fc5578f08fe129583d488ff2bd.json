{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport { extendAttributes } from \"./ui.file_manager.common\";\nimport Widget from \"../widget/ui.widget\";\nimport Toolbar from \"../toolbar\";\nimport \"../drop_down_button\";\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\nvar DEFAULT_ITEM_CONFIGS = {\n  showNavPane: {\n    location: \"before\"\n  },\n  create: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  upload: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  refresh: {\n    location: \"after\",\n    showText: \"inMenu\",\n    cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  switchView: {\n    location: \"after\"\n  },\n  download: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  move: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  copy: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  rename: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  delete: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  clearSelection: {\n    location: \"after\",\n    locateInMenu: \"never\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  separator: {\n    location: \"before\"\n  }\n};\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\nvar REFRESH_ICON_MAP = {\n  default: \"dx-filemanager-i dx-filemanager-i-refresh\",\n  progress: \"dx-filemanager-i dx-filemanager-i-progress\",\n  success: \"dx-filemanager-i dx-filemanager-i-done\",\n  error: \"dx-filemanager-i dx-filemanager-i-danger\"\n};\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\n\nclass FileManagerToolbar extends Widget {\n  _init() {\n    super._init();\n\n    this._generalToolbarVisible = true;\n    this._refreshItemState = {\n      message: \"\",\n      status: \"default\"\n    };\n  }\n\n  _initMarkup() {\n    this._createItemClickedAction();\n\n    this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\n    this._generalToolbar = this._createToolbar(this.option(\"generalItems\"), !this._generalToolbarVisible);\n    this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), this._generalToolbarVisible);\n\n    this._$viewSwitcherPopup.appendTo(this.$element());\n\n    this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS);\n  }\n\n  _render() {\n    super._render();\n\n    var toolbar = this._getVisibleToolbar();\n\n    this._checkCompactMode(toolbar);\n  }\n\n  _clean() {\n    delete this._commandManager;\n    delete this._itemClickedAction;\n    delete this._$viewSwitcherPopup;\n    delete this._generalToolbar;\n    delete this._fileToolbar;\n\n    super._clean();\n  }\n\n  _dimensionChanged(dimension) {\n    if (!dimension || \"height\" !== dimension) {\n      var toolbar = this._getVisibleToolbar();\n\n      this._checkCompactMode(toolbar);\n    }\n  }\n\n  _getVisibleToolbar() {\n    return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar;\n  }\n\n  _createToolbar(items, hidden) {\n    var toolbarItems = this._getPreparedItems(items);\n\n    var $toolbar = $(\"<div>\").appendTo(this.$element());\n\n    var result = this._createComponent($toolbar, Toolbar, {\n      items: toolbarItems,\n      visible: !hidden,\n      onItemClick: args => this._raiseItemClicked(args)\n    });\n\n    result.compactMode = false;\n    return result;\n  }\n\n  _getPreparedItems(items) {\n    items = items.map(item => {\n      var extendedItem = item;\n\n      if (isString(item)) {\n        extendedItem = {\n          name: item\n        };\n      }\n\n      var commandName = extendedItem.name;\n\n      var preparedItem = this._configureItemByCommandName(commandName, extendedItem);\n\n      preparedItem.originalItemData = item;\n\n      if (\"separator\" !== commandName) {\n        this._setItemVisibleAvailable(preparedItem);\n      }\n\n      return preparedItem;\n    });\n\n    this._updateSeparatorsVisibility(items);\n\n    return items;\n  }\n\n  _updateSeparatorsVisibility(items, toolbar) {\n    var hasModifications = false;\n\n    var menuItems = this._getMenuItems(toolbar);\n\n    var hasItemsBefore = {\n      before: false,\n      center: false,\n      after: false\n    };\n    var itemGroups = {\n      before: this._getItemsInGroup(items, menuItems, \"before\"),\n      center: this._getItemsInGroup(items, menuItems, \"center\"),\n      after: this._getItemsInGroup(items, menuItems, \"after\")\n    };\n    items.forEach((item, i) => {\n      var itemLocation = item.location;\n\n      if (\"separator\" === item.name) {\n        var isSeparatorVisible = hasItemsBefore[itemLocation] && this._groupHasItemsAfter(itemGroups[itemLocation]);\n\n        if (item.visible !== isSeparatorVisible) {\n          hasModifications = true;\n          item.visible = isSeparatorVisible;\n        }\n\n        hasItemsBefore[itemLocation] = false;\n      } else {\n        if (!this._isItemInMenu(menuItems, item)) {\n          hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible;\n        }\n\n        itemGroups[itemLocation].shift();\n      }\n    });\n\n    if (toolbar && hasModifications) {\n      toolbar.repaint();\n    }\n\n    return hasModifications;\n  }\n\n  _getMenuItems(toolbar) {\n    var result = toolbar ? toolbar._getMenuItems() : [];\n    return result.map(menuItem => menuItem.originalItemData);\n  }\n\n  _isItemInMenu(menuItems, item) {\n    return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData);\n  }\n\n  _getItemsInGroup(items, menuItems, groupName) {\n    return items.filter(item => item.location === groupName && !this._isItemInMenu(menuItems, item));\n  }\n\n  _groupHasItemsAfter(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (\"separator\" !== items[i].name && items[i].visible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _configureItemByCommandName(commandName, item) {\n    var _result$options;\n\n    var result = {};\n\n    var command = this._commandManager.getCommandByName(commandName);\n\n    if (command) {\n      result = this._createCommandItem(command);\n    }\n\n    switch (commandName) {\n      case \"separator\":\n        result = this._createSeparatorItem();\n        break;\n\n      case \"switchView\":\n        result = this._createViewModeItem();\n    }\n\n    if (this._isDefaultItem(commandName)) {\n      var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\n      extend(true, result, defaultConfig);\n      var resultCssClass = result.cssClass || \"\";\n      extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\n\n      if (isDefined(item.options)) {\n        extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES);\n      }\n\n      extendAttributes(result.options, item, [\"text\", \"icon\"]);\n\n      if (item.cssClass) {\n        resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass);\n      }\n\n      if (resultCssClass) {\n        result.cssClass = resultCssClass;\n      }\n\n      if (!isDefined(item.visible)) {\n        result._autoHide = true;\n      }\n\n      if (\"dxButton\" === result.widget) {\n        if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\n          result.options.hint = result.options.text;\n        }\n\n        if (result.compactMode && !isDefined(result.options.hint)) {\n          this._configureHintForCompactMode(result);\n        }\n      }\n    } else {\n      extend(true, result, item);\n\n      if (!result.widget) {\n        result.widget = \"dxButton\";\n      }\n\n      if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\n        result.compactMode = {\n          showText: \"inMenu\"\n        };\n      }\n    }\n\n    if (commandName && !result.name) {\n      extend(result, {\n        name: commandName\n      });\n    }\n\n    result.location = ensureDefined(result.location, \"before\");\n\n    if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\n      if (\"dxButton\" === result.widget) {\n        extend(true, result, {\n          options: {\n            stylingMode: \"text\"\n          }\n        });\n      }\n\n      if (\"dxSelectBox\" === result.widget) {\n        extend(true, result, {\n          options: {\n            stylingMode: \"filled\"\n          }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  _isDefaultItem(commandName) {\n    return !!DEFAULT_ITEM_CONFIGS[commandName];\n  }\n\n  _createCommandItem(command) {\n    return {\n      widget: \"dxButton\",\n      options: {\n        text: command.text,\n        hint: command.hint,\n        commandText: command.text,\n        icon: command.icon,\n        stylingMode: \"text\",\n        onClick: e => this._executeCommand(command)\n      }\n    };\n  }\n\n  _createSeparatorItem() {\n    return {\n      template: (data, index, element) => {\n        $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS);\n      }\n    };\n  }\n\n  _createViewModeItem() {\n    var commandItems = [\"details\", \"thumbnails\"].map(name => {\n      var {\n        text: text,\n        icon: icon\n      } = this._commandManager.getCommandByName(name);\n\n      return {\n        name: name,\n        text: text,\n        icon: icon\n      };\n    });\n    var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\n    return {\n      cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\n      widget: \"dxDropDownButton\",\n      options: {\n        items: commandItems,\n        keyExpr: \"name\",\n        selectedItemKey: this.option(\"itemViewMode\"),\n        displayExpr: \" \",\n        hint: commandItems[selectedIndex].text,\n        stylingMode: \"text\",\n        showArrowIcon: false,\n        useSelectMode: true,\n        dropDownOptions: {\n          container: this._$viewSwitcherPopup\n        },\n        onItemClick: e => this._executeCommand(e.itemData.name)\n      }\n    };\n  }\n\n  _configureHintForCompactMode(item) {\n    item.options.hint = \"\";\n    item.compactMode.options = item.compactMode.options || {};\n    item.compactMode.options.hint = item.options.text;\n  }\n\n  _checkCompactMode(toolbar) {\n    if (toolbar.compactMode) {\n      this._toggleCompactMode(toolbar, false);\n    }\n\n    var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\n\n    if (toolbar.compactMode !== useCompactMode) {\n      if (!toolbar.compactMode) {\n        this._toggleCompactMode(toolbar, useCompactMode);\n      }\n\n      toolbar.compactMode = useCompactMode;\n    } else if (toolbar.compactMode) {\n      this._toggleCompactMode(toolbar, true);\n    }\n  }\n\n  _toolbarHasItemsOverflow(toolbar) {\n    var toolbarWidth = getWidth(toolbar.$element());\n\n    var itemsWidth = toolbar._getItemsWidth();\n\n    return toolbarWidth < itemsWidth;\n  }\n\n  _toggleCompactMode(toolbar, useCompactMode) {\n    var hasModifications = false;\n    var items = toolbar.option(\"items\");\n    items.forEach(item => {\n      if (item.compactMode) {\n        var optionsSource = null;\n\n        if (useCompactMode) {\n          item.saved = this._getCompactModeOptions(item, item._available);\n          optionsSource = item.compactMode;\n        } else {\n          optionsSource = item.saved;\n        }\n\n        var options = this._getCompactModeOptions(optionsSource, item._available);\n\n        extend(true, item, options);\n        hasModifications = true;\n      }\n    });\n    hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n    if (hasModifications) {\n      toolbar.repaint();\n    }\n\n    this._updateSeparatorsVisibility(items, toolbar);\n  }\n\n  _getCompactModeOptions(_ref, available) {\n    var {\n      showText: showText,\n      locateInMenu: locateInMenu,\n      options: options\n    } = _ref;\n    return {\n      visible: available,\n      showText: ensureDefined(showText, \"always\"),\n      locateInMenu: ensureDefined(locateInMenu, \"never\"),\n      options: {\n        hint: null === options || void 0 === options ? void 0 : options.hint\n      }\n    };\n  }\n\n  _ensureAvailableCommandsVisible(toolbar) {\n    var hasModifications = false;\n    var items = toolbar.option(\"items\");\n    items.forEach(item => {\n      if (\"separator\" !== item.name) {\n        var itemVisible = item._available;\n\n        this._setItemVisibleAvailable(item);\n\n        if (item._available !== itemVisible) {\n          hasModifications = true;\n        }\n      }\n    });\n    hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n    if (hasModifications) {\n      toolbar.repaint();\n    }\n\n    this._updateSeparatorsVisibility(items, toolbar);\n  }\n\n  _setItemVisibleAvailable(item) {\n    var _item$originalItemDat;\n\n    var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\n    item._available = this._isToolbarItemAvailable(item);\n    item.visible = isDefined(originalVisible) ? originalVisible : item._available;\n  }\n\n  _fileToolbarHasEffectiveItems() {\n    var items = this._fileToolbar.option(\"items\");\n\n    return items.some(item => this._isFileToolbarItemAvailable(item));\n  }\n\n  _executeCommand(command) {\n    this._commandManager.executeCommand(command);\n  }\n\n  _isToolbarItemAvailable(toolbarItem) {\n    if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\n      return ensureDefined(toolbarItem.visible, true);\n    }\n\n    if (\"refresh\" === toolbarItem.name) {\n      return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar;\n    }\n\n    if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\n      return true;\n    }\n\n    return this._isCommandAvailable(toolbarItem.name);\n  }\n\n  _isFileToolbarItemAvailable(_ref2) {\n    var {\n      name: name,\n      visible: visible\n    } = _ref2;\n    return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._isCommandAvailable(name);\n  }\n\n  _isCommandAvailable(name) {\n    return this._commandManager.isCommandAvailable(name, this.option(\"contextItems\"));\n  }\n\n  _updateItemInToolbar(toolbar, commandName, options) {\n    toolbar.beginUpdate();\n    var items = toolbar.option(\"items\");\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (item.name === commandName) {\n        toolbar.option(\"items[\".concat(i, \"]\"), options);\n        break;\n      }\n    }\n\n    toolbar.endUpdate();\n  }\n\n  _raiseItemClicked(args) {\n    var changedArgs = extend(true, {}, args);\n    changedArgs.itemData = args.itemData.originalItemData;\n\n    this._itemClickedAction(changedArgs);\n  }\n\n  _createItemClickedAction() {\n    this._itemClickedAction = this._createActionByOption(\"onItemClick\");\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      commandManager: null,\n      generalItems: [],\n      fileItems: [],\n      contextItems: [],\n      itemViewMode: \"details\",\n      onItemClick: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"commandManager\":\n      case \"itemViewMode\":\n      case \"generalItems\":\n      case \"fileItems\":\n        this.repaint();\n        break;\n\n      case \"contextItems\":\n        this._update();\n\n        break;\n\n      case \"onItemClick\":\n        this._itemClickedAction = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  updateItemPermissions() {\n    this.repaint();\n\n    this._restoreRefreshItemState();\n  }\n\n  _restoreRefreshItemState() {\n    this.updateRefreshItem(this._refreshItemState.message, this._refreshItemState.status);\n  }\n\n  updateRefreshItem(message, status) {\n    var generalToolbarOptions = null;\n    var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\n    var showText = \"inMenu\";\n    this._isRefreshVisibleInFileToolbar = false;\n    this._refreshItemState = {\n      message: message,\n      status: status\n    };\n\n    if (\"default\" === status) {\n      generalToolbarOptions = {\n        options: {\n          icon: REFRESH_ICON_MAP.default\n        }\n      };\n    } else {\n      generalToolbarOptions = {\n        options: {\n          icon: REFRESH_ICON_MAP[status]\n        }\n      };\n      this._isRefreshVisibleInFileToolbar = true;\n      text = message;\n      showText = \"always\";\n    }\n\n    var fileToolbarOptions = extend({}, generalToolbarOptions, {\n      visible: this._isRefreshVisibleInFileToolbar\n    });\n\n    this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\n\n    this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText);\n  }\n\n  _updateRefreshItemText(isDeferredUpdate, text, showText) {\n    var options = {\n      showText: showText,\n      options: {\n        text: text\n      }\n    };\n\n    if (isDeferredUpdate) {\n      return setTimeout(() => {\n        this._applyRefreshItemOptions(options);\n\n        this._refreshItemTextTimeout = void 0;\n      }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY);\n    } else {\n      if (this._refreshItemTextTimeout) {\n        clearTimeout(this._refreshItemTextTimeout);\n      }\n\n      this._applyRefreshItemOptions(options);\n\n      return;\n    }\n  }\n\n  _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\n    if (!fileToolbarOptions) {\n      fileToolbarOptions = extend({}, generalToolbarOptions);\n    }\n\n    this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\n\n    this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions);\n  }\n\n  _update() {\n    var showGeneralToolbar = 0 === this.option(\"contextItems\").length || !this._fileToolbarHasEffectiveItems();\n\n    if (this._generalToolbarVisible !== showGeneralToolbar) {\n      this._generalToolbar.option(\"visible\", showGeneralToolbar);\n\n      this._fileToolbar.option(\"visible\", !showGeneralToolbar);\n\n      this._generalToolbarVisible = showGeneralToolbar;\n      this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\n      this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar);\n    }\n\n    var toolbar = this._getVisibleToolbar();\n\n    this._ensureAvailableCommandsVisible(toolbar);\n\n    this._checkCompactMode(toolbar);\n  }\n\n  get _commandManager() {\n    return this.option(\"commandManager\");\n  }\n\n}\n\nexport default FileManagerToolbar;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.toolbar.js"],"names":["getWidth","$","extend","isDefined","isString","ensureDefined","messageLocalization","extendAttributes","Widget","Toolbar","FILE_MANAGER_TOOLBAR_CLASS","FILE_MANAGER_GENERAL_TOOLBAR_CLASS","FILE_MANAGER_FILE_TOOLBAR_CLASS","FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS","FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS","FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS","FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS","DEFAULT_ITEM_CONFIGS","showNavPane","location","create","compactMode","showText","locateInMenu","upload","refresh","cssClass","switchView","download","move","copy","rename","delete","clearSelection","separator","DEFAULT_ITEM_ALLOWED_PROPERTIES","DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES","ALWAYS_VISIBLE_TOOLBAR_ITEMS","REFRESH_ICON_MAP","default","progress","success","error","REFRESH_ITEM_PROGRESS_MESSAGE_DELAY","FileManagerToolbar","_init","_generalToolbarVisible","_refreshItemState","message","status","_initMarkup","_createItemClickedAction","_$viewSwitcherPopup","addClass","_generalToolbar","_createToolbar","option","_fileToolbar","appendTo","$element","_render","toolbar","_getVisibleToolbar","_checkCompactMode","_clean","_commandManager","_itemClickedAction","_dimensionChanged","dimension","items","hidden","toolbarItems","_getPreparedItems","$toolbar","result","_createComponent","visible","onItemClick","args","_raiseItemClicked","map","item","extendedItem","name","commandName","preparedItem","_configureItemByCommandName","originalItemData","_setItemVisibleAvailable","_updateSeparatorsVisibility","hasModifications","menuItems","_getMenuItems","hasItemsBefore","before","center","after","itemGroups","_getItemsInGroup","forEach","i","itemLocation","isSeparatorVisible","_groupHasItemsAfter","_isItemInMenu","shift","repaint","menuItem","length","indexOf","groupName","filter","_result$options","command","getCommandByName","_createCommandItem","_createSeparatorItem","_createViewModeItem","_isDefaultItem","defaultConfig","resultCssClass","options","concat","_autoHide","widget","hint","text","_configureHintForCompactMode","icon","stylingMode","commandText","onClick","e","_executeCommand","template","data","index","element","commandItems","selectedIndex","keyExpr","selectedItemKey","displayExpr","showArrowIcon","useSelectMode","dropDownOptions","container","itemData","_toggleCompactMode","useCompactMode","_toolbarHasItemsOverflow","toolbarWidth","itemsWidth","_getItemsWidth","optionsSource","saved","_getCompactModeOptions","_available","_ref","available","_ensureAvailableCommandsVisible","itemVisible","_item$originalItemDat","originalVisible","_isToolbarItemAvailable","_fileToolbarHasEffectiveItems","some","_isFileToolbarItemAvailable","executeCommand","toolbarItem","_isRefreshVisibleInFileToolbar","_isCommandAvailable","_ref2","isCommandAvailable","_updateItemInToolbar","beginUpdate","endUpdate","changedArgs","_createActionByOption","_getDefaultOptions","commandManager","generalItems","fileItems","contextItems","itemViewMode","_optionChanged","_update","updateItemPermissions","_restoreRefreshItemState","updateRefreshItem","generalToolbarOptions","format","fileToolbarOptions","_applyRefreshItemOptions","_refreshItemTextTimeout","_updateRefreshItemText","isDeferredUpdate","setTimeout","clearTimeout","showGeneralToolbar","toggleClass"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    extendAttributes\r\n} from \"./ui.file_manager.common\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Toolbar from \"../toolbar\";\r\nimport \"../drop_down_button\";\r\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\r\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\r\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\r\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\r\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\r\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\r\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\r\nvar DEFAULT_ITEM_CONFIGS = {\r\n    showNavPane: {\r\n        location: \"before\"\r\n    },\r\n    create: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    upload: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    refresh: {\r\n        location: \"after\",\r\n        showText: \"inMenu\",\r\n        cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    switchView: {\r\n        location: \"after\"\r\n    },\r\n    download: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    move: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    copy: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    rename: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    delete: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\"\r\n        }\r\n    },\r\n    clearSelection: {\r\n        location: \"after\",\r\n        locateInMenu: \"never\",\r\n        compactMode: {\r\n            showText: \"inMenu\"\r\n        }\r\n    },\r\n    separator: {\r\n        location: \"before\"\r\n    }\r\n};\r\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\r\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\r\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\r\nvar REFRESH_ICON_MAP = {\r\n    default: \"dx-filemanager-i dx-filemanager-i-refresh\",\r\n    progress: \"dx-filemanager-i dx-filemanager-i-progress\",\r\n    success: \"dx-filemanager-i dx-filemanager-i-done\",\r\n    error: \"dx-filemanager-i dx-filemanager-i-danger\"\r\n};\r\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\r\nclass FileManagerToolbar extends Widget {\r\n    _init() {\r\n        super._init();\r\n        this._generalToolbarVisible = true;\r\n        this._refreshItemState = {\r\n            message: \"\",\r\n            status: \"default\"\r\n        }\r\n    }\r\n    _initMarkup() {\r\n        this._createItemClickedAction();\r\n        this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\r\n        this._generalToolbar = this._createToolbar(this.option(\"generalItems\"), !this._generalToolbarVisible);\r\n        this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), this._generalToolbarVisible);\r\n        this._$viewSwitcherPopup.appendTo(this.$element());\r\n        this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS)\r\n    }\r\n    _render() {\r\n        super._render();\r\n        var toolbar = this._getVisibleToolbar();\r\n        this._checkCompactMode(toolbar)\r\n    }\r\n    _clean() {\r\n        delete this._commandManager;\r\n        delete this._itemClickedAction;\r\n        delete this._$viewSwitcherPopup;\r\n        delete this._generalToolbar;\r\n        delete this._fileToolbar;\r\n        super._clean()\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (!dimension || \"height\" !== dimension) {\r\n            var toolbar = this._getVisibleToolbar();\r\n            this._checkCompactMode(toolbar)\r\n        }\r\n    }\r\n    _getVisibleToolbar() {\r\n        return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar\r\n    }\r\n    _createToolbar(items, hidden) {\r\n        var toolbarItems = this._getPreparedItems(items);\r\n        var $toolbar = $(\"<div>\").appendTo(this.$element());\r\n        var result = this._createComponent($toolbar, Toolbar, {\r\n            items: toolbarItems,\r\n            visible: !hidden,\r\n            onItemClick: args => this._raiseItemClicked(args)\r\n        });\r\n        result.compactMode = false;\r\n        return result\r\n    }\r\n    _getPreparedItems(items) {\r\n        items = items.map(item => {\r\n            var extendedItem = item;\r\n            if (isString(item)) {\r\n                extendedItem = {\r\n                    name: item\r\n                }\r\n            }\r\n            var commandName = extendedItem.name;\r\n            var preparedItem = this._configureItemByCommandName(commandName, extendedItem);\r\n            preparedItem.originalItemData = item;\r\n            if (\"separator\" !== commandName) {\r\n                this._setItemVisibleAvailable(preparedItem)\r\n            }\r\n            return preparedItem\r\n        });\r\n        this._updateSeparatorsVisibility(items);\r\n        return items\r\n    }\r\n    _updateSeparatorsVisibility(items, toolbar) {\r\n        var hasModifications = false;\r\n        var menuItems = this._getMenuItems(toolbar);\r\n        var hasItemsBefore = {\r\n            before: false,\r\n            center: false,\r\n            after: false\r\n        };\r\n        var itemGroups = {\r\n            before: this._getItemsInGroup(items, menuItems, \"before\"),\r\n            center: this._getItemsInGroup(items, menuItems, \"center\"),\r\n            after: this._getItemsInGroup(items, menuItems, \"after\")\r\n        };\r\n        items.forEach((item, i) => {\r\n            var itemLocation = item.location;\r\n            if (\"separator\" === item.name) {\r\n                var isSeparatorVisible = hasItemsBefore[itemLocation] && this._groupHasItemsAfter(itemGroups[itemLocation]);\r\n                if (item.visible !== isSeparatorVisible) {\r\n                    hasModifications = true;\r\n                    item.visible = isSeparatorVisible\r\n                }\r\n                hasItemsBefore[itemLocation] = false\r\n            } else {\r\n                if (!this._isItemInMenu(menuItems, item)) {\r\n                    hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible\r\n                }\r\n                itemGroups[itemLocation].shift()\r\n            }\r\n        });\r\n        if (toolbar && hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        return hasModifications\r\n    }\r\n    _getMenuItems(toolbar) {\r\n        var result = toolbar ? toolbar._getMenuItems() : [];\r\n        return result.map(menuItem => menuItem.originalItemData)\r\n    }\r\n    _isItemInMenu(menuItems, item) {\r\n        return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData)\r\n    }\r\n    _getItemsInGroup(items, menuItems, groupName) {\r\n        return items.filter(item => item.location === groupName && !this._isItemInMenu(menuItems, item))\r\n    }\r\n    _groupHasItemsAfter(items) {\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (\"separator\" !== items[i].name && items[i].visible) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _configureItemByCommandName(commandName, item) {\r\n        var _result$options;\r\n        var result = {};\r\n        var command = this._commandManager.getCommandByName(commandName);\r\n        if (command) {\r\n            result = this._createCommandItem(command)\r\n        }\r\n        switch (commandName) {\r\n            case \"separator\":\r\n                result = this._createSeparatorItem();\r\n                break;\r\n            case \"switchView\":\r\n                result = this._createViewModeItem()\r\n        }\r\n        if (this._isDefaultItem(commandName)) {\r\n            var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\r\n            extend(true, result, defaultConfig);\r\n            var resultCssClass = result.cssClass || \"\";\r\n            extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\r\n            if (isDefined(item.options)) {\r\n                extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES)\r\n            }\r\n            extendAttributes(result.options, item, [\"text\", \"icon\"]);\r\n            if (item.cssClass) {\r\n                resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass)\r\n            }\r\n            if (resultCssClass) {\r\n                result.cssClass = resultCssClass\r\n            }\r\n            if (!isDefined(item.visible)) {\r\n                result._autoHide = true\r\n            }\r\n            if (\"dxButton\" === result.widget) {\r\n                if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\r\n                    result.options.hint = result.options.text\r\n                }\r\n                if (result.compactMode && !isDefined(result.options.hint)) {\r\n                    this._configureHintForCompactMode(result)\r\n                }\r\n            }\r\n        } else {\r\n            extend(true, result, item);\r\n            if (!result.widget) {\r\n                result.widget = \"dxButton\"\r\n            }\r\n            if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\r\n                result.compactMode = {\r\n                    showText: \"inMenu\"\r\n                }\r\n            }\r\n        }\r\n        if (commandName && !result.name) {\r\n            extend(result, {\r\n                name: commandName\r\n            })\r\n        }\r\n        result.location = ensureDefined(result.location, \"before\");\r\n        if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\r\n            if (\"dxButton\" === result.widget) {\r\n                extend(true, result, {\r\n                    options: {\r\n                        stylingMode: \"text\"\r\n                    }\r\n                })\r\n            }\r\n            if (\"dxSelectBox\" === result.widget) {\r\n                extend(true, result, {\r\n                    options: {\r\n                        stylingMode: \"filled\"\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _isDefaultItem(commandName) {\r\n        return !!DEFAULT_ITEM_CONFIGS[commandName]\r\n    }\r\n    _createCommandItem(command) {\r\n        return {\r\n            widget: \"dxButton\",\r\n            options: {\r\n                text: command.text,\r\n                hint: command.hint,\r\n                commandText: command.text,\r\n                icon: command.icon,\r\n                stylingMode: \"text\",\r\n                onClick: e => this._executeCommand(command)\r\n            }\r\n        }\r\n    }\r\n    _createSeparatorItem() {\r\n        return {\r\n            template: (data, index, element) => {\r\n                $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS)\r\n            }\r\n        }\r\n    }\r\n    _createViewModeItem() {\r\n        var commandItems = [\"details\", \"thumbnails\"].map(name => {\r\n            var {\r\n                text: text,\r\n                icon: icon\r\n            } = this._commandManager.getCommandByName(name);\r\n            return {\r\n                name: name,\r\n                text: text,\r\n                icon: icon\r\n            }\r\n        });\r\n        var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\r\n        return {\r\n            cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\r\n            widget: \"dxDropDownButton\",\r\n            options: {\r\n                items: commandItems,\r\n                keyExpr: \"name\",\r\n                selectedItemKey: this.option(\"itemViewMode\"),\r\n                displayExpr: \" \",\r\n                hint: commandItems[selectedIndex].text,\r\n                stylingMode: \"text\",\r\n                showArrowIcon: false,\r\n                useSelectMode: true,\r\n                dropDownOptions: {\r\n                    container: this._$viewSwitcherPopup\r\n                },\r\n                onItemClick: e => this._executeCommand(e.itemData.name)\r\n            }\r\n        }\r\n    }\r\n    _configureHintForCompactMode(item) {\r\n        item.options.hint = \"\";\r\n        item.compactMode.options = item.compactMode.options || {};\r\n        item.compactMode.options.hint = item.options.text\r\n    }\r\n    _checkCompactMode(toolbar) {\r\n        if (toolbar.compactMode) {\r\n            this._toggleCompactMode(toolbar, false)\r\n        }\r\n        var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\r\n        if (toolbar.compactMode !== useCompactMode) {\r\n            if (!toolbar.compactMode) {\r\n                this._toggleCompactMode(toolbar, useCompactMode)\r\n            }\r\n            toolbar.compactMode = useCompactMode\r\n        } else if (toolbar.compactMode) {\r\n            this._toggleCompactMode(toolbar, true)\r\n        }\r\n    }\r\n    _toolbarHasItemsOverflow(toolbar) {\r\n        var toolbarWidth = getWidth(toolbar.$element());\r\n        var itemsWidth = toolbar._getItemsWidth();\r\n        return toolbarWidth < itemsWidth\r\n    }\r\n    _toggleCompactMode(toolbar, useCompactMode) {\r\n        var hasModifications = false;\r\n        var items = toolbar.option(\"items\");\r\n        items.forEach(item => {\r\n            if (item.compactMode) {\r\n                var optionsSource = null;\r\n                if (useCompactMode) {\r\n                    item.saved = this._getCompactModeOptions(item, item._available);\r\n                    optionsSource = item.compactMode\r\n                } else {\r\n                    optionsSource = item.saved\r\n                }\r\n                var options = this._getCompactModeOptions(optionsSource, item._available);\r\n                extend(true, item, options);\r\n                hasModifications = true\r\n            }\r\n        });\r\n        hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\r\n        if (hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        this._updateSeparatorsVisibility(items, toolbar)\r\n    }\r\n    _getCompactModeOptions(_ref, available) {\r\n        var {\r\n            showText: showText,\r\n            locateInMenu: locateInMenu,\r\n            options: options\r\n        } = _ref;\r\n        return {\r\n            visible: available,\r\n            showText: ensureDefined(showText, \"always\"),\r\n            locateInMenu: ensureDefined(locateInMenu, \"never\"),\r\n            options: {\r\n                hint: null === options || void 0 === options ? void 0 : options.hint\r\n            }\r\n        }\r\n    }\r\n    _ensureAvailableCommandsVisible(toolbar) {\r\n        var hasModifications = false;\r\n        var items = toolbar.option(\"items\");\r\n        items.forEach(item => {\r\n            if (\"separator\" !== item.name) {\r\n                var itemVisible = item._available;\r\n                this._setItemVisibleAvailable(item);\r\n                if (item._available !== itemVisible) {\r\n                    hasModifications = true\r\n                }\r\n            }\r\n        });\r\n        hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\r\n        if (hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        this._updateSeparatorsVisibility(items, toolbar)\r\n    }\r\n    _setItemVisibleAvailable(item) {\r\n        var _item$originalItemDat;\r\n        var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\r\n        item._available = this._isToolbarItemAvailable(item);\r\n        item.visible = isDefined(originalVisible) ? originalVisible : item._available\r\n    }\r\n    _fileToolbarHasEffectiveItems() {\r\n        var items = this._fileToolbar.option(\"items\");\r\n        return items.some(item => this._isFileToolbarItemAvailable(item))\r\n    }\r\n    _executeCommand(command) {\r\n        this._commandManager.executeCommand(command)\r\n    }\r\n    _isToolbarItemAvailable(toolbarItem) {\r\n        if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\r\n            return ensureDefined(toolbarItem.visible, true)\r\n        }\r\n        if (\"refresh\" === toolbarItem.name) {\r\n            return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar\r\n        }\r\n        if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\r\n            return true\r\n        }\r\n        return this._isCommandAvailable(toolbarItem.name)\r\n    }\r\n    _isFileToolbarItemAvailable(_ref2) {\r\n        var {\r\n            name: name,\r\n            visible: visible\r\n        } = _ref2;\r\n        return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._isCommandAvailable(name)\r\n    }\r\n    _isCommandAvailable(name) {\r\n        return this._commandManager.isCommandAvailable(name, this.option(\"contextItems\"))\r\n    }\r\n    _updateItemInToolbar(toolbar, commandName, options) {\r\n        toolbar.beginUpdate();\r\n        var items = toolbar.option(\"items\");\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (item.name === commandName) {\r\n                toolbar.option(\"items[\".concat(i, \"]\"), options);\r\n                break\r\n            }\r\n        }\r\n        toolbar.endUpdate()\r\n    }\r\n    _raiseItemClicked(args) {\r\n        var changedArgs = extend(true, {}, args);\r\n        changedArgs.itemData = args.itemData.originalItemData;\r\n        this._itemClickedAction(changedArgs)\r\n    }\r\n    _createItemClickedAction() {\r\n        this._itemClickedAction = this._createActionByOption(\"onItemClick\")\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            commandManager: null,\r\n            generalItems: [],\r\n            fileItems: [],\r\n            contextItems: [],\r\n            itemViewMode: \"details\",\r\n            onItemClick: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"commandManager\":\r\n            case \"itemViewMode\":\r\n            case \"generalItems\":\r\n            case \"fileItems\":\r\n                this.repaint();\r\n                break;\r\n            case \"contextItems\":\r\n                this._update();\r\n                break;\r\n            case \"onItemClick\":\r\n                this._itemClickedAction = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    updateItemPermissions() {\r\n        this.repaint();\r\n        this._restoreRefreshItemState()\r\n    }\r\n    _restoreRefreshItemState() {\r\n        this.updateRefreshItem(this._refreshItemState.message, this._refreshItemState.status)\r\n    }\r\n    updateRefreshItem(message, status) {\r\n        var generalToolbarOptions = null;\r\n        var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\r\n        var showText = \"inMenu\";\r\n        this._isRefreshVisibleInFileToolbar = false;\r\n        this._refreshItemState = {\r\n            message: message,\r\n            status: status\r\n        };\r\n        if (\"default\" === status) {\r\n            generalToolbarOptions = {\r\n                options: {\r\n                    icon: REFRESH_ICON_MAP.default\r\n                }\r\n            }\r\n        } else {\r\n            generalToolbarOptions = {\r\n                options: {\r\n                    icon: REFRESH_ICON_MAP[status]\r\n                }\r\n            };\r\n            this._isRefreshVisibleInFileToolbar = true;\r\n            text = message;\r\n            showText = \"always\"\r\n        }\r\n        var fileToolbarOptions = extend({}, generalToolbarOptions, {\r\n            visible: this._isRefreshVisibleInFileToolbar\r\n        });\r\n        this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\r\n        this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText)\r\n    }\r\n    _updateRefreshItemText(isDeferredUpdate, text, showText) {\r\n        var options = {\r\n            showText: showText,\r\n            options: {\r\n                text: text\r\n            }\r\n        };\r\n        if (isDeferredUpdate) {\r\n            return setTimeout(() => {\r\n                this._applyRefreshItemOptions(options);\r\n                this._refreshItemTextTimeout = void 0\r\n            }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY)\r\n        } else {\r\n            if (this._refreshItemTextTimeout) {\r\n                clearTimeout(this._refreshItemTextTimeout)\r\n            }\r\n            this._applyRefreshItemOptions(options);\r\n            return\r\n        }\r\n    }\r\n    _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\r\n        if (!fileToolbarOptions) {\r\n            fileToolbarOptions = extend({}, generalToolbarOptions)\r\n        }\r\n        this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\r\n        this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions)\r\n    }\r\n    _update() {\r\n        var showGeneralToolbar = 0 === this.option(\"contextItems\").length || !this._fileToolbarHasEffectiveItems();\r\n        if (this._generalToolbarVisible !== showGeneralToolbar) {\r\n            this._generalToolbar.option(\"visible\", showGeneralToolbar);\r\n            this._fileToolbar.option(\"visible\", !showGeneralToolbar);\r\n            this._generalToolbarVisible = showGeneralToolbar;\r\n            this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\r\n            this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar)\r\n        }\r\n        var toolbar = this._getVisibleToolbar();\r\n        this._ensureAvailableCommandsVisible(toolbar);\r\n        this._checkCompactMode(toolbar)\r\n    }\r\n    get _commandManager() {\r\n        return this.option(\"commandManager\")\r\n    }\r\n}\r\nexport default FileManagerToolbar;\r\n"]},"metadata":{},"sourceType":"module"}