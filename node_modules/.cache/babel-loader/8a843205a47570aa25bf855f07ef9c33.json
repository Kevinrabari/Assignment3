{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../core/utils/date\";\nimport { getRecurrenceProcessor } from \"../../recurrence\";\nimport { wrapToArray } from \"../../../../core/utils/array\";\nimport { map, each } from \"../../../../core/utils/iterator\";\nimport { isFunction, isDefined } from \"../../../../core/utils/type\";\nimport query from \"../../../../data/query\";\nimport { createAppointmentAdapter } from \"../../appointmentAdapter\";\nimport { isDateAndTimeView as calculateIsDateAndTimeView, isSupportMultiDayAppointments } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getResourcesDataByGroups } from \"../../resources/utils\";\nimport { compareDateWithStartDayHour, compareDateWithEndDayHour, getAppointmentTakesSeveralDays, _appointmentPartInInterval, getRecurrenceException } from \"./utils\";\nimport getDatesWithoutTime from \"../../../../renovation/ui/scheduler/utils/filtering/getDatesWithoutTime\";\nimport { getAppointmentTakesAllDay } from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentFilterBaseStrategy {\n  constructor(options) {\n    this.options = options;\n    this.dataAccessors = this.options.dataAccessors;\n\n    this._init();\n  }\n\n  get strategyName() {\n    return FilterStrategies.standard;\n  }\n\n  get timeZoneCalculator() {\n    return this.options.timeZoneCalculator;\n  }\n\n  get viewStartDayHour() {\n    return this.options.startDayHour;\n  }\n\n  get viewEndDayHour() {\n    return this.options.endDayHour;\n  }\n\n  get timezone() {\n    return this.options.timezone;\n  }\n\n  get firstDayOfWeek() {\n    return this.options.firstDayOfWeek;\n  }\n\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n\n  get loadedResources() {\n    return this._resolveOption(\"loadedResources\");\n  }\n\n  get supportAllDayRow() {\n    return this._resolveOption(\"supportAllDayRow\");\n  }\n\n  get viewType() {\n    return this._resolveOption(\"viewType\");\n  }\n\n  get viewDirection() {\n    return this._resolveOption(\"viewDirection\");\n  }\n\n  get dateRange() {\n    return this._resolveOption(\"dateRange\");\n  }\n\n  get groupCount() {\n    return this._resolveOption(\"groupCount\");\n  }\n\n  get viewDataProvider() {\n    return this._resolveOption(\"viewDataProvider\");\n  }\n\n  get allDayPanelMode() {\n    return this._resolveOption(\"allDayPanelMode\");\n  }\n\n  _resolveOption(name) {\n    var result = this.options[name];\n    return \"function\" === typeof result ? result() : result;\n  }\n\n  _init() {\n    this.setDataAccessors(this.dataAccessors);\n  }\n\n  filter(preparedItems) {\n    var dateRange = this.dateRange;\n    var allDay;\n\n    if (!this.showAllDayPanel && this.supportAllDayRow) {\n      allDay = false;\n    }\n\n    return this.filterLoadedAppointments({\n      startDayHour: this.viewStartDayHour,\n      endDayHour: this.viewEndDayHour,\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour,\n      min: dateRange[0],\n      max: dateRange[1],\n      resources: this.loadedResources,\n      allDay: allDay,\n      supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\n      firstDayOfWeek: this.firstDayOfWeek\n    }, preparedItems);\n  }\n\n  hasAllDayAppointments(filteredItems, preparedItems) {\n    var adapters = filteredItems.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\n    var result = false;\n    each(adapters, (_, item) => {\n      if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)) {\n        result = true;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  setDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n  }\n\n  _createAllDayAppointmentFilter(filterOptions) {\n    var {\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour\n    } = filterOptions;\n    return [[appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode)]];\n  }\n\n  _createCombinedFilter(filterOptions) {\n    var min = new Date(filterOptions.min);\n    var max = new Date(filterOptions.max);\n    var {\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour,\n      resources: resources,\n      firstDayOfWeek: firstDayOfWeek,\n      checkIntersectViewport: checkIntersectViewport,\n      supportMultiDayAppointments: supportMultiDayAppointments\n    } = filterOptions;\n    var [trimMin, trimMax] = getDatesWithoutTime(min, max);\n    var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\n    return [[appointment => {\n      var _appointment$visible;\n\n      var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\n\n      if (!appointmentVisible) {\n        return false;\n      }\n\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        hasRecurrenceRule: hasRecurrenceRule\n      } = appointment;\n\n      if (!hasRecurrenceRule) {\n        if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\n          return false;\n        }\n      }\n\n      var recurrenceRule;\n\n      if (useRecurrence) {\n        recurrenceRule = appointment.recurrenceRule;\n      }\n\n      var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode);\n      var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\n      var isAllDay = appointment.allDay;\n      var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\n\n      if (null !== resources && void 0 !== resources && resources.length && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\n        return false;\n      }\n\n      if (appointmentTakesAllDay && false === filterOptions.allDay) {\n        return false;\n      }\n\n      if (hasRecurrenceRule) {\n        var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\n\n        if (!this._filterAppointmentByRRule({\n          startDate: startDate,\n          endDate: endDate,\n          recurrenceRule: recurrenceRule,\n          recurrenceException: recurrenceException,\n          allDay: appointmentTakesAllDay\n        }, min, max, startDayHour, endDayHour, firstDayOfWeek)) {\n          return false;\n        }\n      }\n\n      if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\n        if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\n          return false;\n        }\n      }\n\n      if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\n        if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\n          return false;\n        }\n      }\n\n      if (isDefined(endDayHour)) {\n        if (!compareDateWithEndDayHour({\n          startDate: startDate,\n          endDate: endDate,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: viewStartDayHour,\n          viewEndDayHour: viewEndDayHour,\n          allDay: appointmentTakesAllDay,\n          severalDays: appointmentTakesSeveralDays,\n          min: min,\n          max: max,\n          checkIntersectViewport: checkIntersectViewport\n        })) {\n          return false;\n        }\n      }\n\n      if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\n        if (endDate < min && useRecurrence && !hasRecurrenceRule) {\n          return false;\n        }\n      }\n\n      return true;\n    }]];\n  }\n\n  _createAppointmentFilter(filterOptions) {\n    return this._createCombinedFilter(filterOptions);\n  }\n\n  _filterAppointmentByResources(appointment, resources) {\n    var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\n      var resourceGetter = this.dataAccessors.resources.getter[resourceName];\n      var resource;\n\n      if (isFunction(resourceGetter)) {\n        resource = resourceGetter(appointment);\n      }\n\n      var appointmentResourceValues = wrapToArray(resource);\n      var resourceData = map(resources[resourceIndex].items, item => item.id);\n\n      for (var j = 0; j < appointmentResourceValues.length; j++) {\n        if (resourceData.includes(appointmentResourceValues[j])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var result = false;\n\n    for (var i = 0; i < resources.length; i++) {\n      var resourceName = resources[i].name;\n      result = checkAppointmentResourceValues(resourceName, i);\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    return result;\n  }\n\n  _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\n    var recurrenceRule = appointment.recurrenceRule;\n    var recurrenceException = appointment.recurrenceException;\n    var allDay = appointment.allDay;\n    var result = true;\n    var appointmentStartDate = appointment.startDate;\n    var appointmentEndDate = appointment.endDate;\n    var recurrenceProcessor = getRecurrenceProcessor();\n\n    if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\n      var [trimMin, trimMax] = getDatesWithoutTime(min, max);\n      min = trimMin;\n      max = new Date(trimMax.getTime() - toMs(\"minute\"));\n    }\n\n    if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = appointmentEndDate > min && appointmentStartDate <= max;\n    }\n\n    if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = recurrenceProcessor.hasRecurrence({\n        rule: recurrenceRule,\n        exception: recurrenceException,\n        start: appointmentStartDate,\n        end: appointmentEndDate,\n        min: min,\n        max: max,\n        firstDayOfWeek: firstDayOfWeek\n      });\n    }\n\n    return result;\n  }\n\n  filterLoadedAppointments(filterOptions, preparedItems) {\n    var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\n    return filteredItems.map(_ref => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref;\n      return rawAppointment;\n    });\n  }\n\n  filterPreparedItems(filterOptions, preparedItems) {\n    var combinedFilter = this._createAppointmentFilter(filterOptions);\n\n    return query(preparedItems).filter(combinedFilter).toArray();\n  }\n\n  filterAllDayAppointments(filterOptions, preparedItems) {\n    var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\n\n    return query(preparedItems).filter(combinedFilter).toArray().map(_ref2 => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref2;\n      return rawAppointment;\n    });\n  }\n\n}\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\n  get strategyName() {\n    return FilterStrategies.virtual;\n  }\n\n  get resources() {\n    return this.options.resources;\n  }\n\n  filter(preparedItems) {\n    var hourMs = toMs(\"hour\");\n    var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\n    var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\n    var isAllDayWorkspace = !this.supportAllDayRow;\n    var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\n    var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\n    var filterOptions = [];\n    var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n    groupsInfo.forEach(item => {\n      var groupIndex = item.groupIndex;\n      var groupStartDate = item.startDate;\n      var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n      var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\n      var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\n\n      var resources = this._getPrerenderFilterResources(groupIndex);\n\n      var hasAllDayPanel = this.viewDataProvider.hasGroupAllDayPanel(groupIndex);\n      var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && hasAllDayPanel;\n      filterOptions.push({\n        isVirtualScrolling: true,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: groupStartDate,\n        max: groupEndDate,\n        supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\n        allDay: supportAllDayAppointment,\n        resources: resources,\n        firstDayOfWeek: this.firstDayOfWeek,\n        checkIntersectViewport: checkIntersectViewport\n      });\n    });\n    return this.filterLoadedAppointments({\n      filterOptions: filterOptions,\n      groupCount: this.groupCount\n    }, preparedItems);\n  }\n\n  filterPreparedItems(_ref3, preparedItems) {\n    var {\n      filterOptions: filterOptions,\n      groupCount: groupCount\n    } = _ref3;\n    var combinedFilters = [];\n    var itemsToFilter = preparedItems;\n    var needPreFilter = groupCount > 0;\n\n    if (needPreFilter) {\n      itemsToFilter = itemsToFilter.filter(_ref4 => {\n        var {\n          rawAppointment: rawAppointment\n        } = _ref4;\n\n        for (var i = 0; i < filterOptions.length; ++i) {\n          var {\n            resources: resources\n          } = filterOptions[i];\n\n          if (this._filterAppointmentByResources(rawAppointment, resources)) {\n            return true;\n          }\n        }\n      });\n    }\n\n    filterOptions.forEach(option => {\n      combinedFilters.length && combinedFilters.push(\"or\");\n\n      var filter = this._createAppointmentFilter(option);\n\n      combinedFilters.push(filter);\n    });\n    return query(itemsToFilter).filter(combinedFilters).toArray();\n  }\n\n  hasAllDayAppointments(adapters, preparedItems) {\n    return this.filterAllDayAppointments({\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour\n    }, preparedItems).length > 0;\n  }\n\n  _getPrerenderFilterResources(groupIndex) {\n    var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n    return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup]);\n  }\n\n}","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js"],"names":["dateUtils","getRecurrenceProcessor","wrapToArray","map","each","isFunction","isDefined","query","createAppointmentAdapter","isDateAndTimeView","calculateIsDateAndTimeView","isSupportMultiDayAppointments","getResourcesDataByGroups","compareDateWithStartDayHour","compareDateWithEndDayHour","getAppointmentTakesSeveralDays","_appointmentPartInInterval","getRecurrenceException","getDatesWithoutTime","getAppointmentTakesAllDay","toMs","dateToMilliseconds","FilterStrategies","virtual","standard","AppointmentFilterBaseStrategy","constructor","options","dataAccessors","_init","strategyName","timeZoneCalculator","viewStartDayHour","startDayHour","viewEndDayHour","endDayHour","timezone","firstDayOfWeek","showAllDayPanel","loadedResources","_resolveOption","supportAllDayRow","viewType","viewDirection","dateRange","groupCount","viewDataProvider","allDayPanelMode","name","result","setDataAccessors","filter","preparedItems","allDay","filterLoadedAppointments","min","max","resources","supportMultiDayAppointments","hasAllDayAppointments","filteredItems","adapters","item","_","_createAllDayAppointmentFilter","filterOptions","appointment","_createCombinedFilter","Date","checkIntersectViewport","trimMin","trimMax","useRecurrence","getter","recurrenceRule","_appointment$visible","appointmentVisible","visible","startDate","endDate","hasRecurrenceRule","sameDate","appointmentTakesAllDay","appointmentTakesSeveralDays","isAllDay","isLongAppointment","length","_filterAppointmentByResources","rawAppointment","recurrenceException","_filterAppointmentByRRule","isVirtualScrolling","severalDays","_createAppointmentFilter","checkAppointmentResourceValues","resourceName","resourceIndex","resourceGetter","resource","appointmentResourceValues","resourceData","items","id","j","includes","i","appointmentStartDate","appointmentEndDate","recurrenceProcessor","getTime","isValidRecurrenceRule","hasRecurrence","rule","exception","start","end","filterPreparedItems","_ref","combinedFilter","toArray","filterAllDayAppointments","_ref2","AppointmentFilterVirtualStrategy","hourMs","isCalculateStartAndEndDayHour","isAllDayWorkspace","showAllDayAppointments","endViewDate","getLastViewDateByEndDayHour","groupsInfo","getCompletedGroupsInfo","forEach","groupIndex","groupStartDate","groupEndDate","Math","getHours","getMinutes","_getPrerenderFilterResources","hasAllDayPanel","hasGroupAllDayPanel","supportAllDayAppointment","push","_ref3","combinedFilters","itemsToFilter","needPreFilter","_ref4","option","cellGroup","getCellsGroup"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    getRecurrenceProcessor\r\n} from \"../../recurrence\";\r\nimport {\r\n    wrapToArray\r\n} from \"../../../../core/utils/array\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isFunction,\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport query from \"../../../../data/query\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../appointmentAdapter\";\r\nimport {\r\n    isDateAndTimeView as calculateIsDateAndTimeView,\r\n    isSupportMultiDayAppointments\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getResourcesDataByGroups\r\n} from \"../../resources/utils\";\r\nimport {\r\n    compareDateWithStartDayHour,\r\n    compareDateWithEndDayHour,\r\n    getAppointmentTakesSeveralDays,\r\n    _appointmentPartInInterval,\r\n    getRecurrenceException\r\n} from \"./utils\";\r\nimport getDatesWithoutTime from \"../../../../renovation/ui/scheduler/utils/filtering/getDatesWithoutTime\";\r\nimport {\r\n    getAppointmentTakesAllDay\r\n} from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nexport class AppointmentFilterBaseStrategy {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this._init()\r\n    }\r\n    get strategyName() {\r\n        return FilterStrategies.standard\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.options.timeZoneCalculator\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.startDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.endDayHour\r\n    }\r\n    get timezone() {\r\n        return this.options.timezone\r\n    }\r\n    get firstDayOfWeek() {\r\n        return this.options.firstDayOfWeek\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get loadedResources() {\r\n        return this._resolveOption(\"loadedResources\")\r\n    }\r\n    get supportAllDayRow() {\r\n        return this._resolveOption(\"supportAllDayRow\")\r\n    }\r\n    get viewType() {\r\n        return this._resolveOption(\"viewType\")\r\n    }\r\n    get viewDirection() {\r\n        return this._resolveOption(\"viewDirection\")\r\n    }\r\n    get dateRange() {\r\n        return this._resolveOption(\"dateRange\")\r\n    }\r\n    get groupCount() {\r\n        return this._resolveOption(\"groupCount\")\r\n    }\r\n    get viewDataProvider() {\r\n        return this._resolveOption(\"viewDataProvider\")\r\n    }\r\n    get allDayPanelMode() {\r\n        return this._resolveOption(\"allDayPanelMode\")\r\n    }\r\n    _resolveOption(name) {\r\n        var result = this.options[name];\r\n        return \"function\" === typeof result ? result() : result\r\n    }\r\n    _init() {\r\n        this.setDataAccessors(this.dataAccessors)\r\n    }\r\n    filter(preparedItems) {\r\n        var dateRange = this.dateRange;\r\n        var allDay;\r\n        if (!this.showAllDayPanel && this.supportAllDayRow) {\r\n            allDay = false\r\n        }\r\n        return this.filterLoadedAppointments({\r\n            startDayHour: this.viewStartDayHour,\r\n            endDayHour: this.viewEndDayHour,\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour,\r\n            min: dateRange[0],\r\n            max: dateRange[1],\r\n            resources: this.loadedResources,\r\n            allDay: allDay,\r\n            supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\r\n            firstDayOfWeek: this.firstDayOfWeek\r\n        }, preparedItems)\r\n    }\r\n    hasAllDayAppointments(filteredItems, preparedItems) {\r\n        var adapters = filteredItems.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\r\n        var result = false;\r\n        each(adapters, (_, item) => {\r\n            if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)) {\r\n                result = true;\r\n                return false\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    setDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors\r\n    }\r\n    _createAllDayAppointmentFilter(filterOptions) {\r\n        var {\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour\r\n        } = filterOptions;\r\n        return [\r\n            [appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode)]\r\n        ]\r\n    }\r\n    _createCombinedFilter(filterOptions) {\r\n        var min = new Date(filterOptions.min);\r\n        var max = new Date(filterOptions.max);\r\n        var {\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour,\r\n            resources: resources,\r\n            firstDayOfWeek: firstDayOfWeek,\r\n            checkIntersectViewport: checkIntersectViewport,\r\n            supportMultiDayAppointments: supportMultiDayAppointments\r\n        } = filterOptions;\r\n        var [trimMin, trimMax] = getDatesWithoutTime(min, max);\r\n        var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\r\n        return [\r\n            [appointment => {\r\n                var _appointment$visible;\r\n                var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\r\n                if (!appointmentVisible) {\r\n                    return false\r\n                }\r\n                var {\r\n                    startDate: startDate,\r\n                    endDate: endDate,\r\n                    hasRecurrenceRule: hasRecurrenceRule\r\n                } = appointment;\r\n                if (!hasRecurrenceRule) {\r\n                    if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\r\n                        return false\r\n                    }\r\n                }\r\n                var recurrenceRule;\r\n                if (useRecurrence) {\r\n                    recurrenceRule = appointment.recurrenceRule\r\n                }\r\n                var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode);\r\n                var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\r\n                var isAllDay = appointment.allDay;\r\n                var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\r\n                if (null !== resources && void 0 !== resources && resources.length && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\r\n                    return false\r\n                }\r\n                if (appointmentTakesAllDay && false === filterOptions.allDay) {\r\n                    return false\r\n                }\r\n                if (hasRecurrenceRule) {\r\n                    var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\r\n                    if (!this._filterAppointmentByRRule({\r\n                            startDate: startDate,\r\n                            endDate: endDate,\r\n                            recurrenceRule: recurrenceRule,\r\n                            recurrenceException: recurrenceException,\r\n                            allDay: appointmentTakesAllDay\r\n                        }, min, max, startDayHour, endDayHour, firstDayOfWeek)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\r\n                    if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\r\n                    if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(endDayHour)) {\r\n                    if (!compareDateWithEndDayHour({\r\n                            startDate: startDate,\r\n                            endDate: endDate,\r\n                            startDayHour: startDayHour,\r\n                            endDayHour: endDayHour,\r\n                            viewStartDayHour: viewStartDayHour,\r\n                            viewEndDayHour: viewEndDayHour,\r\n                            allDay: appointmentTakesAllDay,\r\n                            severalDays: appointmentTakesSeveralDays,\r\n                            min: min,\r\n                            max: max,\r\n                            checkIntersectViewport: checkIntersectViewport\r\n                        })) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\r\n                    if (endDate < min && useRecurrence && !hasRecurrenceRule) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }]\r\n        ]\r\n    }\r\n    _createAppointmentFilter(filterOptions) {\r\n        return this._createCombinedFilter(filterOptions)\r\n    }\r\n    _filterAppointmentByResources(appointment, resources) {\r\n        var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\r\n            var resourceGetter = this.dataAccessors.resources.getter[resourceName];\r\n            var resource;\r\n            if (isFunction(resourceGetter)) {\r\n                resource = resourceGetter(appointment)\r\n            }\r\n            var appointmentResourceValues = wrapToArray(resource);\r\n            var resourceData = map(resources[resourceIndex].items, item => item.id);\r\n            for (var j = 0; j < appointmentResourceValues.length; j++) {\r\n                if (resourceData.includes(appointmentResourceValues[j])) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        };\r\n        var result = false;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            var resourceName = resources[i].name;\r\n            result = checkAppointmentResourceValues(resourceName, i);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\r\n        var recurrenceRule = appointment.recurrenceRule;\r\n        var recurrenceException = appointment.recurrenceException;\r\n        var allDay = appointment.allDay;\r\n        var result = true;\r\n        var appointmentStartDate = appointment.startDate;\r\n        var appointmentEndDate = appointment.endDate;\r\n        var recurrenceProcessor = getRecurrenceProcessor();\r\n        if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\r\n            var [trimMin, trimMax] = getDatesWithoutTime(min, max);\r\n            min = trimMin;\r\n            max = new Date(trimMax.getTime() - toMs(\"minute\"))\r\n        }\r\n        if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = appointmentEndDate > min && appointmentStartDate <= max\r\n        }\r\n        if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = recurrenceProcessor.hasRecurrence({\r\n                rule: recurrenceRule,\r\n                exception: recurrenceException,\r\n                start: appointmentStartDate,\r\n                end: appointmentEndDate,\r\n                min: min,\r\n                max: max,\r\n                firstDayOfWeek: firstDayOfWeek\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    filterLoadedAppointments(filterOptions, preparedItems) {\r\n        var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\r\n        return filteredItems.map(_ref => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref;\r\n            return rawAppointment\r\n        })\r\n    }\r\n    filterPreparedItems(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAppointmentFilter(filterOptions);\r\n        return query(preparedItems).filter(combinedFilter).toArray()\r\n    }\r\n    filterAllDayAppointments(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\r\n        return query(preparedItems).filter(combinedFilter).toArray().map(_ref2 => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref2;\r\n            return rawAppointment\r\n        })\r\n    }\r\n}\r\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\r\n    get strategyName() {\r\n        return FilterStrategies.virtual\r\n    }\r\n    get resources() {\r\n        return this.options.resources\r\n    }\r\n    filter(preparedItems) {\r\n        var hourMs = toMs(\"hour\");\r\n        var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\r\n        var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\r\n        var isAllDayWorkspace = !this.supportAllDayRow;\r\n        var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\r\n        var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\r\n        var filterOptions = [];\r\n        var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\r\n        groupsInfo.forEach(item => {\r\n            var groupIndex = item.groupIndex;\r\n            var groupStartDate = item.startDate;\r\n            var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\r\n            var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\r\n            var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\r\n            var resources = this._getPrerenderFilterResources(groupIndex);\r\n            var hasAllDayPanel = this.viewDataProvider.hasGroupAllDayPanel(groupIndex);\r\n            var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && hasAllDayPanel;\r\n            filterOptions.push({\r\n                isVirtualScrolling: true,\r\n                startDayHour: startDayHour,\r\n                endDayHour: endDayHour,\r\n                viewStartDayHour: this.viewStartDayHour,\r\n                viewEndDayHour: this.viewEndDayHour,\r\n                min: groupStartDate,\r\n                max: groupEndDate,\r\n                supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\r\n                allDay: supportAllDayAppointment,\r\n                resources: resources,\r\n                firstDayOfWeek: this.firstDayOfWeek,\r\n                checkIntersectViewport: checkIntersectViewport\r\n            })\r\n        });\r\n        return this.filterLoadedAppointments({\r\n            filterOptions: filterOptions,\r\n            groupCount: this.groupCount\r\n        }, preparedItems)\r\n    }\r\n    filterPreparedItems(_ref3, preparedItems) {\r\n        var {\r\n            filterOptions: filterOptions,\r\n            groupCount: groupCount\r\n        } = _ref3;\r\n        var combinedFilters = [];\r\n        var itemsToFilter = preparedItems;\r\n        var needPreFilter = groupCount > 0;\r\n        if (needPreFilter) {\r\n            itemsToFilter = itemsToFilter.filter(_ref4 => {\r\n                var {\r\n                    rawAppointment: rawAppointment\r\n                } = _ref4;\r\n                for (var i = 0; i < filterOptions.length; ++i) {\r\n                    var {\r\n                        resources: resources\r\n                    } = filterOptions[i];\r\n                    if (this._filterAppointmentByResources(rawAppointment, resources)) {\r\n                        return true\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        filterOptions.forEach(option => {\r\n            combinedFilters.length && combinedFilters.push(\"or\");\r\n            var filter = this._createAppointmentFilter(option);\r\n            combinedFilters.push(filter)\r\n        });\r\n        return query(itemsToFilter).filter(combinedFilters).toArray()\r\n    }\r\n    hasAllDayAppointments(adapters, preparedItems) {\r\n        return this.filterAllDayAppointments({\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour\r\n        }, preparedItems).length > 0\r\n    }\r\n    _getPrerenderFilterResources(groupIndex) {\r\n        var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\r\n        return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup])\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}