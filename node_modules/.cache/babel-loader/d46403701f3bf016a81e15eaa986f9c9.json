{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_data-slice.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sliceRepository = exports.dataSlice = void 0;\n\nvar _utils_1 = require(\"../_utils\");\n\nvar dataSlice = function () {\n  function dataSlice(sliceKey, sliceDTO, decode, encode) {\n    var keyIndexById = {},\n        valueIdByKey = {};\n    sliceDTO.KeyIds.forEach(function (keyId, i) {\n      keyIndexById[keyId] = i;\n    });\n    Object.keys(sliceDTO.ValueIds).forEach(function (valueId) {\n      valueIdByKey[sliceDTO.ValueIds[valueId]] = valueId;\n    });\n    this._sliceKey = sliceKey;\n    this._sliceDTO = sliceDTO;\n    this._decode = decode;\n    this._encode = encode;\n    this._keyIndexById = keyIndexById;\n    this._valueIdByKey = valueIdByKey;\n  }\n\n  dataSlice.prototype.getRowCount = function () {\n    return Object.keys(this._sliceDTO.Data).length;\n  };\n\n  dataSlice.prototype.getKey = function () {\n    return this._sliceKey;\n  };\n\n  dataSlice.prototype.getValue = function (rowKey, valueId) {\n    var that = this,\n        dto = that._sliceDTO,\n        valueKey = dto.ValueIds[valueId],\n        rowDTO = that._getRowDTO(rowKey),\n        value = !!rowDTO && valueKey >= 0 ? rowDTO[valueKey] : null;\n\n    return value === undefined ? null : value;\n  };\n\n  dataSlice.prototype.getRowValues = function (rowKey) {\n    var that = this,\n        values = {},\n        valueIdsByKey = that._valueIdByKey,\n        rowDTO = that._getRowDTO(rowKey) || {};\n    Object.keys(rowDTO).forEach(function (key) {\n      values[valueIdsByKey[key]] = rowDTO[key];\n    });\n    return values;\n  };\n\n  dataSlice.prototype.getRowKeyValues = function (rowKey) {\n    var that = this,\n        keyIds = that.getKeyIds(),\n        keyValues = {};\n    keyIds.forEach(function (keyId) {\n      keyValues[keyId] = that.getKeyValue(rowKey, keyId);\n    });\n    return keyValues;\n  };\n\n  dataSlice.prototype._getRowDTO = function (rowKey) {\n    var that = this;\n    return that._sliceDTO.Data[that._stringifyKey(rowKey)];\n  };\n\n  dataSlice.prototype.getKeyValue = function (rowKey, keyId) {\n    if (keyId === undefined) return null;\n    var that = this,\n        keyIndex = that._keyIndexById[keyId];\n    return that._decode(keyId, rowKey[keyIndex]);\n  };\n\n  dataSlice.prototype.getKeyIds = function () {\n    var that = this;\n    return that._sliceDTO.KeyIds;\n  };\n\n  dataSlice.prototype.getValueIds = function () {\n    return Object.keys(this._sliceDTO.ValueIds);\n  };\n\n  dataSlice.prototype.forEach = function (action) {\n    var that = this;\n    Object.keys(that._sliceDTO.Data).forEach(function (key) {\n      return action({\n        sliceKey: that._sliceKey,\n        rowKey: that._parseKey(key)\n      });\n    });\n  };\n\n  dataSlice.prototype.append = function (slice) {\n    var that = this,\n        newRowKeys = [],\n        iterator = {\n      forEach: function (action) {\n        newRowKeys.forEach(function (key) {\n          action({\n            sliceKey: that._sliceKey,\n            rowKey: key\n          });\n        });\n      }\n    };\n    slice.forEach(function (key) {\n      var keyValues = slice.getRowKeyValues(key.rowKey),\n          values = slice.getRowValues(key.rowKey),\n          newRowKey = that.addRow(keyValues, values);\n      newRowKeys.push(newRowKey);\n    });\n    return iterator;\n  };\n\n  dataSlice.prototype.addRow = function (keyValues, values) {\n    var that = this,\n        newRowKey = [],\n        valueIds = that._sliceDTO.ValueIds,\n        encode = that._encode;\n    Object.keys(keyValues).forEach(function (keyId) {\n      newRowKey.push(encode(keyId, keyValues[keyId]));\n    });\n    var valueDTO = {};\n    Object.keys(values).forEach(function (valueId) {\n      var valueKey = valueIds[valueId];\n\n      if (valueKey === undefined) {\n        var count = 0;\n        Object.keys(valueIds).forEach(function (valueId) {\n          count++;\n        });\n        valueKey = count;\n        valueIds[valueId] = valueKey;\n      }\n\n      valueDTO[valueKey] = values[valueId];\n    });\n    that._sliceDTO.Data[that._stringifyKey(newRowKey)] = valueDTO;\n    return newRowKey;\n  };\n\n  dataSlice.prototype._parseKey = function (key) {\n    return JSON.parse(key);\n  };\n\n  dataSlice.prototype._stringifyKey = function (key) {\n    return '[' + key + ']';\n  };\n\n  return dataSlice;\n}();\n\nexports.dataSlice = dataSlice;\n\nvar sliceRepository = function () {\n  function sliceRepository(sliceListDTO, decode, encode) {\n    this._sliceListDTO = sliceListDTO;\n    this._sliceList = [];\n    this._rowKeyConvertMap = {};\n    this._sliceJoinCache = {};\n    this._decode = decode;\n    this._encode = encode;\n\n    this._initialize(decode);\n  }\n\n  sliceRepository.prototype._initialize = function (decode) {\n    var that = this;\n    if (!that._sliceListDTO) return;\n\n    that._sliceListDTO.forEach(function (sliceDTO, index) {\n      var slice = new dataSlice(index, sliceDTO, decode, that._encode);\n\n      that._sliceList.push(slice);\n    });\n  };\n\n  sliceRepository.prototype.getAll = function () {\n    return this._sliceList;\n  };\n\n  sliceRepository.prototype.getKey = function (keyIds) {\n    var slice = this._getByKeyIds(keyIds);\n\n    return slice ? this._sliceList.indexOf(slice) : -1;\n  };\n\n  sliceRepository.prototype.get = function (vsKey) {\n    return this._sliceList[vsKey];\n  };\n\n  sliceRepository.prototype.getOrCreate = function (keyIds) {\n    var that = this,\n        slice = that._getByKeyIds(keyIds);\n\n    if (!slice) {\n      var sliceDTO = {\n        KeyIds: keyIds,\n        ValueIds: {},\n        Data: {}\n      };\n\n      if (keyIds.length == 0) {\n        sliceDTO.Data['[]'] = {};\n      }\n\n      slice = new dataSlice(that._sliceList.length, sliceDTO, that._decode, that._encode);\n\n      that._sliceList.push(slice);\n    }\n\n    return slice;\n  };\n\n  sliceRepository.prototype.findDataRowKey = function (sliceKey, dataRowKey) {\n    var that = this,\n        newRowKey = [],\n        map = that._getConvertMap(dataRowKey.sliceKey, sliceKey);\n\n    for (var i = 0; i < map.length; i++) {\n      newRowKey.push(dataRowKey.rowKey[map[i]]);\n    }\n\n    return {\n      sliceKey: sliceKey,\n      rowKey: newRowKey\n    };\n  };\n\n  sliceRepository.prototype.getCrossValue = function (dataRows, valueId) {\n    var that = this,\n        dataRow1 = dataRows[0],\n        dataRow2 = dataRows[1],\n        sliceKey,\n        value = null;\n    if (!dataRow1) sliceKey = 0;else sliceKey = dataRow2 ? that._joinSliceKey(dataRow1.sliceKey, dataRow2.sliceKey) : dataRow1.sliceKey;\n\n    if (sliceKey >= 0) {\n      var newRowKey = [],\n          map1 = null,\n          map2 = null;\n\n      if (dataRow1) {\n        map1 = that._getConvertMap(dataRow1.sliceKey, sliceKey), map2 = dataRow2 ? that._getConvertMap(dataRow2.sliceKey, sliceKey) : null;\n\n        for (var i = 0; i < map1.length; i++) {\n          var index = map1[i],\n              key = index >= 0 ? dataRow1.rowKey[index] : newRowKey[i];\n          newRowKey.push(key);\n        }\n\n        if (map2 != null) {\n          for (var i = 0; i < map2.length; i++) {\n            var index = map2[i],\n                key = index >= 0 ? dataRow2.rowKey[index] : newRowKey[i];\n            newRowKey[i] = key;\n          }\n        }\n      }\n\n      var slice = that.get(sliceKey);\n      if (slice) value = slice.getValue(newRowKey, valueId);\n    }\n\n    return value;\n  };\n\n  sliceRepository.prototype.getKeyValue = function (dataRow, keyId) {\n    var that = this,\n        slice = that.get(dataRow.sliceKey),\n        value = null;\n\n    if (slice) {\n      value = slice.getKeyValue(dataRow.rowKey, keyId);\n    }\n\n    return value;\n  };\n\n  sliceRepository.prototype.getValue = function (dataRow, valueId) {\n    var that = this,\n        slice = that.get(dataRow.sliceKey),\n        value = null;\n\n    if (slice) {\n      value = slice.getValue(dataRow.rowKey, valueId);\n    }\n\n    return value;\n  };\n\n  sliceRepository.prototype.isEmpty = function () {\n    return this._sliceList.filter(function (s) {\n      if (s.getKeyIds().length === 0) {\n        var values = s.getRowValues([]);\n        return s.getValueIds().filter(function (id) {\n          return values[id] !== null && values[id] !== undefined;\n        }).length !== 0;\n      } else {\n        return s.getRowCount() !== 0;\n      }\n    }).length === 0;\n  };\n\n  sliceRepository.prototype._joinSliceKey = function (key1, key2) {\n    var that = this,\n        joinSliceCacheKey = [key1, key2];\n    if (key2 < key1) joinSliceCacheKey = joinSliceCacheKey.reverse();\n    var joinRes = that._sliceJoinCache[joinSliceCacheKey];\n\n    if (joinRes == undefined) {\n      var slice1 = that.get(key1),\n          slice2 = that.get(key2),\n          keyIds = slice1.getKeyIds().concat(slice2.getKeyIds());\n      joinRes = that.getKey(keyIds);\n      that._sliceJoinCache[joinSliceCacheKey] = joinRes;\n    }\n\n    return joinRes;\n  };\n\n  sliceRepository.prototype._getByKeyIds = function (keyIds) {\n    var that = this,\n        foundSlice = null;\n\n    that._sliceList.forEach(function (slice) {\n      if (_utils_1.areNotOrderedListsEqual(slice.getKeyIds(), keyIds)) {\n        foundSlice = slice;\n        return false;\n      }\n    });\n\n    return foundSlice;\n  };\n\n  sliceRepository.prototype._getConvertMap = function (sliceFromKey, sliceToKey) {\n    var that = this,\n        convertMapCacheKey = [sliceFromKey, sliceToKey];\n    var map = that._rowKeyConvertMap[convertMapCacheKey];\n\n    if (!map) {\n      var fromSlice = that.get(sliceFromKey),\n          toSlice = that.get(sliceToKey);\n      map = [];\n      toSlice.getKeyIds().forEach(function (keyId) {\n        map.push(fromSlice.getKeyIds().indexOf(keyId));\n      });\n      that._rowKeyConvertMap[convertMapCacheKey] = map;\n    }\n\n    return map;\n  };\n\n  return sliceRepository;\n}();\n\nexports.sliceRepository = sliceRepository;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/data/data-storage/_data-slice.js"],"names":["Object","defineProperty","exports","value","sliceRepository","dataSlice","_utils_1","require","sliceKey","sliceDTO","decode","encode","keyIndexById","valueIdByKey","KeyIds","forEach","keyId","i","keys","ValueIds","valueId","_sliceKey","_sliceDTO","_decode","_encode","_keyIndexById","_valueIdByKey","prototype","getRowCount","Data","length","getKey","getValue","rowKey","that","dto","valueKey","rowDTO","_getRowDTO","undefined","getRowValues","values","valueIdsByKey","key","getRowKeyValues","keyIds","getKeyIds","keyValues","getKeyValue","_stringifyKey","keyIndex","getValueIds","action","_parseKey","append","slice","newRowKeys","iterator","newRowKey","addRow","push","valueIds","valueDTO","count","JSON","parse","sliceListDTO","_sliceListDTO","_sliceList","_rowKeyConvertMap","_sliceJoinCache","_initialize","index","getAll","_getByKeyIds","indexOf","get","vsKey","getOrCreate","findDataRowKey","dataRowKey","map","_getConvertMap","getCrossValue","dataRows","dataRow1","dataRow2","_joinSliceKey","map1","map2","dataRow","isEmpty","filter","s","id","key1","key2","joinSliceCacheKey","reverse","joinRes","slice1","slice2","concat","foundSlice","areNotOrderedListsEqual","sliceFromKey","sliceToKey","convertMapCacheKey","fromSlice","toSlice"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_data-slice.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sliceRepository = exports.dataSlice = void 0;\nvar _utils_1 = require(\"../_utils\");\nvar dataSlice = (function () {\n    function dataSlice(sliceKey, sliceDTO, decode, encode) {\n        var keyIndexById = {}, valueIdByKey = {};\n        sliceDTO.KeyIds.forEach(function (keyId, i) {\n            keyIndexById[keyId] = i;\n        });\n        Object.keys(sliceDTO.ValueIds).forEach(function (valueId) {\n            valueIdByKey[sliceDTO.ValueIds[valueId]] = valueId;\n        });\n        this._sliceKey = sliceKey;\n        this._sliceDTO = sliceDTO;\n        this._decode = decode;\n        this._encode = encode;\n        this._keyIndexById = keyIndexById;\n        this._valueIdByKey = valueIdByKey;\n    }\n    dataSlice.prototype.getRowCount = function () {\n        return Object.keys(this._sliceDTO.Data).length;\n    };\n    dataSlice.prototype.getKey = function () {\n        return this._sliceKey;\n    };\n    dataSlice.prototype.getValue = function (rowKey, valueId) {\n        var that = this, dto = that._sliceDTO, valueKey = dto.ValueIds[valueId], rowDTO = that._getRowDTO(rowKey), value = !!rowDTO && valueKey >= 0 ? rowDTO[valueKey] : null;\n        return value === undefined ? null : value;\n    };\n    dataSlice.prototype.getRowValues = function (rowKey) {\n        var that = this, values = {}, valueIdsByKey = that._valueIdByKey, rowDTO = that._getRowDTO(rowKey) || {};\n        Object.keys(rowDTO).forEach(function (key) {\n            values[valueIdsByKey[key]] = rowDTO[key];\n        });\n        return values;\n    };\n    dataSlice.prototype.getRowKeyValues = function (rowKey) {\n        var that = this, keyIds = that.getKeyIds(), keyValues = {};\n        keyIds.forEach(function (keyId) {\n            keyValues[keyId] = that.getKeyValue(rowKey, keyId);\n        });\n        return keyValues;\n    };\n    dataSlice.prototype._getRowDTO = function (rowKey) {\n        var that = this;\n        return that._sliceDTO.Data[that._stringifyKey(rowKey)];\n    };\n    dataSlice.prototype.getKeyValue = function (rowKey, keyId) {\n        if (keyId === undefined)\n            return null;\n        var that = this, keyIndex = that._keyIndexById[keyId];\n        return that._decode(keyId, rowKey[keyIndex]);\n    };\n    dataSlice.prototype.getKeyIds = function () {\n        var that = this;\n        return that._sliceDTO.KeyIds;\n    };\n    dataSlice.prototype.getValueIds = function () {\n        return Object.keys(this._sliceDTO.ValueIds);\n    };\n    dataSlice.prototype.forEach = function (action) {\n        var that = this;\n        Object.keys(that._sliceDTO.Data).forEach(function (key) {\n            return action({\n                sliceKey: that._sliceKey,\n                rowKey: that._parseKey(key)\n            });\n        });\n    };\n    dataSlice.prototype.append = function (slice) {\n        var that = this, newRowKeys = [], iterator = {\n            forEach: function (action) {\n                newRowKeys.forEach(function (key) {\n                    action({\n                        sliceKey: that._sliceKey,\n                        rowKey: key\n                    });\n                });\n            }\n        };\n        slice.forEach(function (key) {\n            var keyValues = slice.getRowKeyValues(key.rowKey), values = slice.getRowValues(key.rowKey), newRowKey = that.addRow(keyValues, values);\n            newRowKeys.push(newRowKey);\n        });\n        return iterator;\n    };\n    dataSlice.prototype.addRow = function (keyValues, values) {\n        var that = this, newRowKey = [], valueIds = that._sliceDTO.ValueIds, encode = that._encode;\n        Object.keys(keyValues).forEach(function (keyId) {\n            newRowKey.push(encode(keyId, keyValues[keyId]));\n        });\n        var valueDTO = {};\n        Object.keys(values).forEach(function (valueId) {\n            var valueKey = valueIds[valueId];\n            if (valueKey === undefined) {\n                var count = 0;\n                Object.keys(valueIds).forEach(function (valueId) {\n                    count++;\n                });\n                valueKey = count;\n                valueIds[valueId] = valueKey;\n            }\n            valueDTO[valueKey] = values[valueId];\n        });\n        that._sliceDTO.Data[that._stringifyKey(newRowKey)] = valueDTO;\n        return newRowKey;\n    };\n    dataSlice.prototype._parseKey = function (key) {\n        return JSON.parse(key);\n    };\n    dataSlice.prototype._stringifyKey = function (key) {\n        return '[' + key + ']';\n    };\n    return dataSlice;\n}());\nexports.dataSlice = dataSlice;\nvar sliceRepository = (function () {\n    function sliceRepository(sliceListDTO, decode, encode) {\n        this._sliceListDTO = sliceListDTO;\n        this._sliceList = [];\n        this._rowKeyConvertMap = {};\n        this._sliceJoinCache = {};\n        this._decode = decode;\n        this._encode = encode;\n        this._initialize(decode);\n    }\n    sliceRepository.prototype._initialize = function (decode) {\n        var that = this;\n        if (!that._sliceListDTO)\n            return;\n        that._sliceListDTO.forEach(function (sliceDTO, index) {\n            var slice = new dataSlice(index, sliceDTO, decode, that._encode);\n            that._sliceList.push(slice);\n        });\n    };\n    sliceRepository.prototype.getAll = function () {\n        return this._sliceList;\n    };\n    sliceRepository.prototype.getKey = function (keyIds) {\n        var slice = this._getByKeyIds(keyIds);\n        return slice ? this._sliceList.indexOf(slice) : -1;\n    };\n    sliceRepository.prototype.get = function (vsKey) {\n        return this._sliceList[vsKey];\n    };\n    sliceRepository.prototype.getOrCreate = function (keyIds) {\n        var that = this, slice = that._getByKeyIds(keyIds);\n        if (!slice) {\n            var sliceDTO = {\n                KeyIds: keyIds,\n                ValueIds: {},\n                Data: {}\n            };\n            if (keyIds.length == 0) {\n                sliceDTO.Data['[]'] = {};\n            }\n            slice = new dataSlice(that._sliceList.length, sliceDTO, that._decode, that._encode);\n            that._sliceList.push(slice);\n        }\n        return slice;\n    };\n    sliceRepository.prototype.findDataRowKey = function (sliceKey, dataRowKey) {\n        var that = this, newRowKey = [], map = that._getConvertMap(dataRowKey.sliceKey, sliceKey);\n        for (var i = 0; i < map.length; i++) {\n            newRowKey.push(dataRowKey.rowKey[map[i]]);\n        }\n        return {\n            sliceKey: sliceKey,\n            rowKey: newRowKey\n        };\n    };\n    sliceRepository.prototype.getCrossValue = function (dataRows, valueId) {\n        var that = this, dataRow1 = dataRows[0], dataRow2 = dataRows[1], sliceKey, value = null;\n        if (!dataRow1)\n            sliceKey = 0;\n        else\n            sliceKey = dataRow2 ? that._joinSliceKey(dataRow1.sliceKey, dataRow2.sliceKey) : dataRow1.sliceKey;\n        if (sliceKey >= 0) {\n            var newRowKey = [], map1 = null, map2 = null;\n            if (dataRow1) {\n                map1 = that._getConvertMap(dataRow1.sliceKey, sliceKey),\n                    map2 = dataRow2 ? that._getConvertMap(dataRow2.sliceKey, sliceKey) : null;\n                for (var i = 0; i < map1.length; i++) {\n                    var index = map1[i], key = index >= 0 ? dataRow1.rowKey[index] : newRowKey[i];\n                    newRowKey.push(key);\n                }\n                if (map2 != null) {\n                    for (var i = 0; i < map2.length; i++) {\n                        var index = map2[i], key = index >= 0 ? dataRow2.rowKey[index] : newRowKey[i];\n                        newRowKey[i] = key;\n                    }\n                }\n            }\n            var slice = that.get(sliceKey);\n            if (slice)\n                value = slice.getValue(newRowKey, valueId);\n        }\n        return value;\n    };\n    sliceRepository.prototype.getKeyValue = function (dataRow, keyId) {\n        var that = this, slice = that.get(dataRow.sliceKey), value = null;\n        if (slice) {\n            value = slice.getKeyValue(dataRow.rowKey, keyId);\n        }\n        return value;\n    };\n    sliceRepository.prototype.getValue = function (dataRow, valueId) {\n        var that = this, slice = that.get(dataRow.sliceKey), value = null;\n        if (slice) {\n            value = slice.getValue(dataRow.rowKey, valueId);\n        }\n        return value;\n    };\n    sliceRepository.prototype.isEmpty = function () {\n        return this._sliceList.filter(function (s) {\n            if (s.getKeyIds().length === 0) {\n                var values = s.getRowValues([]);\n                return s.getValueIds().filter(function (id) { return values[id] !== null && values[id] !== undefined; }).length !== 0;\n            }\n            else {\n                return s.getRowCount() !== 0;\n            }\n        }).length === 0;\n    };\n    sliceRepository.prototype._joinSliceKey = function (key1, key2) {\n        var that = this, joinSliceCacheKey = [key1, key2];\n        if (key2 < key1)\n            joinSliceCacheKey = joinSliceCacheKey.reverse();\n        var joinRes = that._sliceJoinCache[joinSliceCacheKey];\n        if (joinRes == undefined) {\n            var slice1 = that.get(key1), slice2 = that.get(key2), keyIds = slice1.getKeyIds().concat(slice2.getKeyIds());\n            joinRes = that.getKey(keyIds);\n            that._sliceJoinCache[joinSliceCacheKey] = joinRes;\n        }\n        return joinRes;\n    };\n    sliceRepository.prototype._getByKeyIds = function (keyIds) {\n        var that = this, foundSlice = null;\n        that._sliceList.forEach(function (slice) {\n            if (_utils_1.areNotOrderedListsEqual(slice.getKeyIds(), keyIds)) {\n                foundSlice = slice;\n                return false;\n            }\n        });\n        return foundSlice;\n    };\n    sliceRepository.prototype._getConvertMap = function (sliceFromKey, sliceToKey) {\n        var that = this, convertMapCacheKey = [sliceFromKey, sliceToKey];\n        var map = that._rowKeyConvertMap[convertMapCacheKey];\n        if (!map) {\n            var fromSlice = that.get(sliceFromKey), toSlice = that.get(sliceToKey);\n            map = [];\n            toSlice.getKeyIds().forEach(function (keyId) {\n                map.push(fromSlice.getKeyIds().indexOf(keyId));\n            });\n            that._rowKeyConvertMap[convertMapCacheKey] = map;\n        }\n        return map;\n    };\n    return sliceRepository;\n}());\nexports.sliceRepository = sliceRepository;\n"]},"metadata":{},"sourceType":"script"}