{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\nimport FileSystemItem from \"../../file_management/file_system_item\";\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\nimport FileSystemError from \"../../file_management/error\";\nimport ErrorCode from \"../../file_management/error_codes\";\nimport { pathCombine, getEscapedFileName, getPathParts, getFileExtension } from \"../../file_management/utils\";\nimport { whenSome } from \"./ui.file_manager.common\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined, isObject, isPromise } from \"../../core/utils/type\";\nimport Guid from \"../../core/guid\";\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\nexport default class FileItemsController {\n  constructor(options) {\n    options = options || {};\n    this._options = extend({}, options);\n    this._isInitialized = false;\n    this._dataLoading = false;\n    this._dataLoadingDeferred = null;\n    this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n    this._defaultIconMap = this._createDefaultIconMap();\n    this.startSingleLoad();\n\n    this._setSecurityController();\n\n    this._setProvider(options.fileProvider);\n\n    this._initialize();\n  }\n\n  _initialize() {\n    var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\n\n    var completeInitialization = () => {\n      this._isInitialized = true;\n\n      this._raiseInitialized();\n    };\n\n    if (result) {\n      when(result).always(completeInitialization);\n    } else {\n      completeInitialization();\n    }\n  }\n\n  _setSecurityController() {\n    this._securityController = new FileSecurityController({\n      allowedFileExtensions: this._options.allowedFileExtensions,\n      maxFileSize: this._options.uploadMaxFileSize\n    });\n\n    this._resetState();\n  }\n\n  setAllowedFileExtensions(allowedFileExtensions) {\n    if (isDefined(allowedFileExtensions)) {\n      this._options.allowedFileExtensions = allowedFileExtensions;\n    }\n\n    this._setSecurityController();\n\n    this.refresh();\n  }\n\n  setUploadOptions(_ref) {\n    var {\n      maxFileSize: maxFileSize,\n      chunkSize: chunkSize\n    } = _ref;\n\n    if (isDefined(chunkSize)) {\n      this._options.uploadChunkSize = chunkSize;\n    }\n\n    if (isDefined(maxFileSize)) {\n      this._options.uploadMaxFileSize = maxFileSize;\n\n      this._setSecurityController();\n\n      this.refresh();\n    }\n  }\n\n  _setProvider(fileProvider) {\n    this._fileProvider = this._createFileProvider(fileProvider);\n\n    this._resetState();\n  }\n\n  updateProvider(fileProvider, currentPathKeys) {\n    if (!isDefined(currentPathKeys)) {\n      return this._updateProviderOnly(fileProvider);\n    }\n\n    return when(this._getDirectoryByPathParts(this._rootDirectoryInfo, currentPathKeys, true)).then(newDirectory => {\n      if (newDirectory !== this._rootDirectoryInfo) {\n        this._resetCurrentDirectory();\n      }\n\n      this._setProvider(fileProvider);\n    }).then(() => this.setCurrentPathByKeys(currentPathKeys));\n  }\n\n  _updateProviderOnly(fileProvider) {\n    this._resetCurrentDirectory();\n\n    this._setProvider(fileProvider);\n\n    return when(this.refresh());\n  }\n\n  _createFileProvider(fileProvider) {\n    if (!fileProvider) {\n      fileProvider = [];\n    }\n\n    if (Array.isArray(fileProvider)) {\n      return new ObjectFileSystemProvider({\n        data: fileProvider\n      });\n    }\n\n    if (fileProvider instanceof FileSystemProviderBase) {\n      return fileProvider;\n    }\n\n    switch (fileProvider.type) {\n      case \"remote\":\n        return new RemoteFileSystemProvider(fileProvider);\n\n      case \"custom\":\n        return new CustomFileSystemProvider(fileProvider);\n    }\n\n    return new ObjectFileSystemProvider(fileProvider);\n  }\n\n  setCurrentPath(path) {\n    var pathParts = getPathParts(path);\n    var rawPath = pathCombine(...pathParts);\n\n    if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\n      return new Deferred().resolve().promise();\n    }\n\n    return this._setCurrentDirectoryByPathParts(pathParts);\n  }\n\n  setCurrentPathByKeys(pathKeys) {\n    if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\n      return new Deferred().resolve().promise();\n    }\n\n    return this._setCurrentDirectoryByPathParts(pathKeys, true);\n  }\n\n  getCurrentPath() {\n    var currentPath = \"\";\n    var directory = this.getCurrentDirectory();\n\n    while (directory && !directory.fileItem.isRoot()) {\n      var escapedName = getEscapedFileName(directory.fileItem.name);\n      currentPath = pathCombine(escapedName, currentPath);\n      directory = directory.parentDirectory;\n    }\n\n    return currentPath;\n  }\n\n  getCurrentPathKeys() {\n    return this.getCurrentDirectory().fileItem.pathKeys;\n  }\n\n  getCurrentDirectory() {\n    return this._currentDirectoryInfo;\n  }\n\n  setCurrentDirectory(directoryInfo, checkActuality) {\n    if (!directoryInfo) {\n      return;\n    }\n\n    if (checkActuality) {\n      directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n    }\n\n    if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\n      this._raisePathPotentiallyChanged();\n\n      return;\n    }\n\n    var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\n    this._currentDirectoryInfo = directoryInfo;\n\n    if (requireRaiseSelectedDirectory && this._isInitialized) {\n      if (!this._dataLoading) {\n        this._raiseDataLoading(\"navigation\");\n      }\n\n      this._raiseSelectedDirectoryChanged(directoryInfo);\n    }\n  }\n\n  _resetCurrentDirectory() {\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n  }\n\n  getCurrentItems(onlyFiles) {\n    return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(() => this._getCurrentItemsInternal(onlyFiles)) : this._getCurrentItemsInternal(onlyFiles);\n  }\n\n  _getCurrentItemsInternal(onlyFiles) {\n    var currentDirectory = this.getCurrentDirectory();\n    var getItemsPromise = this.getDirectoryContents(currentDirectory);\n    return getItemsPromise.then(items => {\n      var separatedItems = this._separateItemsByType(items);\n\n      currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\n      return onlyFiles ? separatedItems.files : items;\n    });\n  }\n\n  getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n    return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(itemInfos => itemInfos.filter(info => info.fileItem.isDirectory));\n  }\n\n  _separateItemsByType(itemInfos) {\n    var folders = [];\n    var files = [];\n    itemInfos.forEach(info => info.fileItem.isDirectory ? folders.push(info) : files.push(info));\n    return {\n      folders: folders,\n      files: files\n    };\n  }\n\n  getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\n    if (!parentDirectoryInfo) {\n      return new Deferred().resolve([this._rootDirectoryInfo]).promise();\n    }\n\n    if (parentDirectoryInfo.itemsLoaded) {\n      return new Deferred().resolve(parentDirectoryInfo.items).promise();\n    }\n\n    if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId === this._singleOperationLockId) {\n      this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError, true);\n\n      return new Deferred().reject().promise();\n    }\n\n    var dirKey = parentDirectoryInfo.getInternalKey();\n    var loadItemsDeferred = this._loadedItems[dirKey];\n\n    if (loadItemsDeferred) {\n      return loadItemsDeferred;\n    }\n\n    loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(fileItems => {\n      fileItems = fileItems || [];\n      parentDirectoryInfo.items = fileItems.map(fileItem => fileItem.isDirectory && this._createDirectoryInfo(fileItem, parentDirectoryInfo) || this._createFileInfo(fileItem, parentDirectoryInfo));\n      parentDirectoryInfo.itemsLoaded = true;\n      return parentDirectoryInfo.items;\n    }, () => {\n      if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId !== this._singleOperationLockId) {\n        parentDirectoryInfo.itemsSingleLoadErrorId = this._singleOperationLockId;\n      }\n\n      return [];\n    });\n    this._loadedItems[dirKey] = loadItemsDeferred;\n    loadItemsDeferred.always(() => {\n      delete this._loadedItems[dirKey];\n    });\n    return loadItemsDeferred;\n  }\n\n  _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\n    var loadItemsDeferred = null;\n\n    try {\n      loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem);\n    } catch (error) {\n      return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError);\n    }\n\n    return when(loadItemsDeferred).then(fileItems => this._securityController.getAllowedItems(fileItems), errorInfo => this._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError));\n  }\n\n  createDirectory(parentDirectoryInfo, name) {\n    var parentDirItem = parentDirectoryInfo.fileItem;\n\n    var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\n\n    var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\n\n    return this._processEditAction(actionInfo, args => {\n      args.parentDirectory = parentDirItem;\n      args.name = name;\n\n      this._editingEvents.onDirectoryCreating(args);\n    }, () => this._fileProvider.createDirectory(parentDirItem, name).done(info => {\n      if (!parentDirItem.isRoot()) {\n        parentDirItem.hasSubDirectories = true;\n      }\n\n      return info;\n    }), () => {\n      var args = {\n        parentDirectory: parentDirItem,\n        name: name\n      };\n\n      this._editingEvents.onDirectoryCreated(args);\n    }, () => this._resetDirectoryState(parentDirectoryInfo, true));\n  }\n\n  renameItem(fileItemInfo, name) {\n    var sourceItem = fileItemInfo.fileItem.createClone();\n\n    var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\n      itemNewName: name\n    });\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      if (!itemInfo.fileItem.isDirectory) {\n        this._securityController.validateExtension(name);\n      }\n\n      args.item = sourceItem;\n      args.newName = name;\n\n      this._editingEvents.onItemRenaming(args);\n    }, item => this._fileProvider.renameItem(item, name), () => {\n      var args = {\n        sourceItem: sourceItem,\n        itemName: name\n      };\n\n      this._editingEvents.onItemRenamed(args);\n    }, () => {\n      var parentDirectory = this._getActualDirectoryInfo(fileItemInfo.parentDirectory);\n\n      this._resetDirectoryState(parentDirectory);\n\n      this.setCurrentDirectory(parentDirectory);\n    });\n  }\n\n  moveItems(itemInfos, destinationDirectory) {\n    var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      args.item = itemInfo.fileItem;\n      args.destinationDirectory = destinationDirectory.fileItem;\n\n      this._editingEvents.onItemMoving(args);\n    }, item => this._fileProvider.moveItems([item], destinationDirectory.fileItem), itemInfo => {\n      var args = {\n        sourceItem: itemInfo.fileItem,\n        parentDirectory: destinationDirectory.fileItem,\n        itemName: itemInfo.fileItem.name,\n        itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\n      };\n\n      this._editingEvents.onItemMoved(args);\n    }, needChangeCurrentDirectory => {\n      if (needChangeCurrentDirectory) {\n        destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\n\n        this._resetDirectoryState(destinationDirectory);\n\n        this.setCurrentDirectory(destinationDirectory);\n        destinationDirectory.expanded = true;\n      }\n\n      itemInfos.forEach(itemInfo => this._resetDirectoryState(itemInfo.parentDirectory, true));\n    });\n  }\n\n  copyItems(itemInfos, destinationDirectory) {\n    var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      args.item = itemInfo.fileItem;\n      args.destinationDirectory = destinationDirectory.fileItem;\n\n      this._editingEvents.onItemCopying(args);\n    }, item => this._fileProvider.copyItems([item], destinationDirectory.fileItem), itemInfo => {\n      var args = {\n        sourceItem: itemInfo.fileItem,\n        parentDirectory: destinationDirectory.fileItem,\n        itemName: itemInfo.fileItem.name,\n        itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\n      };\n\n      this._editingEvents.onItemCopied(args);\n    }, needChangeCurrentDirectory => {\n      if (needChangeCurrentDirectory) {\n        destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\n\n        this._resetDirectoryState(destinationDirectory);\n\n        this.setCurrentDirectory(destinationDirectory);\n        destinationDirectory.expanded = true;\n      }\n    });\n  }\n\n  deleteItems(itemInfos) {\n    var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\n\n    var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      args.item = itemInfo.fileItem;\n\n      this._editingEvents.onItemDeleting(args);\n    }, item => this._fileProvider.deleteItems([item]), itemInfo => this._editingEvents.onItemDeleted({\n      item: itemInfo.fileItem\n    }), () => {\n      itemInfos.forEach(itemInfo => {\n        var parentDir = this._getActualDirectoryInfo(itemInfo.parentDirectory);\n\n        this._resetDirectoryState(parentDir);\n\n        this.setCurrentDirectory(parentDir);\n      });\n    });\n  }\n\n  processUploadSession(sessionInfo, uploadDirectoryInfo) {\n    var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\n\n    var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\n      sessionInfo: sessionInfo\n    });\n\n    return this._processEditAction(actionInfo, () => {}, (_, index) => sessionInfo.deferreds[index], () => {}, () => this._resetDirectoryState(uploadDirectoryInfo, true));\n  }\n\n  uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n    var startDeferred = null;\n\n    if (0 === chunksInfo.chunkIndex) {\n      this._securityController.validateMaxFileSize(fileData.size);\n\n      this._securityController.validateExtension(fileData.name);\n\n      startDeferred = this._processBeforeItemEditAction(args => {\n        args.fileData = fileData;\n        args.destinationDirectory = destinationDirectory;\n\n        this._editingEvents.onFileUploading(args);\n      });\n    } else {\n      startDeferred = new Deferred().resolve().promise();\n    }\n\n    var result = startDeferred.then(() => this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory));\n\n    if (chunksInfo.chunkIndex === chunksInfo.chunkCount - 1) {\n      result = result.done(() => {\n        var args = {\n          fileData: fileData,\n          parentDirectory: destinationDirectory\n        };\n\n        this._editingEvents.onFileUploaded(args);\n      });\n    }\n\n    return result;\n  }\n\n  abortFileUpload(fileData, chunksInfo, destinationDirectory) {\n    return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory));\n  }\n\n  getFileUploadChunkSize() {\n    var chunkSize = this._options.uploadChunkSize;\n\n    if (chunkSize && chunkSize > 0) {\n      return chunkSize;\n    }\n\n    return this._fileProvider.getFileUploadChunkSize();\n  }\n\n  downloadItems(itemInfos) {\n    var canceled = false;\n    var deferreds = itemInfos.map(itemInfo => this._processBeforeItemEditAction(args => {\n      args.item = itemInfo.fileItem;\n\n      this._editingEvents.onItemDownloading(args);\n    }, itemInfo));\n    whenSome(deferreds, null, () => {\n      canceled = true;\n    }).then(() => {\n      if (!canceled) {\n        var items = itemInfos.map(i => i.fileItem);\n\n        this._fileProvider.downloadItems(items);\n      }\n    });\n  }\n\n  getItemContent(itemInfos) {\n    var items = itemInfos.map(i => i.fileItem);\n    return when(this._fileProvider.getItemsContent(items));\n  }\n\n  _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\n    parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\n\n    this._raiseGetItemsError(parentDirectoryInfo, errorInfo);\n\n    this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError);\n\n    return new Deferred().reject().promise();\n  }\n\n  _raiseGetItemsError(parentDirectoryInfo, errorInfo) {\n    var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\n\n    this._raiseEditActionStarting(actionInfo);\n\n    this._raiseEditActionResultAcquired(actionInfo);\n\n    this._raiseEditActionError(actionInfo, {\n      errorCode: errorInfo.errorCode,\n      errorText: errorInfo.errorText,\n      fileItem: parentDirectoryInfo.fileItem,\n      index: 0\n    });\n  }\n\n  _changeDirectoryOnError(dirInfo, skipNavigationOnError, isActualDirectoryRequired) {\n    if (isActualDirectoryRequired) {\n      dirInfo = this._getActualDirectoryInfo(dirInfo);\n    }\n\n    this._resetDirectoryState(dirInfo);\n\n    dirInfo.expanded = false;\n\n    if (!skipNavigationOnError) {\n      this.setCurrentDirectory(dirInfo.parentDirectory);\n    }\n  }\n\n  _processEditAction(actionInfo, beforeAction, action, afterAction, completeAction) {\n    var isAnyOperationSuccessful = false;\n\n    this._raiseEditActionStarting(actionInfo);\n\n    var actionResult = actionInfo.itemInfos.map((itemInfo, itemIndex) => this._processBeforeItemEditAction(beforeAction, itemInfo).then(() => {\n      var itemActionResult = action(itemInfo.fileItem, itemIndex);\n\n      if (Array.isArray(itemActionResult)) {\n        itemActionResult = itemActionResult[0];\n      }\n\n      return itemActionResult.done(() => afterAction(itemInfo));\n    }));\n    actionInfo.singleRequest = 1 === actionResult.length;\n\n    this._raiseEditActionResultAcquired(actionInfo);\n\n    return whenSome(actionResult, info => {\n      isAnyOperationSuccessful = true;\n\n      this._raiseCompleteEditActionItem(actionInfo, info);\n    }, errorInfo => this._raiseEditActionItemError(actionInfo, errorInfo)).then(() => {\n      completeAction(isAnyOperationSuccessful);\n\n      this._raiseCompleteEditAction(actionInfo);\n    });\n  }\n\n  _createEditActionInfo(name, targetItemInfos, directory, customData) {\n    targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\n    customData = customData || {};\n    var items = targetItemInfos.map(itemInfo => itemInfo.fileItem);\n    return {\n      name: name,\n      itemInfos: targetItemInfos,\n      items: items,\n      directory: directory,\n      customData: customData,\n      singleRequest: true\n    };\n  }\n\n  _processBeforeItemEditAction(action, itemInfo) {\n    var deferred = new Deferred();\n\n    var args = this._createBeforeActionArgs();\n\n    try {\n      action(args, itemInfo);\n    } catch (errorInfo) {\n      return deferred.reject(errorInfo).promise();\n    }\n\n    if (!args.cancel) {\n      deferred.resolve();\n    } else if (true === args.cancel) {\n      return deferred.reject({\n        errorText: args.errorText,\n        errorCode: args.errorCode\n      });\n    } else if (isPromise(args.cancel)) {\n      when(args.cancel).then(res => {\n        if (true === res) {\n          deferred.reject();\n        } else if (isObject(res) && true === res.cancel) {\n          deferred.reject({\n            errorText: res.errorText,\n            errorCode: res.errorCode\n          });\n        }\n\n        deferred.resolve();\n      }, deferred.resolve);\n    }\n\n    return deferred.promise();\n  }\n\n  _createBeforeActionArgs() {\n    return {\n      errorCode: void 0,\n      errorText: \"\",\n      cancel: false\n    };\n  }\n\n  _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\n    var pathInfo = this._getPathInfo(parentDirectoryInfo);\n\n    var result = [];\n\n    for (var i = 0; i < files.length; i++) {\n      var file = files[i];\n      var item = new FileSystemItem(pathInfo, file.name, false);\n\n      var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\n\n      result.push(itemInfo);\n    }\n\n    return result;\n  }\n\n  refresh() {\n    if (this._lockRefresh) {\n      return this._refreshDeferred;\n    }\n\n    this._lockRefresh = true;\n    return this._executeDataLoad(() => this._refreshDeferred = this._refreshInternal(), \"refresh\");\n  }\n\n  startSingleLoad() {\n    this._singleOperationLockId = new Guid().toString();\n  }\n\n  endSingleLoad() {\n    delete this._singleOperationLockId;\n  }\n\n  _refreshInternal() {\n    var cachedRootInfo = {\n      items: this._rootDirectoryInfo.items\n    };\n\n    var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\n\n    this._resetDirectoryState(this._rootDirectoryInfo);\n\n    return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(() => {\n      var dirInfo = this._findDirectoryByPathKeyParts(selectedKeyParts);\n\n      this.setCurrentDirectory(dirInfo);\n      delete this._lockRefresh;\n    });\n  }\n\n  _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\n    var _this = this;\n\n    return this.getDirectories(directoryInfo).then(dirInfos => {\n      var itemDeferreds = [];\n\n      var _loop = function (i) {\n        var cachedItem = cachedDirectoryInfo.items.find(cache => dirInfos[i].fileItem.key === cache.fileItem.key);\n\n        if (!cachedItem) {\n          return \"continue\";\n        }\n\n        dirInfos[i].expanded = cachedItem.expanded;\n\n        if (dirInfos[i].expanded) {\n          itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem));\n        }\n      };\n\n      for (var i = 0; i < dirInfos.length; i++) {\n        var _ret = _loop(i);\n\n        if (\"continue\" === _ret) {\n          continue;\n        }\n      }\n\n      return whenSome(itemDeferreds);\n    }, () => null);\n  }\n\n  _setCurrentDirectoryByPathParts(pathParts, useKeys) {\n    return this._executeDataLoad(() => this._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys), \"navigation\");\n  }\n\n  _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\n    return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(directoryInfo => {\n      for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\n        info.expanded = true;\n      }\n\n      this.setCurrentDirectory(directoryInfo);\n    }, () => {\n      this._raisePathPotentiallyChanged();\n    });\n  }\n\n  _executeDataLoad(action, operation) {\n    if (this._dataLoadingDeferred) {\n      return this._dataLoadingDeferred.then(() => this._executeDataLoad(action, operation));\n    }\n\n    this._dataLoading = true;\n    this._dataLoadingDeferred = new Deferred();\n\n    if (this._isInitialized) {\n      this._raiseDataLoading(operation);\n    }\n\n    return action().always(() => {\n      var tempDeferred = this._dataLoadingDeferred;\n      this._dataLoadingDeferred = null;\n      this._dataLoading = false;\n      tempDeferred.resolve();\n    });\n  }\n\n  _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\n    if (pathParts.length < 1) {\n      return new Deferred().resolve(parentDirectoryInfo).promise();\n    }\n\n    var fieldName = useKeys ? \"key\" : \"name\";\n    return this.getDirectories(parentDirectoryInfo).then(dirInfos => {\n      var subDirInfo = dirInfos.find(d => d.fileItem[fieldName] === pathParts[0]);\n\n      if (!subDirInfo) {\n        return new Deferred().reject().promise();\n      }\n\n      var restPathParts = [...pathParts].splice(1);\n      return this._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys);\n    });\n  }\n\n  _getDirectoryPathKeyParts(directoryInfo) {\n    var pathParts = [];\n\n    while (directoryInfo && directoryInfo.parentDirectory) {\n      pathParts.unshift(directoryInfo.fileItem.key);\n      directoryInfo = directoryInfo.parentDirectory;\n    }\n\n    return pathParts;\n  }\n\n  _findDirectoryByPathKeyParts(keyParts) {\n    var selectedDirInfo = this._rootDirectoryInfo;\n\n    if (0 === keyParts.length) {\n      return selectedDirInfo;\n    }\n\n    var i = 0;\n    var newSelectedDir = selectedDirInfo;\n\n    while (newSelectedDir && i < keyParts.length) {\n      newSelectedDir = selectedDirInfo.items.find(info => info.fileItem.key === keyParts[i]);\n\n      if (newSelectedDir) {\n        selectedDirInfo = newSelectedDir;\n      }\n\n      i++;\n    }\n\n    return selectedDirInfo;\n  }\n\n  _getActualDirectoryInfo(directoryInfo) {\n    var keys = this._getDirectoryPathKeyParts(directoryInfo);\n\n    return this._findDirectoryByPathKeyParts(keys);\n  }\n\n  _createDirInfoByName(name, parentDirectoryInfo) {\n    var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\n\n    var fileItem = new FileSystemItem(dirPathInfo, name, true);\n    return this._createDirectoryInfo(fileItem, parentDirectoryInfo);\n  }\n\n  _createDirectoryInfo(fileItem, parentDirectoryInfo) {\n    return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\n      icon: \"folder\",\n      expanded: fileItem.isRoot(),\n      items: []\n    });\n  }\n\n  _createFileInfo(fileItem, parentDirectoryInfo) {\n    return {\n      fileItem: fileItem,\n      parentDirectory: parentDirectoryInfo,\n      icon: this._getFileItemDefaultIcon(fileItem),\n\n      getInternalKey() {\n        return \"FIK_\".concat(this.fileItem.key);\n      },\n\n      getDisplayName() {\n        return this.displayName || this.fileItem.name;\n      }\n\n    };\n  }\n\n  _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\n    if (isActualDirectoryRequired) {\n      directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n    }\n\n    directoryInfo.itemsLoaded = false;\n    directoryInfo.items = [];\n  }\n\n  _getFileItemDefaultIcon(fileItem) {\n    if (fileItem.isDirectory) {\n      return \"folder\";\n    }\n\n    var extension = fileItem.getFileExtension();\n    var icon = this._defaultIconMap[extension];\n    return icon || \"doc\";\n  }\n\n  _createDefaultIconMap() {\n    var result = {\n      \".txt\": \"txtfile\",\n      \".rtf\": \"rtffile\",\n      \".doc\": \"docfile\",\n      \".docx\": \"docxfile\",\n      \".xls\": \"xlsfile\",\n      \".xlsx\": \"xlsxfile\",\n      \".ppt\": \"pptfile\",\n      \".pptx\": \"pptxfile\",\n      \".pdf\": \"pdffile\"\n    };\n    [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(extension => {\n      result[extension] = \"image\";\n    });\n    return result;\n  }\n\n  _createRootDirectoryInfo(text) {\n    var rootDirectory = new FileSystemItem(null, \"\", true);\n\n    var result = this._createDirectoryInfo(rootDirectory, null);\n\n    result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n    return result;\n  }\n\n  setRootText(rootText) {\n    this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n  }\n\n  _raiseInitialized() {\n    this._tryCallAction(\"onInitialized\", {\n      controller: this\n    });\n  }\n\n  _raiseDataLoading(operation) {\n    this._tryCallAction(\"onDataLoading\", {\n      operation: operation\n    });\n  }\n\n  _raiseSelectedDirectoryChanged(directoryInfo) {\n    this._tryCallAction(\"onSelectedDirectoryChanged\", {\n      selectedDirectoryInfo: directoryInfo\n    });\n  }\n\n  _raiseEditActionStarting(actionInfo) {\n    this._tryCallAction(\"onEditActionStarting\", actionInfo);\n  }\n\n  _raiseEditActionResultAcquired(actionInfo) {\n    this._tryCallAction(\"onEditActionResultAcquired\", actionInfo);\n  }\n\n  _raiseEditActionError(actionInfo, errorInfo) {\n    this._tryCallAction(\"onEditActionError\", actionInfo, errorInfo);\n  }\n\n  _raiseEditActionItemError(actionInfo, errorInfo) {\n    this._tryCallAction(\"onEditActionItemError\", actionInfo, errorInfo);\n  }\n\n  _raiseCompleteEditActionItem(actionInfo, info) {\n    this._tryCallAction(\"onCompleteEditActionItem\", actionInfo, info);\n  }\n\n  _raiseCompleteEditAction(actionInfo) {\n    this._tryCallAction(\"onCompleteEditAction\", actionInfo);\n  }\n\n  _raisePathPotentiallyChanged() {\n    this._tryCallAction(\"onPathPotentiallyChanged\");\n  }\n\n  _tryCallAction(actionName) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if (this._isInitialized && this._options[actionName]) {\n      this._options[actionName](...args);\n    }\n  }\n\n  _resetState() {\n    this._selectedDirectory = null;\n    this._rootDirectoryInfo.items = [];\n    this._rootDirectoryInfo.itemsLoaded = false;\n    this._loadedItems = {};\n  }\n\n  _getPathInfo(directoryInfo) {\n    var pathInfo = [];\n\n    for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\n      pathInfo.unshift({\n        key: dirInfo.fileItem.key,\n        name: dirInfo.fileItem.name\n      });\n    }\n\n    return pathInfo;\n  }\n\n  on(eventName, eventHandler) {\n    var finalEventName = \"on\".concat(eventName);\n    this._options[finalEventName] = eventHandler;\n  }\n\n  get _editingEvents() {\n    return this._options.editingEvents;\n  }\n\n}\n\nclass FileSecurityController {\n  constructor(options) {\n    this._options = extend({\n      allowedFileExtensions: [],\n      maxFileSize: 0\n    }, options);\n    this._extensionsMap = {};\n\n    this._allowedFileExtensions.forEach(extension => {\n      this._extensionsMap[extension.toUpperCase()] = true;\n    });\n  }\n\n  getAllowedItems(items) {\n    if (0 === this._allowedFileExtensions.length) {\n      return items;\n    }\n\n    return items.filter(item => item.isDirectory || this._isValidExtension(item.name));\n  }\n\n  validateExtension(name) {\n    if (!this._isValidExtension(name)) {\n      throw new FileSystemError(ErrorCode.WrongFileExtension, null);\n    }\n  }\n\n  validateMaxFileSize(size) {\n    if (this._maxFileSize && size > this._maxFileSize) {\n      throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null);\n    }\n  }\n\n  _isValidExtension(name) {\n    if (0 === this._allowedFileExtensions.length) {\n      return true;\n    }\n\n    var extension = getFileExtension(name).toUpperCase();\n    return this._extensionsMap[extension];\n  }\n\n  get _allowedFileExtensions() {\n    return this._options.allowedFileExtensions;\n  }\n\n  get _maxFileSize() {\n    return this._options.maxFileSize;\n  }\n\n}","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/file_manager/file_items_controller.js"],"names":["FileSystemProviderBase","FileSystemItem","ObjectFileSystemProvider","RemoteFileSystemProvider","CustomFileSystemProvider","FileSystemError","ErrorCode","pathCombine","getEscapedFileName","getPathParts","getFileExtension","whenSome","Deferred","when","extend","equalByValue","isDefined","isObject","isPromise","Guid","DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME","FileItemsController","constructor","options","_options","_isInitialized","_dataLoading","_dataLoadingDeferred","_rootDirectoryInfo","_createRootDirectoryInfo","rootText","_currentDirectoryInfo","_defaultIconMap","_createDefaultIconMap","startSingleLoad","_setSecurityController","_setProvider","fileProvider","_initialize","result","currentPathKeys","length","setCurrentPathByKeys","setCurrentPath","currentPath","completeInitialization","_raiseInitialized","always","_securityController","FileSecurityController","allowedFileExtensions","maxFileSize","uploadMaxFileSize","_resetState","setAllowedFileExtensions","refresh","setUploadOptions","_ref","chunkSize","uploadChunkSize","_fileProvider","_createFileProvider","updateProvider","_updateProviderOnly","_getDirectoryByPathParts","then","newDirectory","_resetCurrentDirectory","Array","isArray","data","type","path","pathParts","rawPath","getCurrentDirectory","fileItem","relativeName","resolve","promise","_setCurrentDirectoryByPathParts","pathKeys","getCurrentPath","directory","isRoot","escapedName","name","parentDirectory","getCurrentPathKeys","setCurrentDirectory","directoryInfo","checkActuality","_getActualDirectoryInfo","_raisePathPotentiallyChanged","requireRaiseSelectedDirectory","key","_raiseDataLoading","_raiseSelectedDirectoryChanged","getCurrentItems","onlyFiles","_getCurrentItemsInternal","currentDirectory","getItemsPromise","getDirectoryContents","items","separatedItems","_separateItemsByType","hasSubDirectories","folders","files","getDirectories","parentDirectoryInfo","skipNavigationOnError","itemInfos","filter","info","isDirectory","forEach","push","itemsLoaded","_singleOperationLockId","itemsSingleLoadErrorId","_changeDirectoryOnError","reject","dirKey","getInternalKey","loadItemsDeferred","_loadedItems","_getFileItems","fileItems","map","_createDirectoryInfo","_createFileInfo","getItems","error","_handleItemLoadError","getAllowedItems","errorInfo","createDirectory","parentDirItem","tempDirInfo","_createDirInfoByName","actionInfo","_createEditActionInfo","_processEditAction","args","_editingEvents","onDirectoryCreating","done","onDirectoryCreated","_resetDirectoryState","renameItem","fileItemInfo","sourceItem","createClone","itemNewName","itemInfo","validateExtension","item","newName","onItemRenaming","itemName","onItemRenamed","moveItems","destinationDirectory","onItemMoving","itemPath","onItemMoved","needChangeCurrentDirectory","expanded","copyItems","onItemCopying","onItemCopied","deleteItems","onItemDeleting","onItemDeleted","parentDir","processUploadSession","sessionInfo","uploadDirectoryInfo","_getItemInfosForUploaderFiles","_","index","deferreds","uploadFileChunk","fileData","chunksInfo","startDeferred","chunkIndex","validateMaxFileSize","size","_processBeforeItemEditAction","onFileUploading","chunkCount","onFileUploaded","abortFileUpload","getFileUploadChunkSize","downloadItems","canceled","onItemDownloading","i","getItemContent","getItemsContent","_raiseGetItemsError","_raiseEditActionStarting","_raiseEditActionResultAcquired","_raiseEditActionError","errorCode","errorText","dirInfo","isActualDirectoryRequired","beforeAction","action","afterAction","completeAction","isAnyOperationSuccessful","actionResult","itemIndex","itemActionResult","singleRequest","_raiseCompleteEditActionItem","_raiseEditActionItemError","_raiseCompleteEditAction","targetItemInfos","customData","deferred","_createBeforeActionArgs","cancel","res","pathInfo","_getPathInfo","file","_lockRefresh","_refreshDeferred","_executeDataLoad","_refreshInternal","toString","endSingleLoad","cachedRootInfo","selectedKeyParts","_getDirectoryPathKeyParts","_loadItemsRecursive","_findDirectoryByPathKeyParts","cachedDirectoryInfo","_this","dirInfos","itemDeferreds","_loop","cachedItem","find","cache","_ret","useKeys","_setCurrentDirectoryByPathPartsInternal","operation","tempDeferred","fieldName","subDirInfo","d","restPathParts","splice","unshift","keyParts","selectedDirInfo","newSelectedDir","keys","dirPathInfo","icon","_getFileItemDefaultIcon","concat","getDisplayName","displayName","extension","text","rootDirectory","setRootText","_tryCallAction","controller","selectedDirectoryInfo","actionName","prototype","slice","call","arguments","_selectedDirectory","on","eventName","eventHandler","finalEventName","editingEvents","_extensionsMap","_allowedFileExtensions","toUpperCase","_isValidExtension","WrongFileExtension","_maxFileSize","MaxFileSizeExceeded"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\r\nimport FileSystemItem from \"../../file_management/file_system_item\";\r\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\r\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\r\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\r\nimport FileSystemError from \"../../file_management/error\";\r\nimport ErrorCode from \"../../file_management/error_codes\";\r\nimport {\r\n    pathCombine,\r\n    getEscapedFileName,\r\n    getPathParts,\r\n    getFileExtension\r\n} from \"../../file_management/utils\";\r\nimport {\r\n    whenSome\r\n} from \"./ui.file_manager.common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isPromise\r\n} from \"../../core/utils/type\";\r\nimport Guid from \"../../core/guid\";\r\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\r\nexport default class FileItemsController {\r\n    constructor(options) {\r\n        options = options || {};\r\n        this._options = extend({}, options);\r\n        this._isInitialized = false;\r\n        this._dataLoading = false;\r\n        this._dataLoadingDeferred = null;\r\n        this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\r\n        this._currentDirectoryInfo = this._rootDirectoryInfo;\r\n        this._defaultIconMap = this._createDefaultIconMap();\r\n        this.startSingleLoad();\r\n        this._setSecurityController();\r\n        this._setProvider(options.fileProvider);\r\n        this._initialize()\r\n    }\r\n    _initialize() {\r\n        var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\r\n        var completeInitialization = () => {\r\n            this._isInitialized = true;\r\n            this._raiseInitialized()\r\n        };\r\n        if (result) {\r\n            when(result).always(completeInitialization)\r\n        } else {\r\n            completeInitialization()\r\n        }\r\n    }\r\n    _setSecurityController() {\r\n        this._securityController = new FileSecurityController({\r\n            allowedFileExtensions: this._options.allowedFileExtensions,\r\n            maxFileSize: this._options.uploadMaxFileSize\r\n        });\r\n        this._resetState()\r\n    }\r\n    setAllowedFileExtensions(allowedFileExtensions) {\r\n        if (isDefined(allowedFileExtensions)) {\r\n            this._options.allowedFileExtensions = allowedFileExtensions\r\n        }\r\n        this._setSecurityController();\r\n        this.refresh()\r\n    }\r\n    setUploadOptions(_ref) {\r\n        var {\r\n            maxFileSize: maxFileSize,\r\n            chunkSize: chunkSize\r\n        } = _ref;\r\n        if (isDefined(chunkSize)) {\r\n            this._options.uploadChunkSize = chunkSize\r\n        }\r\n        if (isDefined(maxFileSize)) {\r\n            this._options.uploadMaxFileSize = maxFileSize;\r\n            this._setSecurityController();\r\n            this.refresh()\r\n        }\r\n    }\r\n    _setProvider(fileProvider) {\r\n        this._fileProvider = this._createFileProvider(fileProvider);\r\n        this._resetState()\r\n    }\r\n    updateProvider(fileProvider, currentPathKeys) {\r\n        if (!isDefined(currentPathKeys)) {\r\n            return this._updateProviderOnly(fileProvider)\r\n        }\r\n        return when(this._getDirectoryByPathParts(this._rootDirectoryInfo, currentPathKeys, true)).then(newDirectory => {\r\n            if (newDirectory !== this._rootDirectoryInfo) {\r\n                this._resetCurrentDirectory()\r\n            }\r\n            this._setProvider(fileProvider)\r\n        }).then(() => this.setCurrentPathByKeys(currentPathKeys))\r\n    }\r\n    _updateProviderOnly(fileProvider) {\r\n        this._resetCurrentDirectory();\r\n        this._setProvider(fileProvider);\r\n        return when(this.refresh())\r\n    }\r\n    _createFileProvider(fileProvider) {\r\n        if (!fileProvider) {\r\n            fileProvider = []\r\n        }\r\n        if (Array.isArray(fileProvider)) {\r\n            return new ObjectFileSystemProvider({\r\n                data: fileProvider\r\n            })\r\n        }\r\n        if (fileProvider instanceof FileSystemProviderBase) {\r\n            return fileProvider\r\n        }\r\n        switch (fileProvider.type) {\r\n            case \"remote\":\r\n                return new RemoteFileSystemProvider(fileProvider);\r\n            case \"custom\":\r\n                return new CustomFileSystemProvider(fileProvider)\r\n        }\r\n        return new ObjectFileSystemProvider(fileProvider)\r\n    }\r\n    setCurrentPath(path) {\r\n        var pathParts = getPathParts(path);\r\n        var rawPath = pathCombine(...pathParts);\r\n        if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\r\n            return (new Deferred).resolve().promise()\r\n        }\r\n        return this._setCurrentDirectoryByPathParts(pathParts)\r\n    }\r\n    setCurrentPathByKeys(pathKeys) {\r\n        if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\r\n            return (new Deferred).resolve().promise()\r\n        }\r\n        return this._setCurrentDirectoryByPathParts(pathKeys, true)\r\n    }\r\n    getCurrentPath() {\r\n        var currentPath = \"\";\r\n        var directory = this.getCurrentDirectory();\r\n        while (directory && !directory.fileItem.isRoot()) {\r\n            var escapedName = getEscapedFileName(directory.fileItem.name);\r\n            currentPath = pathCombine(escapedName, currentPath);\r\n            directory = directory.parentDirectory\r\n        }\r\n        return currentPath\r\n    }\r\n    getCurrentPathKeys() {\r\n        return this.getCurrentDirectory().fileItem.pathKeys\r\n    }\r\n    getCurrentDirectory() {\r\n        return this._currentDirectoryInfo\r\n    }\r\n    setCurrentDirectory(directoryInfo, checkActuality) {\r\n        if (!directoryInfo) {\r\n            return\r\n        }\r\n        if (checkActuality) {\r\n            directoryInfo = this._getActualDirectoryInfo(directoryInfo)\r\n        }\r\n        if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\r\n            this._raisePathPotentiallyChanged();\r\n            return\r\n        }\r\n        var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\r\n        this._currentDirectoryInfo = directoryInfo;\r\n        if (requireRaiseSelectedDirectory && this._isInitialized) {\r\n            if (!this._dataLoading) {\r\n                this._raiseDataLoading(\"navigation\")\r\n            }\r\n            this._raiseSelectedDirectoryChanged(directoryInfo)\r\n        }\r\n    }\r\n    _resetCurrentDirectory() {\r\n        this._currentDirectoryInfo = this._rootDirectoryInfo\r\n    }\r\n    getCurrentItems(onlyFiles) {\r\n        return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(() => this._getCurrentItemsInternal(onlyFiles)) : this._getCurrentItemsInternal(onlyFiles)\r\n    }\r\n    _getCurrentItemsInternal(onlyFiles) {\r\n        var currentDirectory = this.getCurrentDirectory();\r\n        var getItemsPromise = this.getDirectoryContents(currentDirectory);\r\n        return getItemsPromise.then(items => {\r\n            var separatedItems = this._separateItemsByType(items);\r\n            currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\r\n            return onlyFiles ? separatedItems.files : items\r\n        })\r\n    }\r\n    getDirectories(parentDirectoryInfo, skipNavigationOnError) {\r\n        return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(itemInfos => itemInfos.filter(info => info.fileItem.isDirectory))\r\n    }\r\n    _separateItemsByType(itemInfos) {\r\n        var folders = [];\r\n        var files = [];\r\n        itemInfos.forEach(info => info.fileItem.isDirectory ? folders.push(info) : files.push(info));\r\n        return {\r\n            folders: folders,\r\n            files: files\r\n        }\r\n    }\r\n    getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\r\n        if (!parentDirectoryInfo) {\r\n            return (new Deferred).resolve([this._rootDirectoryInfo]).promise()\r\n        }\r\n        if (parentDirectoryInfo.itemsLoaded) {\r\n            return (new Deferred).resolve(parentDirectoryInfo.items).promise()\r\n        }\r\n        if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId === this._singleOperationLockId) {\r\n            this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError, true);\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        var dirKey = parentDirectoryInfo.getInternalKey();\r\n        var loadItemsDeferred = this._loadedItems[dirKey];\r\n        if (loadItemsDeferred) {\r\n            return loadItemsDeferred\r\n        }\r\n        loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(fileItems => {\r\n            fileItems = fileItems || [];\r\n            parentDirectoryInfo.items = fileItems.map(fileItem => fileItem.isDirectory && this._createDirectoryInfo(fileItem, parentDirectoryInfo) || this._createFileInfo(fileItem, parentDirectoryInfo));\r\n            parentDirectoryInfo.itemsLoaded = true;\r\n            return parentDirectoryInfo.items\r\n        }, () => {\r\n            if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId !== this._singleOperationLockId) {\r\n                parentDirectoryInfo.itemsSingleLoadErrorId = this._singleOperationLockId\r\n            }\r\n            return []\r\n        });\r\n        this._loadedItems[dirKey] = loadItemsDeferred;\r\n        loadItemsDeferred.always(() => {\r\n            delete this._loadedItems[dirKey]\r\n        });\r\n        return loadItemsDeferred\r\n    }\r\n    _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\r\n        var loadItemsDeferred = null;\r\n        try {\r\n            loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem)\r\n        } catch (error) {\r\n            return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError)\r\n        }\r\n        return when(loadItemsDeferred).then(fileItems => this._securityController.getAllowedItems(fileItems), errorInfo => this._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError))\r\n    }\r\n    createDirectory(parentDirectoryInfo, name) {\r\n        var parentDirItem = parentDirectoryInfo.fileItem;\r\n        var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\r\n        return this._processEditAction(actionInfo, args => {\r\n            args.parentDirectory = parentDirItem;\r\n            args.name = name;\r\n            this._editingEvents.onDirectoryCreating(args)\r\n        }, () => this._fileProvider.createDirectory(parentDirItem, name).done(info => {\r\n            if (!parentDirItem.isRoot()) {\r\n                parentDirItem.hasSubDirectories = true\r\n            }\r\n            return info\r\n        }), () => {\r\n            var args = {\r\n                parentDirectory: parentDirItem,\r\n                name: name\r\n            };\r\n            this._editingEvents.onDirectoryCreated(args)\r\n        }, () => this._resetDirectoryState(parentDirectoryInfo, true))\r\n    }\r\n    renameItem(fileItemInfo, name) {\r\n        var sourceItem = fileItemInfo.fileItem.createClone();\r\n        var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\r\n            itemNewName: name\r\n        });\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            if (!itemInfo.fileItem.isDirectory) {\r\n                this._securityController.validateExtension(name)\r\n            }\r\n            args.item = sourceItem;\r\n            args.newName = name;\r\n            this._editingEvents.onItemRenaming(args)\r\n        }, item => this._fileProvider.renameItem(item, name), () => {\r\n            var args = {\r\n                sourceItem: sourceItem,\r\n                itemName: name\r\n            };\r\n            this._editingEvents.onItemRenamed(args)\r\n        }, () => {\r\n            var parentDirectory = this._getActualDirectoryInfo(fileItemInfo.parentDirectory);\r\n            this._resetDirectoryState(parentDirectory);\r\n            this.setCurrentDirectory(parentDirectory)\r\n        })\r\n    }\r\n    moveItems(itemInfos, destinationDirectory) {\r\n        var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            args.item = itemInfo.fileItem;\r\n            args.destinationDirectory = destinationDirectory.fileItem;\r\n            this._editingEvents.onItemMoving(args)\r\n        }, item => this._fileProvider.moveItems([item], destinationDirectory.fileItem), itemInfo => {\r\n            var args = {\r\n                sourceItem: itemInfo.fileItem,\r\n                parentDirectory: destinationDirectory.fileItem,\r\n                itemName: itemInfo.fileItem.name,\r\n                itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\r\n            };\r\n            this._editingEvents.onItemMoved(args)\r\n        }, needChangeCurrentDirectory => {\r\n            if (needChangeCurrentDirectory) {\r\n                destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\r\n                this._resetDirectoryState(destinationDirectory);\r\n                this.setCurrentDirectory(destinationDirectory);\r\n                destinationDirectory.expanded = true\r\n            }\r\n            itemInfos.forEach(itemInfo => this._resetDirectoryState(itemInfo.parentDirectory, true))\r\n        })\r\n    }\r\n    copyItems(itemInfos, destinationDirectory) {\r\n        var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            args.item = itemInfo.fileItem;\r\n            args.destinationDirectory = destinationDirectory.fileItem;\r\n            this._editingEvents.onItemCopying(args)\r\n        }, item => this._fileProvider.copyItems([item], destinationDirectory.fileItem), itemInfo => {\r\n            var args = {\r\n                sourceItem: itemInfo.fileItem,\r\n                parentDirectory: destinationDirectory.fileItem,\r\n                itemName: itemInfo.fileItem.name,\r\n                itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\r\n            };\r\n            this._editingEvents.onItemCopied(args)\r\n        }, needChangeCurrentDirectory => {\r\n            if (needChangeCurrentDirectory) {\r\n                destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\r\n                this._resetDirectoryState(destinationDirectory);\r\n                this.setCurrentDirectory(destinationDirectory);\r\n                destinationDirectory.expanded = true\r\n            }\r\n        })\r\n    }\r\n    deleteItems(itemInfos) {\r\n        var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\r\n        var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            args.item = itemInfo.fileItem;\r\n            this._editingEvents.onItemDeleting(args)\r\n        }, item => this._fileProvider.deleteItems([item]), itemInfo => this._editingEvents.onItemDeleted({\r\n            item: itemInfo.fileItem\r\n        }), () => {\r\n            itemInfos.forEach(itemInfo => {\r\n                var parentDir = this._getActualDirectoryInfo(itemInfo.parentDirectory);\r\n                this._resetDirectoryState(parentDir);\r\n                this.setCurrentDirectory(parentDir)\r\n            })\r\n        })\r\n    }\r\n    processUploadSession(sessionInfo, uploadDirectoryInfo) {\r\n        var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\r\n            sessionInfo: sessionInfo\r\n        });\r\n        return this._processEditAction(actionInfo, () => {}, (_, index) => sessionInfo.deferreds[index], () => {}, () => this._resetDirectoryState(uploadDirectoryInfo, true))\r\n    }\r\n    uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\r\n        var startDeferred = null;\r\n        if (0 === chunksInfo.chunkIndex) {\r\n            this._securityController.validateMaxFileSize(fileData.size);\r\n            this._securityController.validateExtension(fileData.name);\r\n            startDeferred = this._processBeforeItemEditAction(args => {\r\n                args.fileData = fileData;\r\n                args.destinationDirectory = destinationDirectory;\r\n                this._editingEvents.onFileUploading(args)\r\n            })\r\n        } else {\r\n            startDeferred = (new Deferred).resolve().promise()\r\n        }\r\n        var result = startDeferred.then(() => this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory));\r\n        if (chunksInfo.chunkIndex === chunksInfo.chunkCount - 1) {\r\n            result = result.done(() => {\r\n                var args = {\r\n                    fileData: fileData,\r\n                    parentDirectory: destinationDirectory\r\n                };\r\n                this._editingEvents.onFileUploaded(args)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    abortFileUpload(fileData, chunksInfo, destinationDirectory) {\r\n        return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory))\r\n    }\r\n    getFileUploadChunkSize() {\r\n        var chunkSize = this._options.uploadChunkSize;\r\n        if (chunkSize && chunkSize > 0) {\r\n            return chunkSize\r\n        }\r\n        return this._fileProvider.getFileUploadChunkSize()\r\n    }\r\n    downloadItems(itemInfos) {\r\n        var canceled = false;\r\n        var deferreds = itemInfos.map(itemInfo => this._processBeforeItemEditAction(args => {\r\n            args.item = itemInfo.fileItem;\r\n            this._editingEvents.onItemDownloading(args)\r\n        }, itemInfo));\r\n        whenSome(deferreds, null, () => {\r\n            canceled = true\r\n        }).then(() => {\r\n            if (!canceled) {\r\n                var items = itemInfos.map(i => i.fileItem);\r\n                this._fileProvider.downloadItems(items)\r\n            }\r\n        })\r\n    }\r\n    getItemContent(itemInfos) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        return when(this._fileProvider.getItemsContent(items))\r\n    }\r\n    _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\r\n        parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\r\n        this._raiseGetItemsError(parentDirectoryInfo, errorInfo);\r\n        this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError);\r\n        return (new Deferred).reject().promise()\r\n    }\r\n    _raiseGetItemsError(parentDirectoryInfo, errorInfo) {\r\n        var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\r\n        this._raiseEditActionStarting(actionInfo);\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        this._raiseEditActionError(actionInfo, {\r\n            errorCode: errorInfo.errorCode,\r\n            errorText: errorInfo.errorText,\r\n            fileItem: parentDirectoryInfo.fileItem,\r\n            index: 0\r\n        })\r\n    }\r\n    _changeDirectoryOnError(dirInfo, skipNavigationOnError, isActualDirectoryRequired) {\r\n        if (isActualDirectoryRequired) {\r\n            dirInfo = this._getActualDirectoryInfo(dirInfo)\r\n        }\r\n        this._resetDirectoryState(dirInfo);\r\n        dirInfo.expanded = false;\r\n        if (!skipNavigationOnError) {\r\n            this.setCurrentDirectory(dirInfo.parentDirectory)\r\n        }\r\n    }\r\n    _processEditAction(actionInfo, beforeAction, action, afterAction, completeAction) {\r\n        var isAnyOperationSuccessful = false;\r\n        this._raiseEditActionStarting(actionInfo);\r\n        var actionResult = actionInfo.itemInfos.map((itemInfo, itemIndex) => this._processBeforeItemEditAction(beforeAction, itemInfo).then(() => {\r\n            var itemActionResult = action(itemInfo.fileItem, itemIndex);\r\n            if (Array.isArray(itemActionResult)) {\r\n                itemActionResult = itemActionResult[0]\r\n            }\r\n            return itemActionResult.done(() => afterAction(itemInfo))\r\n        }));\r\n        actionInfo.singleRequest = 1 === actionResult.length;\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        return whenSome(actionResult, info => {\r\n            isAnyOperationSuccessful = true;\r\n            this._raiseCompleteEditActionItem(actionInfo, info)\r\n        }, errorInfo => this._raiseEditActionItemError(actionInfo, errorInfo)).then(() => {\r\n            completeAction(isAnyOperationSuccessful);\r\n            this._raiseCompleteEditAction(actionInfo)\r\n        })\r\n    }\r\n    _createEditActionInfo(name, targetItemInfos, directory, customData) {\r\n        targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\r\n        customData = customData || {};\r\n        var items = targetItemInfos.map(itemInfo => itemInfo.fileItem);\r\n        return {\r\n            name: name,\r\n            itemInfos: targetItemInfos,\r\n            items: items,\r\n            directory: directory,\r\n            customData: customData,\r\n            singleRequest: true\r\n        }\r\n    }\r\n    _processBeforeItemEditAction(action, itemInfo) {\r\n        var deferred = new Deferred;\r\n        var args = this._createBeforeActionArgs();\r\n        try {\r\n            action(args, itemInfo)\r\n        } catch (errorInfo) {\r\n            return deferred.reject(errorInfo).promise()\r\n        }\r\n        if (!args.cancel) {\r\n            deferred.resolve()\r\n        } else if (true === args.cancel) {\r\n            return deferred.reject({\r\n                errorText: args.errorText,\r\n                errorCode: args.errorCode\r\n            })\r\n        } else if (isPromise(args.cancel)) {\r\n            when(args.cancel).then(res => {\r\n                if (true === res) {\r\n                    deferred.reject()\r\n                } else if (isObject(res) && true === res.cancel) {\r\n                    deferred.reject({\r\n                        errorText: res.errorText,\r\n                        errorCode: res.errorCode\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            }, deferred.resolve)\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    _createBeforeActionArgs() {\r\n        return {\r\n            errorCode: void 0,\r\n            errorText: \"\",\r\n            cancel: false\r\n        }\r\n    }\r\n    _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\r\n        var pathInfo = this._getPathInfo(parentDirectoryInfo);\r\n        var result = [];\r\n        for (var i = 0; i < files.length; i++) {\r\n            var file = files[i];\r\n            var item = new FileSystemItem(pathInfo, file.name, false);\r\n            var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\r\n            result.push(itemInfo)\r\n        }\r\n        return result\r\n    }\r\n    refresh() {\r\n        if (this._lockRefresh) {\r\n            return this._refreshDeferred\r\n        }\r\n        this._lockRefresh = true;\r\n        return this._executeDataLoad(() => this._refreshDeferred = this._refreshInternal(), \"refresh\")\r\n    }\r\n    startSingleLoad() {\r\n        this._singleOperationLockId = (new Guid).toString()\r\n    }\r\n    endSingleLoad() {\r\n        delete this._singleOperationLockId\r\n    }\r\n    _refreshInternal() {\r\n        var cachedRootInfo = {\r\n            items: this._rootDirectoryInfo.items\r\n        };\r\n        var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\r\n        this._resetDirectoryState(this._rootDirectoryInfo);\r\n        return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(() => {\r\n            var dirInfo = this._findDirectoryByPathKeyParts(selectedKeyParts);\r\n            this.setCurrentDirectory(dirInfo);\r\n            delete this._lockRefresh\r\n        })\r\n    }\r\n    _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\r\n        var _this = this;\r\n        return this.getDirectories(directoryInfo).then(dirInfos => {\r\n            var itemDeferreds = [];\r\n            var _loop = function(i) {\r\n                var cachedItem = cachedDirectoryInfo.items.find(cache => dirInfos[i].fileItem.key === cache.fileItem.key);\r\n                if (!cachedItem) {\r\n                    return \"continue\"\r\n                }\r\n                dirInfos[i].expanded = cachedItem.expanded;\r\n                if (dirInfos[i].expanded) {\r\n                    itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem))\r\n                }\r\n            };\r\n            for (var i = 0; i < dirInfos.length; i++) {\r\n                var _ret = _loop(i);\r\n                if (\"continue\" === _ret) {\r\n                    continue\r\n                }\r\n            }\r\n            return whenSome(itemDeferreds)\r\n        }, () => null)\r\n    }\r\n    _setCurrentDirectoryByPathParts(pathParts, useKeys) {\r\n        return this._executeDataLoad(() => this._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys), \"navigation\")\r\n    }\r\n    _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\r\n        return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(directoryInfo => {\r\n            for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\r\n                info.expanded = true\r\n            }\r\n            this.setCurrentDirectory(directoryInfo)\r\n        }, () => {\r\n            this._raisePathPotentiallyChanged()\r\n        })\r\n    }\r\n    _executeDataLoad(action, operation) {\r\n        if (this._dataLoadingDeferred) {\r\n            return this._dataLoadingDeferred.then(() => this._executeDataLoad(action, operation))\r\n        }\r\n        this._dataLoading = true;\r\n        this._dataLoadingDeferred = new Deferred;\r\n        if (this._isInitialized) {\r\n            this._raiseDataLoading(operation)\r\n        }\r\n        return action().always(() => {\r\n            var tempDeferred = this._dataLoadingDeferred;\r\n            this._dataLoadingDeferred = null;\r\n            this._dataLoading = false;\r\n            tempDeferred.resolve()\r\n        })\r\n    }\r\n    _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\r\n        if (pathParts.length < 1) {\r\n            return (new Deferred).resolve(parentDirectoryInfo).promise()\r\n        }\r\n        var fieldName = useKeys ? \"key\" : \"name\";\r\n        return this.getDirectories(parentDirectoryInfo).then(dirInfos => {\r\n            var subDirInfo = dirInfos.find(d => d.fileItem[fieldName] === pathParts[0]);\r\n            if (!subDirInfo) {\r\n                return (new Deferred).reject().promise()\r\n            }\r\n            var restPathParts = [...pathParts].splice(1);\r\n            return this._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys)\r\n        })\r\n    }\r\n    _getDirectoryPathKeyParts(directoryInfo) {\r\n        var pathParts = [];\r\n        while (directoryInfo && directoryInfo.parentDirectory) {\r\n            pathParts.unshift(directoryInfo.fileItem.key);\r\n            directoryInfo = directoryInfo.parentDirectory\r\n        }\r\n        return pathParts\r\n    }\r\n    _findDirectoryByPathKeyParts(keyParts) {\r\n        var selectedDirInfo = this._rootDirectoryInfo;\r\n        if (0 === keyParts.length) {\r\n            return selectedDirInfo\r\n        }\r\n        var i = 0;\r\n        var newSelectedDir = selectedDirInfo;\r\n        while (newSelectedDir && i < keyParts.length) {\r\n            newSelectedDir = selectedDirInfo.items.find(info => info.fileItem.key === keyParts[i]);\r\n            if (newSelectedDir) {\r\n                selectedDirInfo = newSelectedDir\r\n            }\r\n            i++\r\n        }\r\n        return selectedDirInfo\r\n    }\r\n    _getActualDirectoryInfo(directoryInfo) {\r\n        var keys = this._getDirectoryPathKeyParts(directoryInfo);\r\n        return this._findDirectoryByPathKeyParts(keys)\r\n    }\r\n    _createDirInfoByName(name, parentDirectoryInfo) {\r\n        var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\r\n        var fileItem = new FileSystemItem(dirPathInfo, name, true);\r\n        return this._createDirectoryInfo(fileItem, parentDirectoryInfo)\r\n    }\r\n    _createDirectoryInfo(fileItem, parentDirectoryInfo) {\r\n        return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\r\n            icon: \"folder\",\r\n            expanded: fileItem.isRoot(),\r\n            items: []\r\n        })\r\n    }\r\n    _createFileInfo(fileItem, parentDirectoryInfo) {\r\n        return {\r\n            fileItem: fileItem,\r\n            parentDirectory: parentDirectoryInfo,\r\n            icon: this._getFileItemDefaultIcon(fileItem),\r\n            getInternalKey() {\r\n                return \"FIK_\".concat(this.fileItem.key)\r\n            },\r\n            getDisplayName() {\r\n                return this.displayName || this.fileItem.name\r\n            }\r\n        }\r\n    }\r\n    _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\r\n        if (isActualDirectoryRequired) {\r\n            directoryInfo = this._getActualDirectoryInfo(directoryInfo)\r\n        }\r\n        directoryInfo.itemsLoaded = false;\r\n        directoryInfo.items = []\r\n    }\r\n    _getFileItemDefaultIcon(fileItem) {\r\n        if (fileItem.isDirectory) {\r\n            return \"folder\"\r\n        }\r\n        var extension = fileItem.getFileExtension();\r\n        var icon = this._defaultIconMap[extension];\r\n        return icon || \"doc\"\r\n    }\r\n    _createDefaultIconMap() {\r\n        var result = {\r\n            \".txt\": \"txtfile\",\r\n            \".rtf\": \"rtffile\",\r\n            \".doc\": \"docfile\",\r\n            \".docx\": \"docxfile\",\r\n            \".xls\": \"xlsfile\",\r\n            \".xlsx\": \"xlsxfile\",\r\n            \".ppt\": \"pptfile\",\r\n            \".pptx\": \"pptxfile\",\r\n            \".pdf\": \"pdffile\"\r\n        };\r\n        [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(extension => {\r\n            result[extension] = \"image\"\r\n        });\r\n        return result\r\n    }\r\n    _createRootDirectoryInfo(text) {\r\n        var rootDirectory = new FileSystemItem(null, \"\", true);\r\n        var result = this._createDirectoryInfo(rootDirectory, null);\r\n        result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\r\n        return result\r\n    }\r\n    setRootText(rootText) {\r\n        this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME\r\n    }\r\n    _raiseInitialized() {\r\n        this._tryCallAction(\"onInitialized\", {\r\n            controller: this\r\n        })\r\n    }\r\n    _raiseDataLoading(operation) {\r\n        this._tryCallAction(\"onDataLoading\", {\r\n            operation: operation\r\n        })\r\n    }\r\n    _raiseSelectedDirectoryChanged(directoryInfo) {\r\n        this._tryCallAction(\"onSelectedDirectoryChanged\", {\r\n            selectedDirectoryInfo: directoryInfo\r\n        })\r\n    }\r\n    _raiseEditActionStarting(actionInfo) {\r\n        this._tryCallAction(\"onEditActionStarting\", actionInfo)\r\n    }\r\n    _raiseEditActionResultAcquired(actionInfo) {\r\n        this._tryCallAction(\"onEditActionResultAcquired\", actionInfo)\r\n    }\r\n    _raiseEditActionError(actionInfo, errorInfo) {\r\n        this._tryCallAction(\"onEditActionError\", actionInfo, errorInfo)\r\n    }\r\n    _raiseEditActionItemError(actionInfo, errorInfo) {\r\n        this._tryCallAction(\"onEditActionItemError\", actionInfo, errorInfo)\r\n    }\r\n    _raiseCompleteEditActionItem(actionInfo, info) {\r\n        this._tryCallAction(\"onCompleteEditActionItem\", actionInfo, info)\r\n    }\r\n    _raiseCompleteEditAction(actionInfo) {\r\n        this._tryCallAction(\"onCompleteEditAction\", actionInfo)\r\n    }\r\n    _raisePathPotentiallyChanged() {\r\n        this._tryCallAction(\"onPathPotentiallyChanged\")\r\n    }\r\n    _tryCallAction(actionName) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        if (this._isInitialized && this._options[actionName]) {\r\n            this._options[actionName](...args)\r\n        }\r\n    }\r\n    _resetState() {\r\n        this._selectedDirectory = null;\r\n        this._rootDirectoryInfo.items = [];\r\n        this._rootDirectoryInfo.itemsLoaded = false;\r\n        this._loadedItems = {}\r\n    }\r\n    _getPathInfo(directoryInfo) {\r\n        var pathInfo = [];\r\n        for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\r\n            pathInfo.unshift({\r\n                key: dirInfo.fileItem.key,\r\n                name: dirInfo.fileItem.name\r\n            })\r\n        }\r\n        return pathInfo\r\n    }\r\n    on(eventName, eventHandler) {\r\n        var finalEventName = \"on\".concat(eventName);\r\n        this._options[finalEventName] = eventHandler\r\n    }\r\n    get _editingEvents() {\r\n        return this._options.editingEvents\r\n    }\r\n}\r\nclass FileSecurityController {\r\n    constructor(options) {\r\n        this._options = extend({\r\n            allowedFileExtensions: [],\r\n            maxFileSize: 0\r\n        }, options);\r\n        this._extensionsMap = {};\r\n        this._allowedFileExtensions.forEach(extension => {\r\n            this._extensionsMap[extension.toUpperCase()] = true\r\n        })\r\n    }\r\n    getAllowedItems(items) {\r\n        if (0 === this._allowedFileExtensions.length) {\r\n            return items\r\n        }\r\n        return items.filter(item => item.isDirectory || this._isValidExtension(item.name))\r\n    }\r\n    validateExtension(name) {\r\n        if (!this._isValidExtension(name)) {\r\n            throw new FileSystemError(ErrorCode.WrongFileExtension, null)\r\n        }\r\n    }\r\n    validateMaxFileSize(size) {\r\n        if (this._maxFileSize && size > this._maxFileSize) {\r\n            throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null)\r\n        }\r\n    }\r\n    _isValidExtension(name) {\r\n        if (0 === this._allowedFileExtensions.length) {\r\n            return true\r\n        }\r\n        var extension = getFileExtension(name).toUpperCase();\r\n        return this._extensionsMap[extension]\r\n    }\r\n    get _allowedFileExtensions() {\r\n        return this._options.allowedFileExtensions\r\n    }\r\n    get _maxFileSize() {\r\n        return this._options.maxFileSize\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}