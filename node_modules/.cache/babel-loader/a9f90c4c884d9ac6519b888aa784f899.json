{"ast":null,"code":"var _jsxFileName = \"/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/src/components/WeatherDisplay.js\";\nimport React from 'react';\nimport '../css/styles.css';\nimport { Button } from 'semantic-ui-react';\nimport moment from 'moment';\n\nconst refresh = () => {\n  window.location.reload();\n};\n\nlet weatherIcon = null;\n\nif (weatherData.weather[0].main === 'Thunderstorm') {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faBolt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 19\n    }\n  });\n} else if (weatherData.weather[0].main === 'Drizzle') {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faCloudRain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 19\n    }\n  });\n} else if (weatherData.weather[0].main === 'Rain') {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faCloudShowersHeavy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 19\n    }\n  });\n} else if (weatherData.weather[0].main === 'Snow') {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSnowflake,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 19\n    }\n  });\n} else if (weatherData.weather[0].main === 'Clear') {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }\n  });\n} else if (weatherData.weather[0].main === 'Clouds') {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faCloud,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 19\n    }\n  });\n} else {\n  weatherIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSmog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }\n  });\n}\n\nconst WeatherDisplay = ({\n  weatherData\n}) =>\n/*#__PURE__*/\n//     <Card>\n//     <Card.Content>\n//         <Card.Header className=\"card-title\">City Name: {weatherData.name}</Card.Header>\n//         <p className=\"card-text\">Temprature: {weatherData.main.temp} &deg;C</p>\n//         <p className=\"card-text\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n//         <p className=\"card-text\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n//         <p className=\"card-text\">Description: {weatherData.weather[0].main}</p>\n//         <p className=\"card-text\">Humidity: {weatherData.main.humidity} %</p>\n//         <p className=\"card-text\">Day: {moment().format('dddd')}</p>\n//         <p className=\"card-text\">Date: {moment().format('LL')}</p>\n//     </Card.Content>\n//   </Card>\nReact.createElement(\"div\", {\n  className: \"main\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"top\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"header\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }\n}, weatherData.name), /*#__PURE__*/React.createElement(Button, {\n  className: \"button\",\n  color: \"black\",\n  circular: true,\n  icon: \"refresh\",\n  onClick: refresh,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }\n})), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"flex\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"day\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }\n}, moment().format('dddd'), \", \", /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 49\n  }\n}, moment().format('LL'))), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"description\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }\n}, weatherData.weather[0].main)), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"flex\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"temp\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }\n}, \"Temprature: \", weatherData.main.temp, \" \\xB0C\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"temp\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }\n}, \"Humidity: \", weatherData.main.humidity, \" %\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"flex\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 1\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"sunrise-sunset\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }\n}, \"Sunrise: \", new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"sunrise-sunset\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }\n}, \"Sunset: \", new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN'))));\n\nexport default WeatherDisplay;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/src/components/WeatherDisplay.js"],"names":["React","Button","moment","refresh","window","location","reload","weatherIcon","weatherData","weather","main","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","WeatherDisplay","name","format","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../css/styles.css';\nimport { Button } from 'semantic-ui-react';\nimport moment from 'moment';\n\nconst refresh = () => {\n    window.location.reload();\n  }\n\n  let weatherIcon = null;\n\n  if (weatherData.weather[0].main === 'Thunderstorm') {\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\n  } else if (weatherData.weather[0].main === 'Drizzle') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\n  } else if (weatherData.weather[0].main === 'Rain') {\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n  } else if (weatherData.weather[0].main === 'Snow') {\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\n  } else if (weatherData.weather[0].main === 'Clear') {\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\n  } else if (weatherData.weather[0].main === 'Clouds') {\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\n  } else {\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\n  }\n\nconst WeatherDisplay = ({weatherData}) => (\n//     <Card>\n//     <Card.Content>\n//         <Card.Header className=\"card-title\">City Name: {weatherData.name}</Card.Header>\n//         <p className=\"card-text\">Temprature: {weatherData.main.temp} &deg;C</p>\n//         <p className=\"card-text\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n//         <p className=\"card-text\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n//         <p className=\"card-text\">Description: {weatherData.weather[0].main}</p>\n//         <p className=\"card-text\">Humidity: {weatherData.main.humidity} %</p>\n//         <p className=\"card-text\">Day: {moment().format('dddd')}</p>\n//         <p className=\"card-text\">Date: {moment().format('LL')}</p>\n//     </Card.Content>\n//   </Card>\n<div className=\"main\">\n\n<div className=\"top\">\n  <p className=\"header\">{weatherData.name}</p>\n  <Button className=\"button\" color='black' circular icon='refresh' onClick={refresh} />\n</div>\n<div className=\"flex\">\n  <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\n  <p className=\"description\">{weatherData.weather[0].main}</p>\n</div>\n\n<div className=\"flex\">\n  <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\n  <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\n</div>\n\n<div className=\"flex\">\n  <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n  <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n</div>\n\n</div>\n)\n\nexport default WeatherDisplay;"]},"metadata":{},"sourceType":"module"}