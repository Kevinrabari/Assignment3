{"ast":null,"code":"/**\r\n * DevExtreme (esm/integration/knockout/validation.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { each, map } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Class from \"../../core/class\";\nimport { EventsStrategy } from \"../../core/events_strategy\";\nimport ValidationEngine from \"../../ui/validation_engine\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport Guid from \"../../core/guid\";\nimport ko from \"knockout\";\n\nif (ko) {\n  var VALIDATION_STATUS_VALID = \"valid\";\n  var VALIDATION_STATUS_PENDING = \"pending\";\n  var koDxValidator = Class.inherit({\n    ctor(target, _ref) {\n      var {\n        name: name,\n        validationRules: validationRules\n      } = _ref;\n      this.target = target;\n      this.name = name;\n      this.isValid = ko.observable(true);\n      this.validationError = ko.observable();\n      this.validationErrors = ko.observable();\n      this.validationStatus = ko.observable(VALIDATION_STATUS_VALID);\n      this._eventsStrategy = new EventsStrategy(this);\n      this.validationRules = map(validationRules, (rule, index) => extend({}, rule, {\n        validator: this,\n        index: index\n      }));\n      this._validationInfo = {\n        result: null,\n        deferred: null\n      };\n    },\n\n    _updateValidationResult(result) {\n      if (!this._validationInfo.result || this._validationInfo.result.id !== result.id) {\n        var complete = this._validationInfo.deferred && this._validationInfo.result.complete;\n        this._validationInfo.result = extend({}, result, {\n          complete: complete\n        });\n      } else {\n        for (var prop in result) {\n          if (\"id\" !== prop && \"complete\" !== prop) {\n            this._validationInfo.result[prop] = result[prop];\n          }\n        }\n      }\n    },\n\n    validate() {\n      var currentResult = this._validationInfo && this._validationInfo.result;\n      var value = this.target();\n\n      if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value) {\n        return extend({}, currentResult);\n      }\n\n      var result = ValidationEngine.validate(value, this.validationRules, this.name);\n      result.id = new Guid().toString();\n\n      this._applyValidationResult(result);\n\n      result.complete && result.complete.then(res => {\n        if (res.id === this._validationInfo.result.id) {\n          this._applyValidationResult(res);\n        }\n      });\n      return extend({}, this._validationInfo.result);\n    },\n\n    reset() {\n      this.target(null);\n      var result = {\n        id: null,\n        isValid: true,\n        brokenRule: null,\n        pendingRules: null,\n        status: VALIDATION_STATUS_VALID,\n        complete: null\n      };\n\n      this._applyValidationResult(result);\n\n      return result;\n    },\n\n    _applyValidationResult(result) {\n      result.validator = this;\n\n      this._updateValidationResult(result);\n\n      this.target.dxValidator.isValid(this._validationInfo.result.isValid);\n      this.target.dxValidator.validationError(this._validationInfo.result.brokenRule);\n      this.target.dxValidator.validationErrors(this._validationInfo.result.brokenRules);\n      this.target.dxValidator.validationStatus(this._validationInfo.result.status);\n\n      if (result.status === VALIDATION_STATUS_PENDING) {\n        if (!this._validationInfo.deferred) {\n          this._validationInfo.deferred = new Deferred();\n          this._validationInfo.result.complete = this._validationInfo.deferred.promise();\n        }\n\n        this._eventsStrategy.fireEvent(\"validating\", [this._validationInfo.result]);\n\n        return;\n      }\n\n      if (result.status !== VALIDATION_STATUS_PENDING) {\n        this._eventsStrategy.fireEvent(\"validated\", [result]);\n\n        if (this._validationInfo.deferred) {\n          this._validationInfo.deferred.resolve(result);\n\n          this._validationInfo.deferred = null;\n        }\n      }\n    },\n\n    on(eventName, eventHandler) {\n      this._eventsStrategy.on(eventName, eventHandler);\n\n      return this;\n    },\n\n    off(eventName, eventHandler) {\n      this._eventsStrategy.off(eventName, eventHandler);\n\n      return this;\n    }\n\n  });\n\n  ko.extenders.dxValidator = function (target, option) {\n    target.dxValidator = new koDxValidator(target, option);\n    target.subscribe(target.dxValidator.validate.bind(target.dxValidator));\n    return target;\n  };\n\n  ValidationEngine.registerModelForValidation = function (model) {\n    each(model, function (name, member) {\n      if (ko.isObservable(member) && member.dxValidator) {\n        ValidationEngine.registerValidatorInGroup(model, member.dxValidator);\n      }\n    });\n  };\n\n  ValidationEngine.unregisterModelForValidation = function (model) {\n    each(model, function (name, member) {\n      if (ko.isObservable(member) && member.dxValidator) {\n        ValidationEngine.removeRegisteredValidator(model, member.dxValidator);\n      }\n    });\n  };\n\n  ValidationEngine.validateModel = ValidationEngine.validateGroup;\n}","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/integration/knockout/validation.js"],"names":["each","map","extend","Class","EventsStrategy","ValidationEngine","Deferred","Guid","ko","VALIDATION_STATUS_VALID","VALIDATION_STATUS_PENDING","koDxValidator","inherit","ctor","target","_ref","name","validationRules","isValid","observable","validationError","validationErrors","validationStatus","_eventsStrategy","rule","index","validator","_validationInfo","result","deferred","_updateValidationResult","id","complete","prop","validate","currentResult","value","status","toString","_applyValidationResult","then","res","reset","brokenRule","pendingRules","dxValidator","brokenRules","promise","fireEvent","resolve","on","eventName","eventHandler","off","extenders","option","subscribe","bind","registerModelForValidation","model","member","isObservable","registerValidatorInGroup","unregisterModelForValidation","removeRegisteredValidator","validateModel","validateGroup"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/integration/knockout/validation.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport Class from \"../../core/class\";\r\nimport {\r\n    EventsStrategy\r\n} from \"../../core/events_strategy\";\r\nimport ValidationEngine from \"../../ui/validation_engine\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport Guid from \"../../core/guid\";\r\nimport ko from \"knockout\";\r\nif (ko) {\r\n    var VALIDATION_STATUS_VALID = \"valid\";\r\n    var VALIDATION_STATUS_PENDING = \"pending\";\r\n    var koDxValidator = Class.inherit({\r\n        ctor(target, _ref) {\r\n            var {\r\n                name: name,\r\n                validationRules: validationRules\r\n            } = _ref;\r\n            this.target = target;\r\n            this.name = name;\r\n            this.isValid = ko.observable(true);\r\n            this.validationError = ko.observable();\r\n            this.validationErrors = ko.observable();\r\n            this.validationStatus = ko.observable(VALIDATION_STATUS_VALID);\r\n            this._eventsStrategy = new EventsStrategy(this);\r\n            this.validationRules = map(validationRules, (rule, index) => extend({}, rule, {\r\n                validator: this,\r\n                index: index\r\n            }));\r\n            this._validationInfo = {\r\n                result: null,\r\n                deferred: null\r\n            }\r\n        },\r\n        _updateValidationResult(result) {\r\n            if (!this._validationInfo.result || this._validationInfo.result.id !== result.id) {\r\n                var complete = this._validationInfo.deferred && this._validationInfo.result.complete;\r\n                this._validationInfo.result = extend({}, result, {\r\n                    complete: complete\r\n                })\r\n            } else {\r\n                for (var prop in result) {\r\n                    if (\"id\" !== prop && \"complete\" !== prop) {\r\n                        this._validationInfo.result[prop] = result[prop]\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        validate() {\r\n            var currentResult = this._validationInfo && this._validationInfo.result;\r\n            var value = this.target();\r\n            if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value) {\r\n                return extend({}, currentResult)\r\n            }\r\n            var result = ValidationEngine.validate(value, this.validationRules, this.name);\r\n            result.id = (new Guid).toString();\r\n            this._applyValidationResult(result);\r\n            result.complete && result.complete.then(res => {\r\n                if (res.id === this._validationInfo.result.id) {\r\n                    this._applyValidationResult(res)\r\n                }\r\n            });\r\n            return extend({}, this._validationInfo.result)\r\n        },\r\n        reset() {\r\n            this.target(null);\r\n            var result = {\r\n                id: null,\r\n                isValid: true,\r\n                brokenRule: null,\r\n                pendingRules: null,\r\n                status: VALIDATION_STATUS_VALID,\r\n                complete: null\r\n            };\r\n            this._applyValidationResult(result);\r\n            return result\r\n        },\r\n        _applyValidationResult(result) {\r\n            result.validator = this;\r\n            this._updateValidationResult(result);\r\n            this.target.dxValidator.isValid(this._validationInfo.result.isValid);\r\n            this.target.dxValidator.validationError(this._validationInfo.result.brokenRule);\r\n            this.target.dxValidator.validationErrors(this._validationInfo.result.brokenRules);\r\n            this.target.dxValidator.validationStatus(this._validationInfo.result.status);\r\n            if (result.status === VALIDATION_STATUS_PENDING) {\r\n                if (!this._validationInfo.deferred) {\r\n                    this._validationInfo.deferred = new Deferred;\r\n                    this._validationInfo.result.complete = this._validationInfo.deferred.promise()\r\n                }\r\n                this._eventsStrategy.fireEvent(\"validating\", [this._validationInfo.result]);\r\n                return\r\n            }\r\n            if (result.status !== VALIDATION_STATUS_PENDING) {\r\n                this._eventsStrategy.fireEvent(\"validated\", [result]);\r\n                if (this._validationInfo.deferred) {\r\n                    this._validationInfo.deferred.resolve(result);\r\n                    this._validationInfo.deferred = null\r\n                }\r\n            }\r\n        },\r\n        on(eventName, eventHandler) {\r\n            this._eventsStrategy.on(eventName, eventHandler);\r\n            return this\r\n        },\r\n        off(eventName, eventHandler) {\r\n            this._eventsStrategy.off(eventName, eventHandler);\r\n            return this\r\n        }\r\n    });\r\n    ko.extenders.dxValidator = function(target, option) {\r\n        target.dxValidator = new koDxValidator(target, option);\r\n        target.subscribe(target.dxValidator.validate.bind(target.dxValidator));\r\n        return target\r\n    };\r\n    ValidationEngine.registerModelForValidation = function(model) {\r\n        each(model, (function(name, member) {\r\n            if (ko.isObservable(member) && member.dxValidator) {\r\n                ValidationEngine.registerValidatorInGroup(model, member.dxValidator)\r\n            }\r\n        }))\r\n    };\r\n    ValidationEngine.unregisterModelForValidation = function(model) {\r\n        each(model, (function(name, member) {\r\n            if (ko.isObservable(member) && member.dxValidator) {\r\n                ValidationEngine.removeRegisteredValidator(model, member.dxValidator)\r\n            }\r\n        }))\r\n    };\r\n    ValidationEngine.validateModel = ValidationEngine.validateGroup\r\n}\r\n"]},"metadata":{},"sourceType":"module"}