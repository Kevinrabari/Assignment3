{"ast":null,"code":"/**\r\n* DevExpress Dashboard (filter-panel-extension.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterPanelExtension = void 0;\n\nvar ko = require(\"knockout\");\n\nvar control_options_1 = require(\"../../common/control-options\");\n\nvar model_1 = require(\"../../model\");\n\nvar _dashboard_item_menu_1 = require(\"../items/_dashboard-item-menu\");\n\nvar _item_filter_properties_composer_1 = require(\"../items/_item-filter-properties-composer\");\n\nvar name = 'item-filter-panel';\nvar nameAlias = 'itemFilterPanel';\n\nvar FilterPanelExtension = function () {\n  function FilterPanelExtension(dashboardControl) {\n    this.dashboardControl = dashboardControl;\n    this.name = name;\n    this._subscriptions = [];\n  }\n\n  FilterPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {\n    if (!!itemContextMenu) {\n      var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();\n\n      this._updateContextMenu(itemContextMenu, item);\n    }\n  };\n\n  FilterPanelExtension.prototype._updateContextMenu = function (menu, item) {\n    var _this = this;\n\n    if (menu instanceof _dashboard_item_menu_1.DashboardItemMenu && item instanceof model_1.DataDashboardItem) {\n      menu.contextMenuItems.push({\n        menuItemId: this.name,\n        icon: 'dx-dashboard-item-filter',\n        title: 'DashboardWebStringId.Filters',\n        panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,\n        templateName: 'dx-dashboard-options',\n        detailVisible: ko.observable(false),\n        showMenu: function () {\n          var composer = new _item_filter_properties_composer_1.ItemFilterPropertiesComposer(_this.dashboardControl._dataSourceBrowser);\n          var tabs = composer.composeTabs(item);\n          menu.propertiesController.mainModel({\n            data: {\n              model: item,\n              propertiesTabs: ko.observableArray(tabs)\n            }\n          });\n        },\n        customData: {\n          propertiesController: menu.propertiesController\n        },\n        index: 150\n      });\n    }\n  };\n\n  FilterPanelExtension.prototype.start = function () {\n    var contextMenuExtension = this.dashboardControl.findExtension('item-menu');\n\n    if (contextMenuExtension) {\n      this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));\n\n      this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());\n    }\n  };\n\n  FilterPanelExtension.prototype.stop = function () {\n    this._subscriptions.forEach(function (s) {\n      return s.dispose();\n    });\n\n    this._subscriptions = [];\n  };\n\n  return FilterPanelExtension;\n}();\n\nexports.FilterPanelExtension = FilterPanelExtension;\n\ncontrol_options_1.designerExtensions[name] = function (dashboardControl, options) {\n  return new FilterPanelExtension(dashboardControl);\n};\n\ncontrol_options_1.extensionNameMap[name] = nameAlias;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/designer/extensions/filter-panel-extension.js"],"names":["Object","defineProperty","exports","value","FilterPanelExtension","ko","require","control_options_1","model_1","_dashboard_item_menu_1","_item_filter_properties_composer_1","name","nameAlias","dashboardControl","_subscriptions","prototype","_contextMenuSubscriber","itemContextMenu","item","_actualLayoutController","selectedDashboardItem","_updateContextMenu","menu","_this","DashboardItemMenu","DataDashboardItem","contextMenuItems","push","menuItemId","icon","title","panelWidth","DashboardItemMenuSizes","OptionsPanelWidth","templateName","detailVisible","observable","showMenu","composer","ItemFilterPropertiesComposer","_dataSourceBrowser","tabs","composeTabs","propertiesController","mainModel","data","model","propertiesTabs","observableArray","customData","index","start","contextMenuExtension","findExtension","_itemContextMenu","subscribe","stop","forEach","s","dispose","designerExtensions","options","extensionNameMap"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (filter-panel-extension.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterPanelExtension = void 0;\nvar ko = require(\"knockout\");\nvar control_options_1 = require(\"../../common/control-options\");\nvar model_1 = require(\"../../model\");\nvar _dashboard_item_menu_1 = require(\"../items/_dashboard-item-menu\");\nvar _item_filter_properties_composer_1 = require(\"../items/_item-filter-properties-composer\");\nvar name = 'item-filter-panel';\nvar nameAlias = 'itemFilterPanel';\nvar FilterPanelExtension = (function () {\n    function FilterPanelExtension(dashboardControl) {\n        this.dashboardControl = dashboardControl;\n        this.name = name;\n        this._subscriptions = [];\n    }\n    FilterPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {\n        if (!!itemContextMenu) {\n            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();\n            this._updateContextMenu(itemContextMenu, item);\n        }\n    };\n    FilterPanelExtension.prototype._updateContextMenu = function (menu, item) {\n        var _this = this;\n        if (menu instanceof _dashboard_item_menu_1.DashboardItemMenu && item instanceof model_1.DataDashboardItem) {\n            menu.contextMenuItems.push({\n                menuItemId: this.name,\n                icon: 'dx-dashboard-item-filter',\n                title: 'DashboardWebStringId.Filters',\n                panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,\n                templateName: 'dx-dashboard-options',\n                detailVisible: ko.observable(false),\n                showMenu: function () {\n                    var composer = new _item_filter_properties_composer_1.ItemFilterPropertiesComposer(_this.dashboardControl._dataSourceBrowser);\n                    var tabs = composer.composeTabs(item);\n                    menu.propertiesController.mainModel({\n                        data: {\n                            model: item,\n                            propertiesTabs: ko.observableArray(tabs),\n                        }\n                    });\n                },\n                customData: {\n                    propertiesController: menu.propertiesController,\n                },\n                index: 150\n            });\n        }\n    };\n    FilterPanelExtension.prototype.start = function () {\n        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');\n        if (contextMenuExtension) {\n            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));\n            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());\n        }\n    };\n    FilterPanelExtension.prototype.stop = function () {\n        this._subscriptions.forEach(function (s) { return s.dispose(); });\n        this._subscriptions = [];\n    };\n    return FilterPanelExtension;\n}());\nexports.FilterPanelExtension = FilterPanelExtension;\ncontrol_options_1.designerExtensions[name] = function (dashboardControl, options) { return new FilterPanelExtension(dashboardControl); };\ncontrol_options_1.extensionNameMap[name] = nameAlias;\n"]},"metadata":{},"sourceType":"script"}