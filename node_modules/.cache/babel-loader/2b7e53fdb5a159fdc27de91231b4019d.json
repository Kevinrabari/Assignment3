{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_card-painter.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cardPainter = void 0;\n\nvar tooltip_1 = require(\"devextreme/ui/tooltip\");\n\nvar sparkline_1 = require(\"devextreme/viz/sparkline\");\n\nvar $ = require(\"jquery\");\n\nvar _cssHelper_1 = require(\"../../../viewer/_cssHelper\");\n\nvar _delta_indicator_1 = require(\"../../indicators/_delta-indicator\");\n\nvar _simple_indicator_1 = require(\"../../indicators/_simple-indicator\");\n\nvar _css_class_names_1 = require(\"../_css-class-names\");\n\nvar _card_layout_1 = require(\"./_card-layout\");\n\nvar cardPainter = function () {\n  function cardPainter(data, controlContainer) {\n    this.data = data;\n    this.controlContainer = controlContainer;\n  }\n\n  cardPainter.prototype.draw = function (cardArrangements, layout, _styleSettingsProvider) {\n    this.layout = layout;\n    this._styleSettingsProvider = _styleSettingsProvider;\n    var cardHeight = cardArrangements.getCardHeight();\n    var cardWidth = cardArrangements.getCardWidth();\n    this._cardStyle = layout.getStyleSettings(this.data);\n    var $divCardLayout = $('<div>', {}).addClass(_css_class_names_1.layoutCardCssClassNames.card).css({\n      height: cardHeight,\n      width: cardWidth,\n      'background-color': layout.getCardBackgroundColor()\n    }).append(this.createCardContent(cardArrangements, layout));\n    var divCardLayout = $divCardLayout.get(0);\n    if (this._cardStyle) this._styleSettingsProvider.applyStyleSettings(divCardLayout, null, this._cardStyle, true, null, null, true);\n    return $divCardLayout;\n  };\n\n  cardPainter.prototype.createCardContent = function (cardArrangements, layout) {\n    var contentHeight = cardArrangements.getCardContentHeight();\n    var contentWidth = cardArrangements.getCardContentWidth();\n    var actualContentWidth = layout.maxWidth > 0 ? Math.min(contentWidth, Math.max(layout.minWidth, layout.maxWidth)) : contentWidth;\n    return $('<div>').css({\n      height: contentHeight,\n      width: actualContentWidth\n    }).addClass(_css_class_names_1.layoutCardCssClassNames.content).append(this.createRows(layout.rows, actualContentWidth));\n  };\n\n  cardPainter.prototype.createRows = function (rowModels, contentWidth) {\n    var _this = this;\n\n    var topRows = $('<div>', {\n      'class': _css_class_names_1.layoutCardCssClassNames.contentTopRows\n    }),\n        centerRows = $('<div>', {}),\n        bottomRows = $('<div>', {\n      'class': _css_class_names_1.layoutCardCssClassNames.contentBottomRows\n    });\n    rowModels.forEach(function (rowModel) {\n      var rowDiv = $('<div>');\n      rowDiv.css('paddingBottom', rowModel.indent);\n\n      switch (rowModel.vAlignment) {\n        case _card_layout_1.verticalAlignment.top:\n          topRows.append(rowDiv);\n          break;\n\n        case _card_layout_1.verticalAlignment.bottom:\n          bottomRows.append(rowDiv);\n          break;\n\n        case _card_layout_1.verticalAlignment.center:\n        default:\n          centerRows.append(rowDiv);\n      }\n\n      _this.createRow(rowModel.elements, rowDiv, contentWidth);\n    });\n    if (centerRows.children().length > 0) return [topRows, centerRows, bottomRows];else if (topRows.children().length > 0 || bottomRows.children().length > 0) {\n      return [topRows, bottomRows];\n    }\n  };\n\n  cardPainter.prototype.createRow = function (elementModels, rowDiv, contentWidth) {\n    var leftElements = [],\n        centerElements = [],\n        rightElements = [];\n    elementModels.forEach(function (elementModel) {\n      switch (elementModel.hAlignment) {\n        case _card_layout_1.horizontalAlignment.left:\n          leftElements.push(elementModel);\n          break;\n\n        case _card_layout_1.horizontalAlignment.right:\n          rightElements.push(elementModel);\n          break;\n\n        case _card_layout_1.horizontalAlignment.center:\n        default:\n          centerElements.push(elementModel);\n          break;\n      }\n    });\n\n    if (centerElements.length != 0 && leftElements.length == 0 && rightElements.length == 0) {\n      rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.rowOnlyCenterElements);\n      rowDiv.append(this.createElements(centerElements, contentWidth));\n    } else {\n      rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.row);\n      var leftDiv = $('<div>', {\n        'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements\n      }).appendTo(rowDiv),\n          rightDiv = $('<div>', {\n        'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements\n      }).appendTo(rowDiv);\n      leftDiv.append(this.createElements(leftElements.concat(centerElements), contentWidth));\n      rightDiv.append(this.createElements(rightElements, contentWidth));\n    }\n  };\n\n  cardPainter.prototype.createElements = function (elements, contentWidth) {\n    var _this = this;\n\n    return elements.map(function (element) {\n      if (element instanceof _card_layout_1.cardIndicatorElement) {\n        return _this.createIndicatorElement(element);\n      } else if (element instanceof _card_layout_1.cardSparklineElement) {\n        return _this.createSparklineElement(element, contentWidth);\n      } else {\n        return _this.createDataElement(element);\n      }\n    });\n  };\n\n  cardPainter.prototype.createIndicatorElement = function (indicatorElement) {\n    var indicatorDiv = $('<div>');\n    indicatorDiv.addClass(_css_class_names_1.layoutCardCssClassNames.indicatorElement);\n    var styleSettings = indicatorElement.getStyleSettings(this.data);\n    var cfIconType;\n    if (styleSettings) cfIconType = this._styleSettingsProvider.getIconType(styleSettings);\n    if (cfIconType) this._styleSettingsProvider.applyIndicatorStyle(indicatorDiv[0], cfIconType);else {\n      indicatorDiv.css({\n        height: indicatorElement.height,\n        width: indicatorElement.width\n      }).append(_simple_indicator_1.SimpleIndicator.getIndicator(indicatorElement.getIndicatorType(this.data), indicatorElement.getIsGood(this.data)));\n    }\n    return indicatorDiv;\n  };\n\n  cardPainter.prototype.createSparklineElement = function (sparklineElement, contentWidth) {\n    var sparklineOptions = sparklineElement.getSparklineOptions(this.data);\n    sparklineOptions.size = {\n      height: sparklineElement.height,\n      width: contentWidth\n    };\n    var sparklineContainer = document.createElement('div');\n    new sparkline_1.default(sparklineContainer, sparklineOptions);\n    return $('<div>').css({\n      height: sparklineElement.height\n    }).append(sparklineContainer);\n  };\n\n  cardPainter.prototype.createDataElement = function (textElement) {\n    var elementText = textElement.getText(this.data);\n\n    var elementCssProperties = _cssHelper_1.getEmptyCssPropertyWrappersArray();\n\n    var elementDiv = $('<div>').addClass(_css_class_names_1.layoutCardCssClassNames.rowElement).text(elementText);\n    this.setElementColor(textElement, elementDiv, elementCssProperties);\n    var cssClassName = _css_class_names_1.layoutCardCssClassNames.rowElement + '-' + this.data.getKpiElementId() + '-' + textElement.id;\n\n    if (!this.layout.hasRowElementCssClass(cssClassName)) {\n      elementCssProperties.push(_cssHelper_1.createCssPropertyWrapper('font-family', textElement.fontFamily));\n      elementCssProperties.push(_cssHelper_1.createCssPropertyWrapper('font-size', textElement.fontSize + 'pt'));\n      var cssSelector = '.' + _css_class_names_1.layoutCardCssClassNames.content + ' .' + _css_class_names_1.layoutCardCssClassNames.rowElement + '.' + cssClassName;\n      this.layout.addRowElementCss(cssClassName, cssSelector, elementCssProperties);\n    }\n\n    elementDiv.addClass(cssClassName);\n    var textDiv = document.createElement('div');\n    textDiv.innerText = elementText;\n    elementDiv.append(textDiv);\n    var styleSettings = textElement.getStyleSettings(this.data);\n    if (styleSettings) this._styleSettingsProvider.applyStyleSettings(elementDiv[0], null, styleSettings, false, null, true, false);\n    new tooltip_1.default(textDiv, {\n      container: this.controlContainer,\n      target: elementDiv.get(0),\n      showEvent: {\n        name: 'mouseenter',\n        delay: 800\n      },\n      hideEvent: 'mouseleave'\n    });\n    return elementDiv;\n  };\n\n  cardPainter.prototype.setElementColor = function (element, elementDiv, elementProperties) {\n    if (element.predefinedColor !== 'NotSet') {\n      switch (element.predefinedColor) {\n        case 'Main':\n          elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));\n          break;\n\n        case 'Neutral':\n          elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType());\n          break;\n\n        case 'Bad':\n          elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('down', false));\n          break;\n\n        case 'Good':\n          elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('up', true));\n          break;\n\n        case 'Warning':\n          elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('warning'));\n          break;\n\n        case 'Delta':\n          elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(element.getIndicatorType(this.data), element.getIsGood(this.data)));\n          break;\n      }\n    } else if (element.color) {\n      elementProperties.push(_cssHelper_1.createCssPropertyWrapper('color', element.color));\n    } else {\n      elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));\n    }\n  };\n\n  return cardPainter;\n}();\n\nexports.cardPainter = cardPainter;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/widgets/widgets-viewer/cards/_card-painter.js"],"names":["Object","defineProperty","exports","value","cardPainter","tooltip_1","require","sparkline_1","$","_cssHelper_1","_delta_indicator_1","_simple_indicator_1","_css_class_names_1","_card_layout_1","data","controlContainer","prototype","draw","cardArrangements","layout","_styleSettingsProvider","cardHeight","getCardHeight","cardWidth","getCardWidth","_cardStyle","getStyleSettings","$divCardLayout","addClass","layoutCardCssClassNames","card","css","height","width","getCardBackgroundColor","append","createCardContent","divCardLayout","get","applyStyleSettings","contentHeight","getCardContentHeight","contentWidth","getCardContentWidth","actualContentWidth","maxWidth","Math","min","max","minWidth","content","createRows","rows","rowModels","_this","topRows","contentTopRows","centerRows","bottomRows","contentBottomRows","forEach","rowModel","rowDiv","indent","vAlignment","verticalAlignment","top","bottom","center","createRow","elements","children","length","elementModels","leftElements","centerElements","rightElements","elementModel","hAlignment","horizontalAlignment","left","push","right","rowOnlyCenterElements","createElements","row","leftDiv","rowLeftRightElements","appendTo","rightDiv","concat","map","element","cardIndicatorElement","createIndicatorElement","cardSparklineElement","createSparklineElement","createDataElement","indicatorElement","indicatorDiv","styleSettings","cfIconType","getIconType","applyIndicatorStyle","SimpleIndicator","getIndicator","getIndicatorType","getIsGood","sparklineElement","sparklineOptions","getSparklineOptions","size","sparklineContainer","document","createElement","default","textElement","elementText","getText","elementCssProperties","getEmptyCssPropertyWrappersArray","elementDiv","rowElement","text","setElementColor","cssClassName","getKpiElementId","id","hasRowElementCssClass","createCssPropertyWrapper","fontFamily","fontSize","cssSelector","addRowElementCss","textDiv","innerText","container","target","showEvent","name","delay","hideEvent","elementProperties","predefinedColor","DeltaIndicator","getIndicatorColorType","color"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_card-painter.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cardPainter = void 0;\nvar tooltip_1 = require(\"devextreme/ui/tooltip\");\nvar sparkline_1 = require(\"devextreme/viz/sparkline\");\nvar $ = require(\"jquery\");\nvar _cssHelper_1 = require(\"../../../viewer/_cssHelper\");\nvar _delta_indicator_1 = require(\"../../indicators/_delta-indicator\");\nvar _simple_indicator_1 = require(\"../../indicators/_simple-indicator\");\nvar _css_class_names_1 = require(\"../_css-class-names\");\nvar _card_layout_1 = require(\"./_card-layout\");\nvar cardPainter = (function () {\n    function cardPainter(data, controlContainer) {\n        this.data = data;\n        this.controlContainer = controlContainer;\n    }\n    cardPainter.prototype.draw = function (cardArrangements, layout, _styleSettingsProvider) {\n        this.layout = layout;\n        this._styleSettingsProvider = _styleSettingsProvider;\n        var cardHeight = cardArrangements.getCardHeight();\n        var cardWidth = cardArrangements.getCardWidth();\n        this._cardStyle = layout.getStyleSettings(this.data);\n        var $divCardLayout = $('<div>', {})\n            .addClass(_css_class_names_1.layoutCardCssClassNames.card)\n            .css({\n            height: cardHeight,\n            width: cardWidth,\n            'background-color': layout.getCardBackgroundColor()\n        }).append(this.createCardContent(cardArrangements, layout));\n        var divCardLayout = $divCardLayout.get(0);\n        if (this._cardStyle)\n            this._styleSettingsProvider.applyStyleSettings(divCardLayout, null, this._cardStyle, true, null, null, true);\n        return $divCardLayout;\n    };\n    cardPainter.prototype.createCardContent = function (cardArrangements, layout) {\n        var contentHeight = cardArrangements.getCardContentHeight();\n        var contentWidth = cardArrangements.getCardContentWidth();\n        var actualContentWidth = layout.maxWidth > 0 ? Math.min(contentWidth, Math.max(layout.minWidth, layout.maxWidth)) : contentWidth;\n        return $('<div>')\n            .css({\n            height: contentHeight,\n            width: actualContentWidth\n        }).addClass(_css_class_names_1.layoutCardCssClassNames.content)\n            .append(this.createRows(layout.rows, actualContentWidth));\n    };\n    cardPainter.prototype.createRows = function (rowModels, contentWidth) {\n        var _this = this;\n        var topRows = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.contentTopRows }), centerRows = $('<div>', {}), bottomRows = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.contentBottomRows });\n        rowModels.forEach(function (rowModel) {\n            var rowDiv = $('<div>');\n            rowDiv.css('paddingBottom', rowModel.indent);\n            switch (rowModel.vAlignment) {\n                case _card_layout_1.verticalAlignment.top:\n                    topRows.append(rowDiv);\n                    break;\n                case _card_layout_1.verticalAlignment.bottom:\n                    bottomRows.append(rowDiv);\n                    break;\n                case _card_layout_1.verticalAlignment.center:\n                default:\n                    centerRows.append(rowDiv);\n            }\n            _this.createRow(rowModel.elements, rowDiv, contentWidth);\n        });\n        if (centerRows.children().length > 0)\n            return [topRows, centerRows, bottomRows];\n        else if (topRows.children().length > 0 || bottomRows.children().length > 0) {\n            return [topRows, bottomRows];\n        }\n    };\n    cardPainter.prototype.createRow = function (elementModels, rowDiv, contentWidth) {\n        var leftElements = [], centerElements = [], rightElements = [];\n        elementModels.forEach(function (elementModel) {\n            switch (elementModel.hAlignment) {\n                case _card_layout_1.horizontalAlignment.left:\n                    leftElements.push(elementModel);\n                    break;\n                case _card_layout_1.horizontalAlignment.right:\n                    rightElements.push(elementModel);\n                    break;\n                case _card_layout_1.horizontalAlignment.center:\n                default:\n                    centerElements.push(elementModel);\n                    break;\n            }\n        });\n        if (centerElements.length != 0 && leftElements.length == 0 && rightElements.length == 0) {\n            rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.rowOnlyCenterElements);\n            rowDiv.append(this.createElements(centerElements, contentWidth));\n        }\n        else {\n            rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.row);\n            var leftDiv = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements }).appendTo(rowDiv), rightDiv = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements }).appendTo(rowDiv);\n            leftDiv.append(this.createElements(leftElements.concat(centerElements), contentWidth));\n            rightDiv.append(this.createElements(rightElements, contentWidth));\n        }\n    };\n    cardPainter.prototype.createElements = function (elements, contentWidth) {\n        var _this = this;\n        return elements.map(function (element) {\n            if (element instanceof _card_layout_1.cardIndicatorElement) {\n                return _this.createIndicatorElement(element);\n            }\n            else if (element instanceof _card_layout_1.cardSparklineElement) {\n                return _this.createSparklineElement(element, contentWidth);\n            }\n            else {\n                return _this.createDataElement(element);\n            }\n        });\n    };\n    cardPainter.prototype.createIndicatorElement = function (indicatorElement) {\n        var indicatorDiv = $('<div>');\n        indicatorDiv.addClass(_css_class_names_1.layoutCardCssClassNames.indicatorElement);\n        var styleSettings = indicatorElement.getStyleSettings(this.data);\n        var cfIconType;\n        if (styleSettings)\n            cfIconType = this._styleSettingsProvider.getIconType(styleSettings);\n        if (cfIconType)\n            this._styleSettingsProvider.applyIndicatorStyle(indicatorDiv[0], cfIconType);\n        else {\n            indicatorDiv\n                .css({\n                height: indicatorElement.height,\n                width: indicatorElement.width\n            })\n                .append(_simple_indicator_1.SimpleIndicator.getIndicator(indicatorElement.getIndicatorType(this.data), indicatorElement.getIsGood(this.data)));\n        }\n        return indicatorDiv;\n    };\n    cardPainter.prototype.createSparklineElement = function (sparklineElement, contentWidth) {\n        var sparklineOptions = sparklineElement.getSparklineOptions(this.data);\n        sparklineOptions.size = {\n            height: sparklineElement.height,\n            width: contentWidth\n        };\n        var sparklineContainer = document.createElement('div');\n        new sparkline_1.default(sparklineContainer, sparklineOptions);\n        return $('<div>')\n            .css({\n            height: sparklineElement.height\n        }).append(sparklineContainer);\n    };\n    cardPainter.prototype.createDataElement = function (textElement) {\n        var elementText = textElement.getText(this.data);\n        var elementCssProperties = _cssHelper_1.getEmptyCssPropertyWrappersArray();\n        var elementDiv = $('<div>')\n            .addClass(_css_class_names_1.layoutCardCssClassNames.rowElement)\n            .text(elementText);\n        this.setElementColor(textElement, elementDiv, elementCssProperties);\n        var cssClassName = _css_class_names_1.layoutCardCssClassNames.rowElement + '-' + this.data.getKpiElementId() + '-' + textElement.id;\n        if (!this.layout.hasRowElementCssClass(cssClassName)) {\n            elementCssProperties.push(_cssHelper_1.createCssPropertyWrapper('font-family', textElement.fontFamily));\n            elementCssProperties.push(_cssHelper_1.createCssPropertyWrapper('font-size', textElement.fontSize + 'pt'));\n            var cssSelector = '.' + _css_class_names_1.layoutCardCssClassNames.content + ' .' + _css_class_names_1.layoutCardCssClassNames.rowElement + '.' + cssClassName;\n            this.layout.addRowElementCss(cssClassName, cssSelector, elementCssProperties);\n        }\n        elementDiv.addClass(cssClassName);\n        var textDiv = document.createElement('div');\n        textDiv.innerText = elementText;\n        elementDiv.append(textDiv);\n        var styleSettings = textElement.getStyleSettings(this.data);\n        if (styleSettings)\n            this._styleSettingsProvider.applyStyleSettings(elementDiv[0], null, styleSettings, false, null, true, false);\n        new tooltip_1.default(textDiv, {\n            container: this.controlContainer,\n            target: elementDiv.get(0),\n            showEvent: { name: 'mouseenter', delay: 800 },\n            hideEvent: 'mouseleave'\n        });\n        return elementDiv;\n    };\n    cardPainter.prototype.setElementColor = function (element, elementDiv, elementProperties) {\n        if (element.predefinedColor !== 'NotSet') {\n            switch (element.predefinedColor) {\n                case 'Main':\n                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));\n                    break;\n                case 'Neutral':\n                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType());\n                    break;\n                case 'Bad':\n                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('down', false));\n                    break;\n                case 'Good':\n                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('up', true));\n                    break;\n                case 'Warning':\n                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('warning'));\n                    break;\n                case 'Delta':\n                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(element.getIndicatorType(this.data), element.getIsGood(this.data)));\n                    break;\n            }\n        }\n        else if (element.color) {\n            elementProperties.push(_cssHelper_1.createCssPropertyWrapper('color', element.color));\n        }\n        else {\n            elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));\n        }\n    };\n    return cardPainter;\n}());\nexports.cardPainter = cardPainter;\n"]},"metadata":{},"sourceType":"script"}