{"ast":null,"code":"/**\r\n* DevExpress Dashboard (range-generator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatConditionRangeGenerator = void 0;\n\nvar color_1 = require(\"../../../color\");\n\nvar _helper_classes_1 = require(\"../../../internal/_helper-classes\");\n\nvar _format_rules_common_1 = require(\"../../metadata/_format-rules-common\");\n\nvar appearance_settings_1 = require(\"../../style-settings/appearance-settings\");\n\nvar bar_style_settings_1 = require(\"../../style-settings/bar-style-settings\");\n\nvar icon_settings_1 = require(\"../../style-settings/icon-settings\");\n\nvar range_converter_1 = require(\"./range-converter\");\n\nvar range_info_1 = require(\"./range-info\");\n\nvar FormatConditionRangeGenerator = function () {\n  function FormatConditionRangeGenerator() {}\n\n  FormatConditionRangeGenerator.generateRangeSet = function (condition, type) {\n    if (type === range_converter_1.FormatConditionRangeSetPredefinedType.None || type === range_converter_1.FormatConditionRangeSetPredefinedType.Custom) return;\n    condition.valueType(!!condition.dateTimeGroupInterval() ? 'Number' : 'Percent');\n    var ranges = [];\n    var styleList = range_converter_1.FormatConditionConverter.getStyleList(type);\n\n    if (styleList.isIcon) {\n      ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), function (i) {\n        return new icon_settings_1.IconSettings({\n          '@IconType': styleList.list[i]\n        });\n      });\n    } else {\n      ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), function (i) {\n        return condition.createStyleSettings(styleList.list[i]);\n      });\n    }\n\n    condition.rangeSet.ranges(ranges);\n  };\n\n  FormatConditionRangeGenerator.generateGradientByType = function (condition, type, segmentNumber, isBar) {\n    if (isBar === void 0) {\n      isBar = false;\n    }\n\n    if (type === range_converter_1.FormatConditionRangeGradientPredefinedType.None || type === range_converter_1.FormatConditionRangeGradientPredefinedType.Custom) return;\n    var styles = range_converter_1.FormatConditionConverter.toAppearanceTypes(type).map(function (t) {\n      return isBar ? new bar_style_settings_1.BarStyleSettings({\n        '@PredefinedColor': t\n      }) : new appearance_settings_1.AppearanceSettings({\n        '@AppearanceType': t\n      });\n    });\n    FormatConditionRangeGenerator.generateGradientByStyles(condition, styles, segmentNumber);\n  };\n\n  FormatConditionRangeGenerator.generateGradientByStyles = function (condition, styles, segmentNumber) {\n    var colorsCount = styles.length;\n\n    if (segmentNumber >= colorsCount) {\n      condition.generateAsPercent(styles[0], styles[colorsCount - 1], segmentNumber);\n      if (colorsCount == 3) condition.rangeSet.ranges()[Math.floor(segmentNumber / 2)].styleSettings(styles[1]);\n\n      if (colorsCount == 4) {\n        condition.rangeSet.ranges()[Math.floor(segmentNumber / 3)].styleSettings(styles[1]);\n        condition.rangeSet.ranges()[Math.floor(2 * segmentNumber / 3)].styleSettings(styles[2]);\n      }\n    }\n  };\n\n  FormatConditionRangeGenerator.generateGradientColors = function (gradientType, count) {\n    var gradientColors = [];\n    var appearanceTypes = range_converter_1.FormatConditionConverter.toAppearanceTypes(gradientType);\n    var prevIndex = 0,\n        nextIndex = count - 1;\n    gradientColors[prevIndex] = color_1.Color.fromAppearance(appearanceTypes[0]);\n    gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[appearanceTypes.length - 1]);\n\n    if (appearanceTypes.length == 3) {\n      nextIndex = count / 2;\n      gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[1]);\n    }\n\n    for (var i = 1; i < count - 1; i++) {\n      if (appearanceTypes.length == 3 && i === count / 2) {\n        nextIndex = count - 1;\n      }\n\n      gradientColors[i] = color_1.Color.fromDxColor(gradientColors[nextIndex].blend(gradientColors[prevIndex], (i - nextIndex) / (prevIndex - nextIndex)));\n    }\n\n    return gradientColors;\n  };\n\n  FormatConditionRangeGenerator.getPredefinedType = function (actualStyles, func) {\n    var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeSetPredefinedType);\n\n    for (var i = 0; i < enumValues.length; i++) {\n      var rangePredefinedType = enumValues[i];\n      if (rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.Custom && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles)) return rangePredefinedType;\n    }\n\n    return range_converter_1.FormatConditionRangeSetPredefinedType.Custom;\n  };\n\n  FormatConditionRangeGenerator.getGradientPredefinedType = function (actualStyles, func) {\n    var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeGradientPredefinedType);\n\n    for (var i = 0; i < enumValues.length; i++) {\n      var rangePredefinedType = enumValues[i];\n      if (rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.Custom && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles)) return rangePredefinedType;\n    }\n\n    return range_converter_1.FormatConditionRangeGradientPredefinedType.Custom;\n  };\n\n  FormatConditionRangeGenerator.calculateRangePercentValues = function (segmentCount) {\n    var values = [];\n\n    for (var i = 0; i < segmentCount; i++) {\n      values.push(FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount));\n    }\n\n    return values;\n  };\n\n  FormatConditionRangeGenerator.compareValues = function (val1, val2, changeType) {\n    var negativeInfinity = negativeInfinity;\n\n    var compare = function (a, b) {\n      if (a == b) {\n        return 0;\n      }\n\n      if (!a) {\n        return -1;\n      }\n\n      if (!b) {\n        return 1;\n      }\n\n      return a > b ? 1 : -1;\n    };\n\n    if (changeType && !!val1 && !!val2) {\n      var firstNegativeInfinity = val1 == negativeInfinity,\n          secondNegativeInfinity = val2 == negativeInfinity;\n\n      if (firstNegativeInfinity && secondNegativeInfinity) {\n        return 0;\n      }\n\n      if (firstNegativeInfinity) {\n        return -1;\n      }\n\n      if (secondNegativeInfinity) {\n        return 1;\n      }\n    }\n\n    return compare(val1, val2);\n  };\n\n  FormatConditionRangeGenerator._isStylesEqual = function (actual, predefined) {\n    if (actual.length != predefined.length) return false;\n\n    for (var i = 0; i < actual.length; i++) {\n      if (actual[i] != null && predefined[i] == null || actual[i] == null && predefined[i] != null || !actual[i].equals(predefined[i])) return false;\n    }\n\n    return true;\n  };\n\n  FormatConditionRangeGenerator._getPercentRangeStops = function (rangeStopsCount) {\n    var marks = new Array(rangeStopsCount);\n\n    for (var i = 0; i < rangeStopsCount; i++) {\n      marks.push(i * 100 / rangeStopsCount);\n    }\n\n    return marks;\n  };\n\n  FormatConditionRangeGenerator._calculateRangePercent = function (index, count, decimals) {\n    if (decimals === void 0) {\n      decimals = 0;\n    }\n\n    return Math.round(100 * (index / count));\n  };\n\n  FormatConditionRangeGenerator._generateRangeSet = function (segmentCount, dataType, dateTimeGroupInterval, createStyleProc) {\n    var ranges = [];\n\n    for (var i = 0; i < segmentCount; i++) {\n      var rangeInfo = new range_info_1.RangeInfo();\n      var value = !dateTimeGroupInterval ? FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount) : FormatConditionRangeGenerator._calculateRangeDate(dateTimeGroupInterval, i, segmentCount);\n      rangeInfo.value.setValue(value, _format_rules_common_1.fieldTypes[dataType]);\n      rangeInfo.styleSettings(createStyleProc(i));\n      ranges.push(rangeInfo);\n    }\n\n    return ranges;\n  };\n\n  FormatConditionRangeGenerator._calculateRangeDate = function (groupInterval, i, segmentCount) {\n    var dateIndex = segmentCount - i - 1;\n\n    switch (groupInterval) {\n      case 'DateHour':\n        return DateTime.addHours(-dateIndex);\n\n      case 'DateHourMinute':\n        return DateTime.addMinutes(-dateIndex);\n\n      case 'DateHourMinuteSecond':\n        return DateTime.addSeconds(-dateIndex);\n\n      case 'DayMonthYear':\n      case 'None':\n        return DateTime.addDays(-dateIndex);\n\n      case 'WeekYear':\n        return DateTime.addWeeks(-dateIndex);\n\n      case 'MonthYear':\n        return DateTime.addMonths(-dateIndex);\n\n      case 'QuarterYear':\n        return DateTime.addMonths(-dateIndex * 3);\n\n      case 'Year':\n        return DateTime.addYears(-dateIndex).getFullYear();\n\n      case 'WeekOfMonth':\n      case 'WeekOfYear':\n      case 'Second':\n      case 'Quarter':\n      case 'Hour':\n      case 'Minute':\n      case 'Month':\n      case 'DayOfWeek':\n      case 'DayOfYear':\n      case 'Day':\n      default:\n        return i;\n    }\n  };\n\n  return FormatConditionRangeGenerator;\n}();\n\nexports.FormatConditionRangeGenerator = FormatConditionRangeGenerator;\n\nvar DateTime = function () {\n  function DateTime() {}\n\n  DateTime.addHours = function (v) {\n    var date = new Date();\n    date.setTime(date.getTime() + v * 60 * 60 * 1000);\n    return date;\n  };\n\n  DateTime.addMinutes = function (v) {\n    var date = new Date();\n    date.setTime(date.getTime() + v * 60 * 1000);\n    return date;\n  };\n\n  DateTime.addSeconds = function (v) {\n    var date = new Date();\n    date.setTime(date.getTime() + v * 1000);\n    return date;\n  };\n\n  DateTime.addDays = function (v) {\n    var date = new Date();\n    date.setTime(date.getTime() + v * 24 * 60 * 60 * 1000);\n    return date;\n  };\n\n  DateTime.addMonths = function (v) {\n    var date = new Date();\n    var year = date.getFullYear();\n    var newMonth = date.getMonth() + v;\n    var month = newMonth % 12;\n\n    if (month < 0) {\n      month += 12;\n    }\n\n    date.setMonth(month);\n    date.setFullYear(year + (newMonth - month) / 12);\n    return date;\n  };\n\n  DateTime.addYears = function (v) {\n    var date = new Date();\n    date.setFullYear(date.getFullYear() + v);\n    return date;\n  };\n\n  DateTime.addWeeks = function (v) {\n    return DateTime.addDays(7 * v);\n  };\n\n  return DateTime;\n}();","map":{"version":3,"sources":["/Users/kevinrabari/Desktop/Georgian College Work/1005_ Mobile Web Application/Assignment3/node_modules/devexpress-dashboard/model/format-rules/conditions/range/range-generator.js"],"names":["Object","defineProperty","exports","value","FormatConditionRangeGenerator","color_1","require","_helper_classes_1","_format_rules_common_1","appearance_settings_1","bar_style_settings_1","icon_settings_1","range_converter_1","range_info_1","generateRangeSet","condition","type","FormatConditionRangeSetPredefinedType","None","Custom","valueType","dateTimeGroupInterval","ranges","styleList","FormatConditionConverter","getStyleList","isIcon","_generateRangeSet","list","length","dataType","i","IconSettings","createStyleSettings","rangeSet","generateGradientByType","segmentNumber","isBar","FormatConditionRangeGradientPredefinedType","styles","toAppearanceTypes","map","t","BarStyleSettings","AppearanceSettings","generateGradientByStyles","colorsCount","generateAsPercent","Math","floor","styleSettings","generateGradientColors","gradientType","count","gradientColors","appearanceTypes","prevIndex","nextIndex","Color","fromAppearance","fromDxColor","blend","getPredefinedType","actualStyles","func","enumValues","EnumManager","getValues","rangePredefinedType","_isStylesEqual","getGradientPredefinedType","calculateRangePercentValues","segmentCount","values","push","_calculateRangePercent","compareValues","val1","val2","changeType","negativeInfinity","compare","a","b","firstNegativeInfinity","secondNegativeInfinity","actual","predefined","equals","_getPercentRangeStops","rangeStopsCount","marks","Array","index","decimals","round","createStyleProc","rangeInfo","RangeInfo","_calculateRangeDate","setValue","fieldTypes","groupInterval","dateIndex","DateTime","addHours","addMinutes","addSeconds","addDays","addWeeks","addMonths","addYears","getFullYear","v","date","Date","setTime","getTime","year","newMonth","getMonth","month","setMonth","setFullYear"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (range-generator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatConditionRangeGenerator = void 0;\nvar color_1 = require(\"../../../color\");\nvar _helper_classes_1 = require(\"../../../internal/_helper-classes\");\nvar _format_rules_common_1 = require(\"../../metadata/_format-rules-common\");\nvar appearance_settings_1 = require(\"../../style-settings/appearance-settings\");\nvar bar_style_settings_1 = require(\"../../style-settings/bar-style-settings\");\nvar icon_settings_1 = require(\"../../style-settings/icon-settings\");\nvar range_converter_1 = require(\"./range-converter\");\nvar range_info_1 = require(\"./range-info\");\nvar FormatConditionRangeGenerator = (function () {\n    function FormatConditionRangeGenerator() {\n    }\n    FormatConditionRangeGenerator.generateRangeSet = function (condition, type) {\n        if (type === range_converter_1.FormatConditionRangeSetPredefinedType.None || type === range_converter_1.FormatConditionRangeSetPredefinedType.Custom)\n            return;\n        condition.valueType(!!condition.dateTimeGroupInterval() ? 'Number' : 'Percent');\n        var ranges = [];\n        var styleList = range_converter_1.FormatConditionConverter.getStyleList(type);\n        if (styleList.isIcon) {\n            ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), function (i) { return new icon_settings_1.IconSettings({\n                '@IconType': styleList.list[i]\n            }); });\n        }\n        else {\n            ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), function (i) {\n                return condition.createStyleSettings(styleList.list[i]);\n            });\n        }\n        condition.rangeSet.ranges(ranges);\n    };\n    FormatConditionRangeGenerator.generateGradientByType = function (condition, type, segmentNumber, isBar) {\n        if (isBar === void 0) { isBar = false; }\n        if (type === range_converter_1.FormatConditionRangeGradientPredefinedType.None || type === range_converter_1.FormatConditionRangeGradientPredefinedType.Custom)\n            return;\n        var styles = range_converter_1.FormatConditionConverter\n            .toAppearanceTypes(type)\n            .map(function (t) { return isBar ? new bar_style_settings_1.BarStyleSettings({ '@PredefinedColor': t }) : new appearance_settings_1.AppearanceSettings({ '@AppearanceType': t }); });\n        FormatConditionRangeGenerator.generateGradientByStyles(condition, styles, segmentNumber);\n    };\n    FormatConditionRangeGenerator.generateGradientByStyles = function (condition, styles, segmentNumber) {\n        var colorsCount = styles.length;\n        if (segmentNumber >= colorsCount) {\n            condition.generateAsPercent(styles[0], styles[colorsCount - 1], segmentNumber);\n            if (colorsCount == 3)\n                condition.rangeSet.ranges()[Math.floor(segmentNumber / 2)].styleSettings(styles[1]);\n            if (colorsCount == 4) {\n                condition.rangeSet.ranges()[Math.floor(segmentNumber / 3)].styleSettings(styles[1]);\n                condition.rangeSet.ranges()[Math.floor(2 * segmentNumber / 3)].styleSettings(styles[2]);\n            }\n        }\n    };\n    FormatConditionRangeGenerator.generateGradientColors = function (gradientType, count) {\n        var gradientColors = [];\n        var appearanceTypes = range_converter_1.FormatConditionConverter.toAppearanceTypes(gradientType);\n        var prevIndex = 0, nextIndex = count - 1;\n        gradientColors[prevIndex] = color_1.Color.fromAppearance(appearanceTypes[0]);\n        gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[appearanceTypes.length - 1]);\n        if (appearanceTypes.length == 3) {\n            nextIndex = count / 2;\n            gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[1]);\n        }\n        for (var i = 1; i < count - 1; i++) {\n            if (appearanceTypes.length == 3 && (i === count / 2)) {\n                nextIndex = count - 1;\n            }\n            gradientColors[i] = color_1.Color.fromDxColor(gradientColors[nextIndex].blend(gradientColors[prevIndex], (i - nextIndex) / (prevIndex - nextIndex)));\n        }\n        return gradientColors;\n    };\n    FormatConditionRangeGenerator.getPredefinedType = function (actualStyles, func) {\n        var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeSetPredefinedType);\n        for (var i = 0; i < enumValues.length; i++) {\n            var rangePredefinedType = enumValues[i];\n            if (rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.Custom\n                && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles))\n                return rangePredefinedType;\n        }\n        return range_converter_1.FormatConditionRangeSetPredefinedType.Custom;\n    };\n    FormatConditionRangeGenerator.getGradientPredefinedType = function (actualStyles, func) {\n        var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeGradientPredefinedType);\n        for (var i = 0; i < enumValues.length; i++) {\n            var rangePredefinedType = enumValues[i];\n            if (rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.Custom\n                && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles))\n                return rangePredefinedType;\n        }\n        return range_converter_1.FormatConditionRangeGradientPredefinedType.Custom;\n    };\n    FormatConditionRangeGenerator.calculateRangePercentValues = function (segmentCount) {\n        var values = [];\n        for (var i = 0; i < segmentCount; i++) {\n            values.push(FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount));\n        }\n        return values;\n    };\n    FormatConditionRangeGenerator.compareValues = function (val1, val2, changeType) {\n        var negativeInfinity = negativeInfinity;\n        var compare = function (a, b) {\n            if (a == b) {\n                return 0;\n            }\n            if (!a) {\n                return -1;\n            }\n            if (!b) {\n                return 1;\n            }\n            return a > b ? 1 : -1;\n        };\n        if (changeType && !!val1 && !!val2) {\n            var firstNegativeInfinity = (val1 == negativeInfinity), secondNegativeInfinity = (val2 == negativeInfinity);\n            if (firstNegativeInfinity && secondNegativeInfinity) {\n                return 0;\n            }\n            if (firstNegativeInfinity) {\n                return -1;\n            }\n            if (secondNegativeInfinity) {\n                return 1;\n            }\n        }\n        return compare(val1, val2);\n    };\n    FormatConditionRangeGenerator._isStylesEqual = function (actual, predefined) {\n        if (actual.length != predefined.length)\n            return false;\n        for (var i = 0; i < actual.length; i++) {\n            if ((actual[i] != null && predefined[i] == null) ||\n                (actual[i] == null && predefined[i] != null) ||\n                !actual[i].equals(predefined[i]))\n                return false;\n        }\n        return true;\n    };\n    FormatConditionRangeGenerator._getPercentRangeStops = function (rangeStopsCount) {\n        var marks = new Array(rangeStopsCount);\n        for (var i = 0; i < rangeStopsCount; i++) {\n            marks.push(i * 100 / rangeStopsCount);\n        }\n        return marks;\n    };\n    FormatConditionRangeGenerator._calculateRangePercent = function (index, count, decimals) {\n        if (decimals === void 0) { decimals = 0; }\n        return Math.round(100 * (index / count));\n    };\n    FormatConditionRangeGenerator._generateRangeSet = function (segmentCount, dataType, dateTimeGroupInterval, createStyleProc) {\n        var ranges = [];\n        for (var i = 0; i < segmentCount; i++) {\n            var rangeInfo = new range_info_1.RangeInfo();\n            var value = !dateTimeGroupInterval ? FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount) : FormatConditionRangeGenerator._calculateRangeDate(dateTimeGroupInterval, i, segmentCount);\n            rangeInfo.value.setValue(value, _format_rules_common_1.fieldTypes[dataType]);\n            rangeInfo.styleSettings(createStyleProc(i));\n            ranges.push(rangeInfo);\n        }\n        return ranges;\n    };\n    FormatConditionRangeGenerator._calculateRangeDate = function (groupInterval, i, segmentCount) {\n        var dateIndex = segmentCount - i - 1;\n        switch (groupInterval) {\n            case 'DateHour':\n                return DateTime.addHours(-dateIndex);\n            case 'DateHourMinute':\n                return DateTime.addMinutes(-dateIndex);\n            case 'DateHourMinuteSecond':\n                return DateTime.addSeconds(-dateIndex);\n            case 'DayMonthYear':\n            case 'None':\n                return DateTime.addDays(-dateIndex);\n            case 'WeekYear':\n                return DateTime.addWeeks(-dateIndex);\n            case 'MonthYear':\n                return DateTime.addMonths(-dateIndex);\n            case 'QuarterYear':\n                return DateTime.addMonths(-dateIndex * 3);\n            case 'Year':\n                return DateTime.addYears(-dateIndex).getFullYear();\n            case 'WeekOfMonth':\n            case 'WeekOfYear':\n            case 'Second':\n            case 'Quarter':\n            case 'Hour':\n            case 'Minute':\n            case 'Month':\n            case 'DayOfWeek':\n            case 'DayOfYear':\n            case 'Day':\n            default:\n                return i;\n        }\n    };\n    return FormatConditionRangeGenerator;\n}());\nexports.FormatConditionRangeGenerator = FormatConditionRangeGenerator;\nvar DateTime = (function () {\n    function DateTime() {\n    }\n    DateTime.addHours = function (v) {\n        var date = new Date();\n        date.setTime(date.getTime() + (v * 60 * 60 * 1000));\n        return date;\n    };\n    DateTime.addMinutes = function (v) {\n        var date = new Date();\n        date.setTime(date.getTime() + (v * 60 * 1000));\n        return date;\n    };\n    DateTime.addSeconds = function (v) {\n        var date = new Date();\n        date.setTime(date.getTime() + (v * 1000));\n        return date;\n    };\n    DateTime.addDays = function (v) {\n        var date = new Date();\n        date.setTime(date.getTime() + (v * 24 * 60 * 60 * 1000));\n        return date;\n    };\n    DateTime.addMonths = function (v) {\n        var date = new Date();\n        var year = date.getFullYear();\n        var newMonth = date.getMonth() + v;\n        var month = newMonth % 12;\n        if (month < 0) {\n            month += 12;\n        }\n        date.setMonth(month);\n        date.setFullYear(year + (newMonth - month) / 12);\n        return date;\n    };\n    DateTime.addYears = function (v) {\n        var date = new Date();\n        date.setFullYear(date.getFullYear() + v);\n        return date;\n    };\n    DateTime.addWeeks = function (v) {\n        return DateTime.addDays(7 * v);\n    };\n    return DateTime;\n}());\n"]},"metadata":{},"sourceType":"script"}