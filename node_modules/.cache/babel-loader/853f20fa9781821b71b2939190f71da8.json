{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_choropleth-map-item.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.choroplethMapItem = void 0;\n\nvar _jquery_helpers_1 = require(\"../../data/_jquery-helpers\");\n\nvar _utils_1 = require(\"../../data/_utils\");\n\nvar _z_index_1 = require(\"../../data/_z-index\");\n\nvar _consts_1 = require(\"../widgets/indicators/_consts\");\n\nvar _map_item_1 = require(\"./_map-item\");\n\nvar choroplethMapItem = function (_super) {\n  __extends(choroplethMapItem, _super);\n\n  function choroplethMapItem(container, options) {\n    return _super.call(this, container, options) || this;\n  }\n\n  Object.defineProperty(choroplethMapItem.prototype, \"dataController\", {\n    get: function () {\n      return this._dataController;\n    },\n    set: function (dataController) {\n      this._dataController = dataController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  choroplethMapItem.prototype.selectTuple = function (tuple, state) {\n    var that = this;\n    that.mapViewer.getLayerByName('area').getElements().forEach(function (item) {\n      if (item.attribute('selectionName') == tuple[0].value) item.selected(state);\n    });\n  };\n\n  choroplethMapItem.prototype._setSelectionUnsafe = function (values) {\n    _super.prototype._setSelectionUnsafe.call(this, values);\n\n    var that = this;\n    this.clearSelection();\n\n    if (values && values.length) {\n      that.mapViewer.getLayerByName('area').getElements().forEach(function (item) {\n        values.forEach(function (value) {\n          if (item.attribute('selectionName') == value) item.selected(true);\n        });\n      });\n    }\n  };\n\n  choroplethMapItem.prototype.updateContentStateUnsafe = function () {\n    this.mapViewer.option('layers[0].hoverEnabled', this._getCustomHoverEnabled());\n  };\n\n  choroplethMapItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {\n    var options = _jquery_helpers_1.deepExtend(this._getMapViewerOptions(), this._getChoroplethMapViewerOptions());\n\n    this._renderContentInternal(element, changeExisting, options);\n\n    return false;\n  };\n\n  choroplethMapItem.prototype._getChoroplethMapViewerOptions = function () {\n    var that = this,\n        viewModel = that.options.ViewModel,\n        mapItems = viewModel.MapItems,\n        mapDataSource = that._getMapDataSource(mapItems, viewModel.ShapeTitleAttributeName),\n        choroplethColorizer = viewModel.ChoroplethColorizer,\n        tooltipAttributeName = viewModel.ToolTipAttributeName,\n        tooltipMeasures = viewModel.TooltipMeasures,\n        colors,\n        rangeStops,\n        legend,\n        i;\n\n    for (i = 0; i < mapItems.length; i++) {\n      var attributeText = that._findAttributeValueByName(mapItems[i].Attributes, tooltipAttributeName);\n\n      mapDataSource[i].attributes.tooltip = '<b>' + that._getHtml(attributeText) + '</b>';\n    }\n\n    if (choroplethColorizer && that._dataController.hasRecords()) {\n      if (choroplethColorizer.ValueName) {\n        that._fillValueMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);\n\n        rangeStops = that._getRangeStops(choroplethColorizer);\n        colors = that._getColors(choroplethColorizer.Colorizer.Colors);\n\n        if (!colors) {\n          colors = rangeStops.length > 2 ? ['#5F8195', '#B55951'] : ['#5F8195'];\n        }\n\n        legend = that._getColorLegend(viewModel.Legend, that._dataController.getMeasureDescriptorById(choroplethColorizer.ValueId));\n      }\n\n      if (choroplethColorizer.DeltaValueName) {\n        that._fillDeltaMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);\n\n        colors = ['rgb(229, 82, 83)', 'rgb(224, 194, 58)', 'rgb(154, 181, 126)'];\n        rangeStops = [0, 1, 2, 3];\n      }\n    }\n\n    return {\n      layers: that._configureGeometryLayers(mapDataSource, that._getArea(viewModel, colors, rangeStops)),\n      onClick: function (e) {\n        if (e.target && e.target.layer.name === 'area' && e.target.attribute('selectionName')) {\n          that._raiseItemClick(e.target);\n        }\n      },\n      legends: [legend],\n      tooltip: {\n        enabled: true,\n        zIndex: _z_index_1.zIndex.dashboardItemTooltips,\n        container: _utils_1.tooltipContainerSelector,\n        customizeTooltip: function (arg) {\n          if (arg.layer.name === 'area') return {\n            html: arg.attribute('tooltip')\n          };\n        }\n      }\n    };\n  };\n\n  choroplethMapItem.prototype._getColorLegend = function (legendViewModel, measureDescriptor) {\n    var legend = this._getLegend(legendViewModel);\n\n    if (legend) {\n      legend.source = {\n        layer: 'area',\n        grouping: 'color'\n      };\n\n      legend.customizeText = function (arg) {\n        return measureDescriptor.format(arg.start);\n      };\n    }\n\n    return legend;\n  };\n\n  choroplethMapItem.prototype._fillMeasureToolTip = function (mapDataSourceItem, attribute, tooltipMeasures) {\n    var displayText, tooltipViewModel, i;\n\n    if (tooltipMeasures) {\n      for (i = 0; i < tooltipMeasures.length; i++) {\n        tooltipViewModel = tooltipMeasures[i];\n        displayText = this._dataController.getDisplayText(attribute, tooltipViewModel.DataId);\n\n        if (displayText != null) {\n          mapDataSourceItem.attributes.tooltip += '<br>' + this._getToolTip(tooltipViewModel.Caption, displayText);\n        }\n      }\n    }\n  };\n\n  choroplethMapItem.prototype._fillValueMapDataSourceAttrs = function (mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {\n    var attributeName = choroplethColorizer.AttributeName,\n        attribute,\n        selectionName,\n        displayText;\n\n    for (var i = 0; i < mapItems.length; i++) {\n      attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);\n      selectionName = this._dataController.getUniqueValue(attribute);\n\n      if (selectionName) {\n        displayText = this._dataController.getDisplayText(attribute, choroplethColorizer.ValueId);\n        mapDataSource[i].attributes.selectionName = selectionName;\n        mapDataSource[i].attributes.selected = this._isSelected([selectionName]);\n        mapDataSource[i].attributes.value = this._dataController.getValue(attribute, choroplethColorizer.ValueId);\n        mapDataSource[i].attributes.tooltip += '<br>' + this._getToolTip(choroplethColorizer.ValueName, displayText);\n\n        this._correctAttributesTitle(mapDataSource[i].attributes, displayText);\n\n        this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);\n      }\n    }\n  };\n\n  choroplethMapItem.prototype._fillDeltaMapDataSourceAttrs = function (mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {\n    var attributeName = choroplethColorizer.AttributeName,\n        selectionName,\n        attribute,\n        toolTip,\n        deltaValue,\n        value,\n        isGood,\n        displayText,\n        indicatorType;\n\n    for (var i = 0; i < mapItems.length; i++) {\n      attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);\n      selectionName = this._dataController.getUniqueValue(attribute);\n\n      if (selectionName) {\n        mapDataSource[i].attributes.selectionName = selectionName;\n        mapDataSource[i].attributes.selected = this._isSelected([selectionName]);\n        deltaValue = this._dataController.getDeltaValue(attribute, choroplethColorizer.DeltaValueId);\n        isGood = deltaValue.getIsGood().getValue();\n        indicatorType = this._convertIndicatorType(deltaValue.getIndicatorType().getValue());\n        mapDataSource[i].attributes.value = this._getDeltaColorValue(indicatorType, isGood);\n        displayText = deltaValue.getActualValue().getDisplayText();\n        toolTip = '<br>' + this._getToolTip(choroplethColorizer.ActualValueName, displayText);\n        value = this._getDeltaValue(deltaValue, choroplethColorizer.DeltaValueType);\n\n        if (value) {\n          displayText = value.getDisplayText();\n          var deltaValueName = choroplethColorizer.DeltaValueType === 'TargetValue' ? choroplethColorizer.TargetValueName : choroplethColorizer.DeltaValueName;\n          toolTip += '<br>' + this._getToolTip(deltaValueName, displayText);\n        }\n\n        mapDataSource[i].attributes.tooltip += toolTip;\n\n        this._correctAttributesTitle(mapDataSource[i].attributes, displayText);\n\n        this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);\n      }\n    }\n  };\n\n  choroplethMapItem.prototype._correctAttributesTitle = function (attributes, displayText) {\n    var viewModel = this.options.ViewModel;\n\n    if (viewModel.IncludeSummaryValueToShapeTitle) {\n      if (attributes.title) attributes.title += '\\r\\n' + displayText;else attributes.title = displayText;\n    }\n  };\n\n  choroplethMapItem.prototype._getDeltaValue = function (deltaValue, deltaValueType) {\n    switch (deltaValueType) {\n      case 'AbsoluteVariation':\n        return deltaValue.getAbsoluteVariation();\n\n      case 'PercentVariation':\n        return deltaValue.getPercentVariation();\n\n      case 'PercentOfTarget':\n        return deltaValue.getPercentOfTarget();\n\n      case 'TargetValue':\n        return deltaValue.getTargetValue();\n\n      case 'ActualValue':\n      default:\n        return null;\n    }\n  };\n\n  choroplethMapItem.prototype._findAttributeValueByName = function (attributes, attributeName) {\n    for (var i = 0; i < attributes.length; i++) {\n      if (attributes[i].Name === attributeName) {\n        return attributes[i].Value;\n      }\n    }\n  };\n\n  choroplethMapItem.prototype._getRangeStops = function (choroplethColorizer) {\n    var minMax = this._dataController.getMinMax(choroplethColorizer.ValueId);\n\n    return this._updateRangeStops(choroplethColorizer.Colorizer.RangeStops, minMax.min, minMax.max, choroplethColorizer.Colorizer.UsePercentRangeStops);\n  };\n\n  choroplethMapItem.prototype._convertIndicatorType = function (type) {\n    var indicatorTypes = ['none', 'up', 'down', 'warning'];\n    return indicatorTypes[type];\n  };\n\n  choroplethMapItem.prototype._getDeltaColorValue = function (indicatorType, isGood) {\n    switch (indicatorType) {\n      case _consts_1.indicatorType.up:\n      case _consts_1.indicatorType.down:\n        return isGood ? 2.5 : 0.5;\n\n      case _consts_1.indicatorType.warning:\n        return 1.5;\n\n      default:\n        return -1;\n    }\n  };\n\n  choroplethMapItem.prototype._getArea = function (viewModel, colors, rangeStops) {\n    var that = this,\n        selectionDisabled = that._selectionMode() === 'none';\n    return __assign(__assign({}, that._getLabelSettings(viewModel)), {\n      colorGroupingField: 'value',\n      colorGroups: rangeStops,\n      palette: colors,\n      customize: function (items) {\n        items.forEach(function (item) {\n          item.selected(item.attribute('selected'));\n\n          if (selectionDisabled || item.attribute('value') === undefined) {\n            item.applySettings({\n              hoveredBorderColor: null,\n              hoveredClass: null,\n              hoverEnabled: false\n            });\n          }\n        });\n      },\n      selectionMode: 'multiple'\n    });\n  };\n\n  choroplethMapItem.prototype._getDataPoint = function (element) {\n    var that = this;\n    return {\n      getValues: function () {\n        return that._getElementInteractionValue(element, that.options.ViewModel);\n      },\n      getMeasureIds: function () {\n        return [that.options.ViewModel.ChoroplethColorizer.ValueId];\n      },\n      getDeltaIds: function () {\n        return [];\n      }\n    };\n  };\n\n  choroplethMapItem.prototype._getElementInteractionValue = function (element, viewModel) {\n    return !!this.options.ViewModel.ChoroplethColorizer ? [element.attribute('selectionName')] : [];\n  };\n\n  return choroplethMapItem;\n}(_map_item_1.mapItem);\n\nexports.choroplethMapItem = choroplethMapItem;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/viewer-items/_choropleth-map-item.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","defineProperty","exports","value","choroplethMapItem","_jquery_helpers_1","require","_utils_1","_z_index_1","_consts_1","_map_item_1","_super","container","options","get","_dataController","set","dataController","enumerable","configurable","selectTuple","tuple","state","that","mapViewer","getLayerByName","getElements","forEach","item","attribute","selected","_setSelectionUnsafe","values","clearSelection","updateContentStateUnsafe","option","_getCustomHoverEnabled","renderContentUnsafe","element","changeExisting","afterRenderCallback","deepExtend","_getMapViewerOptions","_getChoroplethMapViewerOptions","_renderContentInternal","viewModel","ViewModel","mapItems","MapItems","mapDataSource","_getMapDataSource","ShapeTitleAttributeName","choroplethColorizer","ChoroplethColorizer","tooltipAttributeName","ToolTipAttributeName","tooltipMeasures","TooltipMeasures","colors","rangeStops","legend","attributeText","_findAttributeValueByName","Attributes","attributes","tooltip","_getHtml","hasRecords","ValueName","_fillValueMapDataSourceAttrs","_getRangeStops","_getColors","Colorizer","Colors","_getColorLegend","Legend","getMeasureDescriptorById","ValueId","DeltaValueName","_fillDeltaMapDataSourceAttrs","layers","_configureGeometryLayers","_getArea","onClick","e","target","layer","name","_raiseItemClick","legends","enabled","zIndex","dashboardItemTooltips","tooltipContainerSelector","customizeTooltip","arg","html","legendViewModel","measureDescriptor","_getLegend","source","grouping","customizeText","format","start","_fillMeasureToolTip","mapDataSourceItem","displayText","tooltipViewModel","getDisplayText","DataId","_getToolTip","Caption","attributeName","AttributeName","selectionName","getUniqueValue","_isSelected","getValue","_correctAttributesTitle","toolTip","deltaValue","isGood","indicatorType","getDeltaValue","DeltaValueId","getIsGood","_convertIndicatorType","getIndicatorType","_getDeltaColorValue","getActualValue","ActualValueName","_getDeltaValue","DeltaValueType","deltaValueName","TargetValueName","IncludeSummaryValueToShapeTitle","title","deltaValueType","getAbsoluteVariation","getPercentVariation","getPercentOfTarget","getTargetValue","Name","Value","minMax","getMinMax","_updateRangeStops","RangeStops","min","max","UsePercentRangeStops","type","indicatorTypes","up","down","warning","selectionDisabled","_selectionMode","_getLabelSettings","colorGroupingField","colorGroups","palette","customize","items","undefined","applySettings","hoveredBorderColor","hoveredClass","hoverEnabled","selectionMode","_getDataPoint","getValues","_getElementInteractionValue","getMeasureIds","getDeltaIds","mapItem"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_choropleth-map-item.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.choroplethMapItem = void 0;\nvar _jquery_helpers_1 = require(\"../../data/_jquery-helpers\");\nvar _utils_1 = require(\"../../data/_utils\");\nvar _z_index_1 = require(\"../../data/_z-index\");\nvar _consts_1 = require(\"../widgets/indicators/_consts\");\nvar _map_item_1 = require(\"./_map-item\");\nvar choroplethMapItem = (function (_super) {\n    __extends(choroplethMapItem, _super);\n    function choroplethMapItem(container, options) {\n        return _super.call(this, container, options) || this;\n    }\n    Object.defineProperty(choroplethMapItem.prototype, \"dataController\", {\n        get: function () { return this._dataController; },\n        set: function (dataController) { this._dataController = dataController; },\n        enumerable: false,\n        configurable: true\n    });\n    choroplethMapItem.prototype.selectTuple = function (tuple, state) {\n        var that = this;\n        that.mapViewer.getLayerByName('area').getElements().forEach(function (item) {\n            if (item.attribute('selectionName') == tuple[0].value)\n                item.selected(state);\n        });\n    };\n    choroplethMapItem.prototype._setSelectionUnsafe = function (values) {\n        _super.prototype._setSelectionUnsafe.call(this, values);\n        var that = this;\n        this.clearSelection();\n        if (values && values.length) {\n            that.mapViewer.getLayerByName('area').getElements().forEach(function (item) {\n                values.forEach(function (value) {\n                    if (item.attribute('selectionName') == value)\n                        item.selected(true);\n                });\n            });\n        }\n    };\n    choroplethMapItem.prototype.updateContentStateUnsafe = function () {\n        this.mapViewer.option('layers[0].hoverEnabled', this._getCustomHoverEnabled());\n    };\n    choroplethMapItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {\n        var options = _jquery_helpers_1.deepExtend(this._getMapViewerOptions(), this._getChoroplethMapViewerOptions());\n        this._renderContentInternal(element, changeExisting, options);\n        return false;\n    };\n    choroplethMapItem.prototype._getChoroplethMapViewerOptions = function () {\n        var that = this, viewModel = that.options.ViewModel, mapItems = viewModel.MapItems, mapDataSource = that._getMapDataSource(mapItems, viewModel.ShapeTitleAttributeName), choroplethColorizer = viewModel.ChoroplethColorizer, tooltipAttributeName = viewModel.ToolTipAttributeName, tooltipMeasures = viewModel.TooltipMeasures, colors, rangeStops, legend, i;\n        for (i = 0; i < mapItems.length; i++) {\n            var attributeText = that._findAttributeValueByName(mapItems[i].Attributes, tooltipAttributeName);\n            mapDataSource[i].attributes.tooltip = '<b>' + that._getHtml(attributeText) + '</b>';\n        }\n        if (choroplethColorizer && that._dataController.hasRecords()) {\n            if (choroplethColorizer.ValueName) {\n                that._fillValueMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);\n                rangeStops = that._getRangeStops(choroplethColorizer);\n                colors = that._getColors(choroplethColorizer.Colorizer.Colors);\n                if (!colors) {\n                    colors = rangeStops.length > 2 ? ['#5F8195', '#B55951'] : ['#5F8195'];\n                }\n                legend = that._getColorLegend(viewModel.Legend, that._dataController.getMeasureDescriptorById(choroplethColorizer.ValueId));\n            }\n            if (choroplethColorizer.DeltaValueName) {\n                that._fillDeltaMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);\n                colors = ['rgb(229, 82, 83)', 'rgb(224, 194, 58)', 'rgb(154, 181, 126)'];\n                rangeStops = [0, 1, 2, 3];\n            }\n        }\n        return {\n            layers: that._configureGeometryLayers(mapDataSource, that._getArea(viewModel, colors, rangeStops)),\n            onClick: function (e) {\n                if (e.target && e.target.layer.name === 'area' && e.target.attribute('selectionName')) {\n                    that._raiseItemClick(e.target);\n                }\n            },\n            legends: [legend],\n            tooltip: {\n                enabled: true,\n                zIndex: _z_index_1.zIndex.dashboardItemTooltips,\n                container: _utils_1.tooltipContainerSelector,\n                customizeTooltip: function (arg) {\n                    if (arg.layer.name === 'area')\n                        return {\n                            html: arg.attribute('tooltip')\n                        };\n                }\n            }\n        };\n    };\n    choroplethMapItem.prototype._getColorLegend = function (legendViewModel, measureDescriptor) {\n        var legend = this._getLegend(legendViewModel);\n        if (legend) {\n            legend.source = {\n                layer: 'area',\n                grouping: 'color'\n            };\n            legend.customizeText = function (arg) {\n                return measureDescriptor.format(arg.start);\n            };\n        }\n        return legend;\n    };\n    choroplethMapItem.prototype._fillMeasureToolTip = function (mapDataSourceItem, attribute, tooltipMeasures) {\n        var displayText, tooltipViewModel, i;\n        if (tooltipMeasures) {\n            for (i = 0; i < tooltipMeasures.length; i++) {\n                tooltipViewModel = tooltipMeasures[i];\n                displayText = this._dataController.getDisplayText(attribute, tooltipViewModel.DataId);\n                if (displayText != null) {\n                    mapDataSourceItem.attributes.tooltip += '<br>' + this._getToolTip(tooltipViewModel.Caption, displayText);\n                }\n            }\n        }\n    };\n    choroplethMapItem.prototype._fillValueMapDataSourceAttrs = function (mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {\n        var attributeName = choroplethColorizer.AttributeName, attribute, selectionName, displayText;\n        for (var i = 0; i < mapItems.length; i++) {\n            attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);\n            selectionName = this._dataController.getUniqueValue(attribute);\n            if (selectionName) {\n                displayText = this._dataController.getDisplayText(attribute, choroplethColorizer.ValueId);\n                mapDataSource[i].attributes.selectionName = selectionName;\n                mapDataSource[i].attributes.selected = this._isSelected([selectionName]);\n                mapDataSource[i].attributes.value = this._dataController.getValue(attribute, choroplethColorizer.ValueId);\n                mapDataSource[i].attributes.tooltip += '<br>' + this._getToolTip(choroplethColorizer.ValueName, displayText);\n                this._correctAttributesTitle(mapDataSource[i].attributes, displayText);\n                this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);\n            }\n        }\n    };\n    choroplethMapItem.prototype._fillDeltaMapDataSourceAttrs = function (mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {\n        var attributeName = choroplethColorizer.AttributeName, selectionName, attribute, toolTip, deltaValue, value, isGood, displayText, indicatorType;\n        for (var i = 0; i < mapItems.length; i++) {\n            attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);\n            selectionName = this._dataController.getUniqueValue(attribute);\n            if (selectionName) {\n                mapDataSource[i].attributes.selectionName = selectionName;\n                mapDataSource[i].attributes.selected = this._isSelected([selectionName]);\n                deltaValue = this._dataController.getDeltaValue(attribute, choroplethColorizer.DeltaValueId);\n                isGood = deltaValue.getIsGood().getValue();\n                indicatorType = this._convertIndicatorType(deltaValue.getIndicatorType().getValue());\n                mapDataSource[i].attributes.value = this._getDeltaColorValue(indicatorType, isGood);\n                displayText = deltaValue.getActualValue().getDisplayText();\n                toolTip = '<br>' + this._getToolTip(choroplethColorizer.ActualValueName, displayText);\n                value = this._getDeltaValue(deltaValue, choroplethColorizer.DeltaValueType);\n                if (value) {\n                    displayText = value.getDisplayText();\n                    var deltaValueName = choroplethColorizer.DeltaValueType === 'TargetValue' ? choroplethColorizer.TargetValueName : choroplethColorizer.DeltaValueName;\n                    toolTip += '<br>' + this._getToolTip(deltaValueName, displayText);\n                }\n                mapDataSource[i].attributes.tooltip += toolTip;\n                this._correctAttributesTitle(mapDataSource[i].attributes, displayText);\n                this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);\n            }\n        }\n    };\n    choroplethMapItem.prototype._correctAttributesTitle = function (attributes, displayText) {\n        var viewModel = this.options.ViewModel;\n        if (viewModel.IncludeSummaryValueToShapeTitle) {\n            if (attributes.title)\n                attributes.title += '\\r\\n' + displayText;\n            else\n                attributes.title = displayText;\n        }\n    };\n    choroplethMapItem.prototype._getDeltaValue = function (deltaValue, deltaValueType) {\n        switch (deltaValueType) {\n            case 'AbsoluteVariation':\n                return deltaValue.getAbsoluteVariation();\n            case 'PercentVariation':\n                return deltaValue.getPercentVariation();\n            case 'PercentOfTarget':\n                return deltaValue.getPercentOfTarget();\n            case 'TargetValue':\n                return deltaValue.getTargetValue();\n            case 'ActualValue':\n            default:\n                return null;\n        }\n    };\n    choroplethMapItem.prototype._findAttributeValueByName = function (attributes, attributeName) {\n        for (var i = 0; i < attributes.length; i++) {\n            if (attributes[i].Name === attributeName) {\n                return attributes[i].Value;\n            }\n        }\n    };\n    choroplethMapItem.prototype._getRangeStops = function (choroplethColorizer) {\n        var minMax = this._dataController.getMinMax(choroplethColorizer.ValueId);\n        return this._updateRangeStops(choroplethColorizer.Colorizer.RangeStops, minMax.min, minMax.max, choroplethColorizer.Colorizer.UsePercentRangeStops);\n    };\n    choroplethMapItem.prototype._convertIndicatorType = function (type) {\n        var indicatorTypes = ['none', 'up', 'down', 'warning'];\n        return indicatorTypes[type];\n    };\n    choroplethMapItem.prototype._getDeltaColorValue = function (indicatorType, isGood) {\n        switch (indicatorType) {\n            case _consts_1.indicatorType.up:\n            case _consts_1.indicatorType.down:\n                return isGood ? 2.5 : 0.5;\n            case _consts_1.indicatorType.warning:\n                return 1.5;\n            default:\n                return -1;\n        }\n    };\n    choroplethMapItem.prototype._getArea = function (viewModel, colors, rangeStops) {\n        var that = this, selectionDisabled = that._selectionMode() === 'none';\n        return __assign(__assign({}, that._getLabelSettings(viewModel)), { colorGroupingField: 'value', colorGroups: rangeStops, palette: colors, customize: function (items) {\n                items.forEach(function (item) {\n                    item.selected(item.attribute('selected'));\n                    if (selectionDisabled || item.attribute('value') === undefined) {\n                        item.applySettings({\n                            hoveredBorderColor: null,\n                            hoveredClass: null,\n                            hoverEnabled: false\n                        });\n                    }\n                });\n            }, selectionMode: 'multiple' });\n    };\n    choroplethMapItem.prototype._getDataPoint = function (element) {\n        var that = this;\n        return {\n            getValues: function () {\n                return that._getElementInteractionValue(element, that.options.ViewModel);\n            },\n            getMeasureIds: function () {\n                return [that.options.ViewModel.ChoroplethColorizer.ValueId];\n            },\n            getDeltaIds: function () {\n                return [];\n            }\n        };\n    };\n    choroplethMapItem.prototype._getElementInteractionValue = function (element, viewModel) {\n        return !!this.options.ViewModel.ChoroplethColorizer ? [element.attribute('selectionName')] : [];\n    };\n    return choroplethMapItem;\n}(_map_item_1.mapItem));\nexports.choroplethMapItem = choroplethMapItem;\n"]},"metadata":{},"sourceType":"script"}