{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_item-data.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.itemData = void 0;\n\nvar _formatter_1 = require(\"../_formatter\");\n\nvar _utils_1 = require(\"../_utils\");\n\nvar _item_meta_data_1 = require(\"./internal/_item-meta-data\");\n\nvar item_data_axis_names_1 = require(\"./item-data-axis-names\");\n\nvar _item_data_axis_1 = require(\"./_item-data-axis\");\n\nvar _item_data_axis_point_1 = require(\"./_item-data-axis-point\");\n\nvar _item_data_tuple_1 = require(\"./_item-data-tuple\");\n\nvar itemData = function () {\n  function itemData(metaData, storage, rootItems) {\n    this._metaData = metaData;\n    this._storage = storage;\n    this._rootItems = rootItems;\n  }\n\n  itemData.prototype.isEmpty = function () {\n    return this._storage.isEmpty();\n  };\n\n  itemData.prototype.getCurrentFilterValues = function (dimensionIds, axisName, selectedValues) {\n    var that = this,\n        dimensionCount = dimensionIds.length;\n\n    if (dimensionCount > 0) {\n      var axis = this.getAxis(axisName),\n          tuples = [];\n\n      if (selectedValues) {\n        for (var valueIndex = 0; valueIndex < selectedValues.length; valueIndex++) {\n          var point = selectedValues[valueIndex];\n          var value = point[0];\n          var axisPoint = axis.getPointsByDimension(dimensionIds[0]).filter(function (point) {\n            return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());\n          })[0];\n\n          for (var i = 1; i < dimensionCount; i++) {\n            value = point[i];\n            axisPoint = axisPoint.getChildren().filter(function (point) {\n              return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());\n            })[0];\n          }\n\n          tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));\n        }\n      }\n\n      return tuples;\n    }\n\n    return null;\n  };\n\n  itemData.prototype.getCurrentDrillDownValues = function (dimensionIds, axisName) {\n    var dimensionCount = dimensionIds.length;\n\n    if (dimensionCount > 0) {\n      var axis = this.getAxis(axisName);\n\n      if (axis) {\n        var axisPoints = axis.getPointsByDimension(dimensionIds[0]);\n\n        if (axisPoints.length > 0) {\n          var parentPoint = axisPoints[0].getParent();\n\n          if (parentPoint.getParent() != null) {\n            return new _item_data_tuple_1.itemDataTuple([parentPoint]);\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    return null;\n  };\n\n  itemData.prototype.getAvailableTuples = function (dimensionIds, axisName) {\n    var that = this,\n        dimensionCount = dimensionIds.length;\n\n    if (dimensionCount > 0) {\n      var axis = this.getAxis(axisName);\n\n      if (axis) {\n        var tuples = [];\n        axis.getPointsByDimension(dimensionIds[dimensionCount - 1]).forEach(function (axisPoint) {\n          tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));\n        });\n        return tuples;\n      }\n    }\n\n    return null;\n  };\n\n  itemData.prototype.getAllSelectionValues = function (dimensionIds) {\n    var multiData = this,\n        allAxisNames = multiData.getAxisNames(),\n        axisNames = [],\n        selectionList = [],\n        fillAvailableValues = function (axes, row, inputSelection) {\n      var firstAxis = multiData.getAxis(axes[0]),\n          nextAxes = axes.slice(1, axes.length),\n          axisPoints = firstAxis.getPoints() || [];\n      axisPoints.forEach(function (axisPoint) {\n        var newRow = row.slice();\n        axisPoint.getAxisPath().forEach(function (pathPoint) {\n          if (dimensionIds.filter(function (id) {\n            return id === pathPoint.getDimension().id;\n          }).length > 0) {\n            newRow.push(pathPoint.getUniqueValue());\n          }\n        });\n\n        if (axes.length > 1) {\n          fillAvailableValues(nextAxes, newRow, inputSelection);\n        } else {\n          inputSelection.push(newRow);\n        }\n      });\n    };\n\n    if (dimensionIds && dimensionIds.length > 0) {\n      dimensionIds.forEach(function (id) {\n        allAxisNames.forEach(function (axisName) {\n          if (multiData.getAxis(axisName).getDimensions().filter(function (descr) {\n            return descr.id === id;\n          }).length > 0 && axisNames.indexOf(axisName) === -1) {\n            axisNames.push(axisName);\n          }\n        });\n      });\n      fillAvailableValues(axisNames, [], selectionList);\n    }\n\n    return selectionList;\n  };\n\n  itemData.prototype.getMeasuresByIds = function (measureIds) {\n    var that = this,\n        measures = [];\n    measureIds.forEach(function (id) {\n      measures.push(that.getMeasureById(id));\n    });\n    return measures;\n  };\n\n  itemData.prototype.getAxisNames = function () {\n    return this._metaData.getAxisNames();\n  };\n\n  itemData.prototype.getAxis = function (axisName) {\n    if (axisName === undefined) {\n      axisName = item_data_axis_names_1.itemDataAxisNames.defaultAxis;\n    }\n\n    var dimensions = this.getDimensions(axisName),\n        root = this._rootItems[axisName];\n    return root ? new _item_data_axis_1.itemDataAxis(dimensions, root) : null;\n  };\n\n  itemData.prototype.getDimensions = function (axisName) {\n    return this._metaData.getDimensions(axisName);\n  };\n\n  itemData.prototype.getColorMeasures = function () {\n    return this._metaData.getColorMeasures();\n  };\n\n  itemData.prototype.getMeasures = function () {\n    return this._metaData.getMeasures();\n  };\n\n  itemData.prototype.getDeltas = function () {\n    return this._metaData.getDeltas();\n  };\n\n  itemData.prototype.getMeasureById = function (id) {\n    return this._metaData.getMeasureById(id);\n  };\n\n  itemData.prototype.getDeltaById = function (id) {\n    return this._metaData.getDeltaById(id);\n  };\n\n  itemData.prototype.getSlice = function (value) {\n    return value instanceof _item_data_tuple_1.itemDataTuple ? this._getSliceByTuple(value) : value instanceof _item_data_axis_point_1.itemDataAxisPoint ? this._getSliceByAxisPoint(value) : null;\n  };\n\n  itemData.prototype.getMeasureFormat = function (measureId) {\n    return this._metaData.getMeasureFormat(measureId);\n  };\n\n  itemData.prototype.getMeasureExpression = function (measureId) {\n    return this._metaData.getMeasureExpression(measureId);\n  };\n\n  itemData.prototype.getMeasureCalculation = function (measureId) {\n    return this._metaData.getMeasureCalculation(measureId);\n  };\n\n  itemData.prototype.getMeasureWindowDefinition = function (measureId) {\n    return this._metaData.getMeasureWindowDefinition(measureId);\n  };\n\n  itemData.prototype.getDimensionFormat = function (dimensionId) {\n    return this._metaData.getDimensionFormat(dimensionId);\n  };\n\n  itemData.prototype.getColorMeasureValue = function (colorMeasureId) {\n    return this._getValue(colorMeasureId);\n  };\n\n  itemData.prototype.getConditionalFormattingMeasureValue = function (cfMeasureId) {\n    return this._getValue(cfMeasureId);\n  };\n\n  itemData.prototype.getMeasureValue = function (measureId) {\n    var that = this,\n        format = that.getMeasureFormat(measureId);\n    return that._getMeasureValueByKeys(that._getKeys(), measureId, format);\n  };\n\n  itemData.prototype.getPointsByDimensionId = function (dimensionId) {\n    var points = [],\n        root,\n        axis;\n    var that = this;\n\n    var axes = that._metaData.getAxes();\n\n    Object.keys(axes).forEach(function (axisName) {\n      var dimensions = axes[axisName];\n      var foundDimensions = dimensions.filter(function (dimension) {\n        return dimension.id === dimensionId;\n      });\n\n      if (foundDimensions) {\n        root = that._rootItems[axisName];\n        axis = new _item_data_axis_1.itemDataAxis(dimensions, root);\n        points = axis.getPointsByDimension(dimensionId);\n        return false;\n      }\n    });\n    return points;\n  };\n\n  itemData.prototype._getKeys = function (points) {\n    var that = this,\n        rootItems = that._rootItems,\n        keysList = [];\n    Object.keys(rootItems).forEach(function (axisName) {\n      var userPoint = points && points[axisName],\n          point = userPoint || rootItems[axisName];\n      keysList.push(point.getKey());\n    });\n    return keysList;\n  };\n\n  itemData.prototype._getValue = function (measureId) {\n    var that = this;\n    return that._getCellValue(that._getKeys(), measureId);\n  };\n\n  itemData.prototype._getMeasureValueByKeys = function (keys, mId, format) {\n    var that = this;\n    return {\n      getValue: function () {\n        return that._getCellValue(keys, mId);\n      },\n      getDisplayText: function () {\n        return that._getCellDisplayText(keys, mId, format);\n      }\n    };\n  };\n\n  itemData.prototype._getDeltaValueByKeys = function (keys, deltaIds, formats) {\n    var that = this,\n        names = _item_meta_data_1.deltaValueNames,\n        getValueItem = function (valueName) {\n      return {\n        getValue: function () {\n          return that._getCellValue(keys, deltaIds[valueName]);\n        },\n        getDisplayText: function () {\n          var format = formats[valueName];\n\n          if (format) {\n            format = {\n              NumericFormat: format\n            };\n          }\n\n          return that._getCellDisplayText(keys, deltaIds[valueName], format);\n        }\n      };\n    };\n\n    return {\n      getActualValue: function () {\n        return getValueItem(names.actualValue);\n      },\n      getTargetValue: function () {\n        return getValueItem(names.targetValue);\n      },\n      getAbsoluteVariation: function () {\n        return getValueItem(names.absoluteVariation);\n      },\n      getPercentVariation: function () {\n        return getValueItem(names.percentVariation);\n      },\n      getPercentOfTarget: function () {\n        return getValueItem(names.percentOfTarget);\n      },\n      getIsGood: function () {\n        return getValueItem(names.isGood);\n      },\n      getIndicatorType: function () {\n        return getValueItem(names.indicatorType);\n      },\n      getDisplayValue: function () {\n        return getValueItem(names.mainValue);\n      },\n      getDisplaySubValue1: function () {\n        return getValueItem(names.subValue1);\n      },\n      getDisplaySubValue2: function () {\n        return getValueItem(names.subValue2);\n      }\n    };\n  };\n\n  itemData.prototype._createPointsCache = function (axisPoints) {\n    var cache = {};\n\n    for (var i = 0; i < axisPoints.length; i++) {\n      var areaName = axisPoints[i].getAxisName();\n      cache[areaName] = axisPoints[i];\n    }\n\n    return cache;\n  };\n\n  itemData.prototype.getMeasureValueByAxisPoints = function (measureId, axisPoints) {\n    var that = this,\n        format = that.getMeasureFormat(measureId),\n        pointsCache = that._createPointsCache(axisPoints);\n\n    return that._getMeasureValueByKeys(that._getKeys(pointsCache), measureId, format);\n  };\n\n  itemData.prototype.getDeltaValue = function (deltaId) {\n    var that = this,\n        metaData = that._metaData,\n        deltaIds = metaData.getDeltaValueIds(deltaId),\n        formats = metaData.getDeltaFormats(deltaId);\n    return that._getDeltaValueByKeys(that._getKeys(), deltaIds, formats);\n  };\n\n  itemData.prototype.getDeltaValueByAxisPoints = function (deltaId, axisPoints) {\n    var that = this,\n        metaData = this._metaData,\n        deltaIds = metaData.getDeltaValueIds(deltaId),\n        formats = metaData.getDeltaFormats(deltaId),\n        pointsCache = this._createPointsCache(axisPoints);\n\n    return this._getDeltaValueByKeys(that._getKeys(pointsCache), deltaIds, formats);\n  };\n\n  itemData.prototype.getDataMembers = function () {\n    return this._metaData.getDataMembers();\n  };\n\n  itemData.prototype.createTuple = function (values) {\n    var that = this,\n        axisPoints = [];\n\n    if (values[0] instanceof _item_data_axis_point_1.itemDataAxisPoint) {\n      axisPoints = values;\n    } else {\n      values.forEach(function (axisValue) {\n        var axis = that.getAxis(axisValue.axisName),\n            axisPoint = axis.getPointByUniqueValues(axisValue.value);\n        axisPoints.push(axisPoint);\n      });\n    }\n\n    return new _item_data_tuple_1.itemDataTuple(axisPoints);\n  };\n\n  itemData.prototype._getCellValue = function (keys, valueId) {\n    return this._storage.getCrossValue(keys, valueId);\n  };\n\n  itemData.prototype._getCellDisplayText = function (keys, valueId, format) {\n    return format ? _formatter_1.format(this._getCellValue(keys, valueId), format) : undefined;\n  };\n\n  itemData.prototype._getSliceByAxisPoint = function (axisPoint) {\n    var that = this,\n        rootItems = that._rootItems,\n        newRootItems = {};\n    Object.keys(rootItems).forEach(function (name) {\n      newRootItems[name] = axisPoint.getAxisName() === name ? axisPoint : rootItems[name];\n    });\n    return new itemData(that._metaData, that._storage, newRootItems);\n  };\n\n  itemData.prototype._getSliceByTuple = function (tuple) {\n    var data = this;\n\n    tuple._axisPoints.forEach(function (axisPoint) {\n      data = data._getSliceByAxisPoint(axisPoint);\n    });\n\n    return data;\n  };\n\n  return itemData;\n}();\n\nexports.itemData = itemData;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/data/item-data/_item-data.js"],"names":["Object","defineProperty","exports","value","itemData","_formatter_1","require","_utils_1","_item_meta_data_1","item_data_axis_names_1","_item_data_axis_1","_item_data_axis_point_1","_item_data_tuple_1","metaData","storage","rootItems","_metaData","_storage","_rootItems","prototype","isEmpty","getCurrentFilterValues","dimensionIds","axisName","selectedValues","that","dimensionCount","length","axis","getAxis","tuples","valueIndex","point","axisPoint","getPointsByDimension","filter","checkValuesAreEqual","getUniqueValue","i","getChildren","push","itemDataTuple","getCurrentDrillDownValues","axisPoints","parentPoint","getParent","getAvailableTuples","forEach","getAllSelectionValues","multiData","allAxisNames","getAxisNames","axisNames","selectionList","fillAvailableValues","axes","row","inputSelection","firstAxis","nextAxes","slice","getPoints","newRow","getAxisPath","pathPoint","id","getDimension","getDimensions","descr","indexOf","getMeasuresByIds","measureIds","measures","getMeasureById","undefined","itemDataAxisNames","defaultAxis","dimensions","root","itemDataAxis","getColorMeasures","getMeasures","getDeltas","getDeltaById","getSlice","_getSliceByTuple","itemDataAxisPoint","_getSliceByAxisPoint","getMeasureFormat","measureId","getMeasureExpression","getMeasureCalculation","getMeasureWindowDefinition","getDimensionFormat","dimensionId","getColorMeasureValue","colorMeasureId","_getValue","getConditionalFormattingMeasureValue","cfMeasureId","getMeasureValue","format","_getMeasureValueByKeys","_getKeys","getPointsByDimensionId","points","getAxes","keys","foundDimensions","dimension","keysList","userPoint","getKey","_getCellValue","mId","getValue","getDisplayText","_getCellDisplayText","_getDeltaValueByKeys","deltaIds","formats","names","deltaValueNames","getValueItem","valueName","NumericFormat","getActualValue","actualValue","getTargetValue","targetValue","getAbsoluteVariation","absoluteVariation","getPercentVariation","percentVariation","getPercentOfTarget","percentOfTarget","getIsGood","isGood","getIndicatorType","indicatorType","getDisplayValue","mainValue","getDisplaySubValue1","subValue1","getDisplaySubValue2","subValue2","_createPointsCache","cache","areaName","getAxisName","getMeasureValueByAxisPoints","pointsCache","getDeltaValue","deltaId","getDeltaValueIds","getDeltaFormats","getDeltaValueByAxisPoints","getDataMembers","createTuple","values","axisValue","getPointByUniqueValues","valueId","getCrossValue","newRootItems","name","tuple","data","_axisPoints"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_item-data.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.itemData = void 0;\nvar _formatter_1 = require(\"../_formatter\");\nvar _utils_1 = require(\"../_utils\");\nvar _item_meta_data_1 = require(\"./internal/_item-meta-data\");\nvar item_data_axis_names_1 = require(\"./item-data-axis-names\");\nvar _item_data_axis_1 = require(\"./_item-data-axis\");\nvar _item_data_axis_point_1 = require(\"./_item-data-axis-point\");\nvar _item_data_tuple_1 = require(\"./_item-data-tuple\");\nvar itemData = (function () {\n    function itemData(metaData, storage, rootItems) {\n        this._metaData = metaData;\n        this._storage = storage;\n        this._rootItems = rootItems;\n    }\n    itemData.prototype.isEmpty = function () {\n        return this._storage.isEmpty();\n    };\n    itemData.prototype.getCurrentFilterValues = function (dimensionIds, axisName, selectedValues) {\n        var that = this, dimensionCount = dimensionIds.length;\n        if (dimensionCount > 0) {\n            var axis = this.getAxis(axisName), tuples = [];\n            if (selectedValues) {\n                for (var valueIndex = 0; valueIndex < selectedValues.length; valueIndex++) {\n                    var point = selectedValues[valueIndex];\n                    var value = point[0];\n                    var axisPoint = axis.getPointsByDimension(dimensionIds[0]).filter(function (point) {\n                        return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());\n                    })[0];\n                    for (var i = 1; i < dimensionCount; i++) {\n                        value = point[i];\n                        axisPoint = axisPoint.getChildren().filter(function (point) {\n                            return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());\n                        })[0];\n                    }\n                    tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));\n                }\n            }\n            return tuples;\n        }\n        return null;\n    };\n    itemData.prototype.getCurrentDrillDownValues = function (dimensionIds, axisName) {\n        var dimensionCount = dimensionIds.length;\n        if (dimensionCount > 0) {\n            var axis = this.getAxis(axisName);\n            if (axis) {\n                var axisPoints = axis.getPointsByDimension(dimensionIds[0]);\n                if (axisPoints.length > 0) {\n                    var parentPoint = axisPoints[0].getParent();\n                    if (parentPoint.getParent() != null) {\n                        return new _item_data_tuple_1.itemDataTuple([parentPoint]);\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    };\n    itemData.prototype.getAvailableTuples = function (dimensionIds, axisName) {\n        var that = this, dimensionCount = dimensionIds.length;\n        if (dimensionCount > 0) {\n            var axis = this.getAxis(axisName);\n            if (axis) {\n                var tuples = [];\n                axis.getPointsByDimension(dimensionIds[dimensionCount - 1]).forEach(function (axisPoint) {\n                    tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));\n                });\n                return tuples;\n            }\n        }\n        return null;\n    };\n    itemData.prototype.getAllSelectionValues = function (dimensionIds) {\n        var multiData = this, allAxisNames = multiData.getAxisNames(), axisNames = [], selectionList = [], fillAvailableValues = function (axes, row, inputSelection) {\n            var firstAxis = multiData.getAxis(axes[0]), nextAxes = axes.slice(1, axes.length), axisPoints = firstAxis.getPoints() || [];\n            axisPoints.forEach(function (axisPoint) {\n                var newRow = row.slice();\n                axisPoint.getAxisPath().forEach(function (pathPoint) {\n                    if (dimensionIds.filter(function (id) { return id === pathPoint.getDimension().id; }).length > 0) {\n                        newRow.push(pathPoint.getUniqueValue());\n                    }\n                });\n                if (axes.length > 1) {\n                    fillAvailableValues(nextAxes, newRow, inputSelection);\n                }\n                else {\n                    inputSelection.push(newRow);\n                }\n            });\n        };\n        if (dimensionIds && dimensionIds.length > 0) {\n            dimensionIds.forEach(function (id) {\n                allAxisNames.forEach(function (axisName) {\n                    if (multiData.getAxis(axisName).getDimensions().filter(function (descr) {\n                        return descr.id === id;\n                    }).length > 0\n                        && axisNames.indexOf(axisName) === -1) {\n                        axisNames.push(axisName);\n                    }\n                });\n            });\n            fillAvailableValues(axisNames, [], selectionList);\n        }\n        return selectionList;\n    };\n    itemData.prototype.getMeasuresByIds = function (measureIds) {\n        var that = this, measures = [];\n        measureIds.forEach(function (id) {\n            measures.push(that.getMeasureById(id));\n        });\n        return measures;\n    };\n    itemData.prototype.getAxisNames = function () {\n        return this._metaData.getAxisNames();\n    };\n    itemData.prototype.getAxis = function (axisName) {\n        if (axisName === undefined) {\n            axisName = item_data_axis_names_1.itemDataAxisNames.defaultAxis;\n        }\n        var dimensions = this.getDimensions(axisName), root = this._rootItems[axisName];\n        return root ? new _item_data_axis_1.itemDataAxis(dimensions, root) : null;\n    };\n    itemData.prototype.getDimensions = function (axisName) {\n        return this._metaData.getDimensions(axisName);\n    };\n    itemData.prototype.getColorMeasures = function () {\n        return this._metaData.getColorMeasures();\n    };\n    itemData.prototype.getMeasures = function () {\n        return this._metaData.getMeasures();\n    };\n    itemData.prototype.getDeltas = function () {\n        return this._metaData.getDeltas();\n    };\n    itemData.prototype.getMeasureById = function (id) {\n        return this._metaData.getMeasureById(id);\n    };\n    itemData.prototype.getDeltaById = function (id) {\n        return this._metaData.getDeltaById(id);\n    };\n    itemData.prototype.getSlice = function (value) {\n        return (value instanceof _item_data_tuple_1.itemDataTuple) ? this._getSliceByTuple(value) :\n            (value instanceof _item_data_axis_point_1.itemDataAxisPoint) ? this._getSliceByAxisPoint(value) : null;\n    };\n    itemData.prototype.getMeasureFormat = function (measureId) {\n        return this._metaData.getMeasureFormat(measureId);\n    };\n    itemData.prototype.getMeasureExpression = function (measureId) {\n        return this._metaData.getMeasureExpression(measureId);\n    };\n    itemData.prototype.getMeasureCalculation = function (measureId) {\n        return this._metaData.getMeasureCalculation(measureId);\n    };\n    itemData.prototype.getMeasureWindowDefinition = function (measureId) {\n        return this._metaData.getMeasureWindowDefinition(measureId);\n    };\n    itemData.prototype.getDimensionFormat = function (dimensionId) {\n        return this._metaData.getDimensionFormat(dimensionId);\n    };\n    itemData.prototype.getColorMeasureValue = function (colorMeasureId) {\n        return this._getValue(colorMeasureId);\n    };\n    itemData.prototype.getConditionalFormattingMeasureValue = function (cfMeasureId) {\n        return this._getValue(cfMeasureId);\n    };\n    itemData.prototype.getMeasureValue = function (measureId) {\n        var that = this, format = that.getMeasureFormat(measureId);\n        return that._getMeasureValueByKeys(that._getKeys(), measureId, format);\n    };\n    itemData.prototype.getPointsByDimensionId = function (dimensionId) {\n        var points = [], root, axis;\n        var that = this;\n        var axes = that._metaData.getAxes();\n        Object.keys(axes).forEach(function (axisName) {\n            var dimensions = axes[axisName];\n            var foundDimensions = dimensions.filter(function (dimension) {\n                return dimension.id === dimensionId;\n            });\n            if (foundDimensions) {\n                root = that._rootItems[axisName];\n                axis = new _item_data_axis_1.itemDataAxis(dimensions, root);\n                points = axis.getPointsByDimension(dimensionId);\n                return false;\n            }\n        });\n        return points;\n    };\n    itemData.prototype._getKeys = function (points) {\n        var that = this, rootItems = that._rootItems, keysList = [];\n        Object.keys(rootItems).forEach(function (axisName) {\n            var userPoint = (points && points[axisName]), point = userPoint || rootItems[axisName];\n            keysList.push(point.getKey());\n        });\n        return keysList;\n    };\n    itemData.prototype._getValue = function (measureId) {\n        var that = this;\n        return that._getCellValue(that._getKeys(), measureId);\n    };\n    itemData.prototype._getMeasureValueByKeys = function (keys, mId, format) {\n        var that = this;\n        return {\n            getValue: function () {\n                return that._getCellValue(keys, mId);\n            },\n            getDisplayText: function () {\n                return that._getCellDisplayText(keys, mId, format);\n            }\n        };\n    };\n    itemData.prototype._getDeltaValueByKeys = function (keys, deltaIds, formats) {\n        var that = this, names = _item_meta_data_1.deltaValueNames, getValueItem = function (valueName) {\n            return {\n                getValue: function () {\n                    return that._getCellValue(keys, deltaIds[valueName]);\n                },\n                getDisplayText: function () {\n                    var format = formats[valueName];\n                    if (format) {\n                        format = {\n                            NumericFormat: format\n                        };\n                    }\n                    return that._getCellDisplayText(keys, deltaIds[valueName], format);\n                }\n            };\n        };\n        return {\n            getActualValue: function () {\n                return getValueItem(names.actualValue);\n            },\n            getTargetValue: function () {\n                return getValueItem(names.targetValue);\n            },\n            getAbsoluteVariation: function () {\n                return getValueItem(names.absoluteVariation);\n            },\n            getPercentVariation: function () {\n                return getValueItem(names.percentVariation);\n            },\n            getPercentOfTarget: function () {\n                return getValueItem(names.percentOfTarget);\n            },\n            getIsGood: function () {\n                return getValueItem(names.isGood);\n            },\n            getIndicatorType: function () {\n                return getValueItem(names.indicatorType);\n            },\n            getDisplayValue: function () {\n                return getValueItem(names.mainValue);\n            },\n            getDisplaySubValue1: function () {\n                return getValueItem(names.subValue1);\n            },\n            getDisplaySubValue2: function () {\n                return getValueItem(names.subValue2);\n            }\n        };\n    };\n    itemData.prototype._createPointsCache = function (axisPoints) {\n        var cache = {};\n        for (var i = 0; i < axisPoints.length; i++) {\n            var areaName = axisPoints[i].getAxisName();\n            cache[areaName] = axisPoints[i];\n        }\n        return cache;\n    };\n    itemData.prototype.getMeasureValueByAxisPoints = function (measureId, axisPoints) {\n        var that = this, format = that.getMeasureFormat(measureId), pointsCache = that._createPointsCache(axisPoints);\n        return that._getMeasureValueByKeys(that._getKeys(pointsCache), measureId, format);\n    };\n    itemData.prototype.getDeltaValue = function (deltaId) {\n        var that = this, metaData = that._metaData, deltaIds = metaData.getDeltaValueIds(deltaId), formats = metaData.getDeltaFormats(deltaId);\n        return that._getDeltaValueByKeys(that._getKeys(), deltaIds, formats);\n    };\n    itemData.prototype.getDeltaValueByAxisPoints = function (deltaId, axisPoints) {\n        var that = this, metaData = this._metaData, deltaIds = metaData.getDeltaValueIds(deltaId), formats = metaData.getDeltaFormats(deltaId), pointsCache = this._createPointsCache(axisPoints);\n        return this._getDeltaValueByKeys(that._getKeys(pointsCache), deltaIds, formats);\n    };\n    itemData.prototype.getDataMembers = function () {\n        return this._metaData.getDataMembers();\n    };\n    itemData.prototype.createTuple = function (values) {\n        var that = this, axisPoints = [];\n        if (values[0] instanceof _item_data_axis_point_1.itemDataAxisPoint) {\n            axisPoints = values;\n        }\n        else {\n            values.forEach(function (axisValue) {\n                var axis = that.getAxis(axisValue.axisName), axisPoint = axis.getPointByUniqueValues(axisValue.value);\n                axisPoints.push(axisPoint);\n            });\n        }\n        return new _item_data_tuple_1.itemDataTuple(axisPoints);\n    };\n    itemData.prototype._getCellValue = function (keys, valueId) {\n        return this._storage.getCrossValue(keys, valueId);\n    };\n    itemData.prototype._getCellDisplayText = function (keys, valueId, format) {\n        return format ? _formatter_1.format(this._getCellValue(keys, valueId), format) : undefined;\n    };\n    itemData.prototype._getSliceByAxisPoint = function (axisPoint) {\n        var that = this, rootItems = that._rootItems, newRootItems = {};\n        Object.keys(rootItems).forEach(function (name) {\n            newRootItems[name] = axisPoint.getAxisName() === name ? axisPoint : rootItems[name];\n        });\n        return new itemData(that._metaData, that._storage, newRootItems);\n    };\n    itemData.prototype._getSliceByTuple = function (tuple) {\n        var data = this;\n        tuple._axisPoints.forEach(function (axisPoint) {\n            data = data._getSliceByAxisPoint(axisPoint);\n        });\n        return data;\n    };\n    return itemData;\n}());\nexports.itemData = itemData;\n"]},"metadata":{},"sourceType":"script"}