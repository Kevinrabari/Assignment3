{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_arrangement-strategy.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RowArrangementStrategy = exports.ColumnArrangementStrategy = exports.AutoArrangementStrategy = exports.ArrangementStrategy = void 0;\n\nvar _card_arrangement_info_1 = require(\"./_card-arrangement-info\");\n\nvar _card_measurer_1 = require(\"./_card-measurer\");\n\nvar ArrangementStrategy = function () {\n  function ArrangementStrategy() {\n    this.cardMeasurer = new _card_measurer_1.cardMeasurer();\n  }\n\n  ArrangementStrategy.createInstance = function (method, lineCount) {\n    switch (method) {\n      case 'column':\n        return new ColumnArrangementStrategy(lineCount);\n\n      case 'row':\n        return new RowArrangementStrategy(lineCount);\n\n      default:\n        return new AutoArrangementStrategy();\n    }\n  };\n\n  ArrangementStrategy.prototype.getArrangeMethod = function () {\n    return '';\n  };\n\n  ArrangementStrategy.prototype.getLineCount = function () {\n    return -1;\n  };\n\n  ArrangementStrategy.prototype.arrange = function (viewerHeight, viewerWidth, itemsCount, layouts, ignorePadding) {\n    var _this = this;\n\n    if (ignorePadding === void 0) {\n      ignorePadding = false;\n    }\n\n    var getArrangementInfo = function (nextColumnCount) {\n      if (nextColumnCount === void 0) {\n        nextColumnCount = undefined;\n      }\n\n      var result = new _card_arrangement_info_1.cardArrangementInfo();\n\n      var columnCount = nextColumnCount || _this.getColumnCount(itemsCount, actualViewerWidth, cardMinWidth);\n\n      columnCount = _this.checkEmptyRows(columnCount, itemsCount);\n\n      var rowCount = _this.getRowCount(itemsCount, columnCount);\n\n      var visibleColumnCount = Math.max(1, Math.min(columnCount, Math.floor(actualViewerWidth / cardMinWidth)));\n      var visibleRowCount = Math.max(1, Math.min(rowCount, Math.floor(actualViewerHeight / cardMinHeight)));\n      result.cellHeight = Math.max(cardMinHeight, Math.floor(actualViewerHeight / visibleRowCount));\n      result.cellWidth = Math.max(cardMinWidth, Math.floor(actualViewerWidth / visibleColumnCount));\n      result.columnCount = columnCount;\n      result.rowCount = rowCount;\n      result.itemsCount = itemsCount;\n      result.ignorePadding = ignorePadding;\n      result.viewerHeight = viewerHeight;\n      result.viewerWidth = viewerWidth;\n      result.arrangementDirection = _this.getArrangementDirection();\n      return result;\n    };\n\n    var marginOffset = ignorePadding ? _card_arrangement_info_1.margins : 0;\n    var cardMinWidth = this.getCardMinWidthWithMargin(layouts);\n    var cardMinHeight = this.getCardMinHeightWithMargin(layouts);\n    var actualViewerWidth = viewerWidth + marginOffset;\n    var actualViewerHeight = viewerHeight + marginOffset;\n    return this.calcBestProportions(getArrangementInfo);\n  };\n\n  ArrangementStrategy.prototype.calcBestProportions = function (calcArrangementInfo) {\n    return calcArrangementInfo();\n  };\n\n  ArrangementStrategy.prototype.getCardMinWidthWithMargin = function (layouts) {\n    var largestWidth = layouts.map(function (layout) {\n      return layout.minWidth;\n    }).reduce(function (prev, curr) {\n      return Math.max(prev, curr);\n    });\n    return largestWidth + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;\n  };\n\n  ArrangementStrategy.prototype.getCardMinHeightWithMargin = function (layouts) {\n    var _this = this;\n\n    var largestHeight = layouts.map(function (layout) {\n      return _this.cardMeasurer.calcMinHeight(layout);\n    }).reduce(function (prev, curr) {\n      return Math.max(prev, curr);\n    });\n    return largestHeight + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;\n  };\n\n  ArrangementStrategy.prototype.checkEmptyRows = function (columnCount, itemsCount) {\n    return columnCount;\n  };\n\n  ArrangementStrategy.prototype.getArrangementDirection = function () {\n    return 'column';\n  };\n\n  return ArrangementStrategy;\n}();\n\nexports.ArrangementStrategy = ArrangementStrategy;\n\nvar AutoArrangementStrategy = function (_super) {\n  __extends(AutoArrangementStrategy, _super);\n\n  function AutoArrangementStrategy() {\n    return _super.call(this) || this;\n  }\n\n  AutoArrangementStrategy.prototype.getArrangeMethod = function () {\n    return 'auto';\n  };\n\n  AutoArrangementStrategy.prototype.getLineCount = function () {\n    return -1;\n  };\n\n  AutoArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {\n    var columnCount = Math.max(1, Math.floor(actualViewerWidth / cardMinWidth));\n    columnCount = Math.min(itemsCount, columnCount);\n    return columnCount;\n  };\n\n  AutoArrangementStrategy.prototype.checkEmptyRows = function (columnCount, itemsCount) {\n    var lastRowCount = function () {\n      return itemsCount % columnCount;\n    };\n\n    var fullRowCount = function () {\n      return Math.floor(itemsCount / columnCount);\n    };\n\n    var nextLastRowCount = function () {\n      return lastRowCount() + fullRowCount();\n    };\n\n    while (lastRowCount() > 0 && nextLastRowCount() < columnCount) {\n      columnCount--;\n    }\n\n    return columnCount;\n  };\n\n  AutoArrangementStrategy.prototype.calcBestProportions = function (calcArrangementInfo) {\n    var arrangementInfo = calcArrangementInfo();\n\n    if (arrangementInfo.columnCount > 1) {\n      var nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);\n\n      while (nextArrangementInfo.proportionFactor() < arrangementInfo.proportionFactor() && arrangementInfo.columnCount > 1) {\n        arrangementInfo = nextArrangementInfo;\n        nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);\n      }\n    }\n\n    return arrangementInfo;\n  };\n\n  AutoArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {\n    return Math.ceil(itemsCount / columnCount);\n  };\n\n  return AutoArrangementStrategy;\n}(ArrangementStrategy);\n\nexports.AutoArrangementStrategy = AutoArrangementStrategy;\n\nvar ColumnArrangementStrategy = function (_super) {\n  __extends(ColumnArrangementStrategy, _super);\n\n  function ColumnArrangementStrategy(columnCount) {\n    var _this = _super.call(this) || this;\n\n    _this.columnCount = columnCount;\n    return _this;\n  }\n\n  ColumnArrangementStrategy.prototype.getArrangeMethod = function () {\n    return 'column';\n  };\n\n  ColumnArrangementStrategy.prototype.getLineCount = function () {\n    return this.columnCount;\n  };\n\n  ColumnArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {\n    return Math.min(itemsCount, this.columnCount);\n  };\n\n  ColumnArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {\n    return Math.max(1, Math.ceil(itemsCount / columnCount));\n  };\n\n  return ColumnArrangementStrategy;\n}(ArrangementStrategy);\n\nexports.ColumnArrangementStrategy = ColumnArrangementStrategy;\n\nvar RowArrangementStrategy = function (_super) {\n  __extends(RowArrangementStrategy, _super);\n\n  function RowArrangementStrategy(rowCount) {\n    var _this = _super.call(this) || this;\n\n    _this.rowCount = rowCount;\n    return _this;\n  }\n\n  RowArrangementStrategy.prototype.getArrangementMethod = function () {\n    return 'row';\n  };\n\n  RowArrangementStrategy.prototype.getLineCount = function () {\n    return this.rowCount;\n  };\n\n  RowArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {\n    return Math.ceil(itemsCount / Math.min(itemsCount, this.rowCount));\n  };\n\n  RowArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {\n    return Math.min(itemsCount, this.rowCount);\n  };\n\n  RowArrangementStrategy.prototype.getArrangementDirection = function () {\n    return 'row';\n  };\n\n  return RowArrangementStrategy;\n}(ArrangementStrategy);\n\nexports.RowArrangementStrategy = RowArrangementStrategy;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/widgets/widgets-viewer/cards/_arrangement-strategy.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","RowArrangementStrategy","ColumnArrangementStrategy","AutoArrangementStrategy","ArrangementStrategy","_card_arrangement_info_1","require","_card_measurer_1","cardMeasurer","createInstance","method","lineCount","getArrangeMethod","getLineCount","arrange","viewerHeight","viewerWidth","itemsCount","layouts","ignorePadding","_this","getArrangementInfo","nextColumnCount","undefined","result","cardArrangementInfo","columnCount","getColumnCount","actualViewerWidth","cardMinWidth","checkEmptyRows","rowCount","getRowCount","visibleColumnCount","Math","max","min","floor","visibleRowCount","actualViewerHeight","cardMinHeight","cellHeight","cellWidth","arrangementDirection","getArrangementDirection","marginOffset","margins","getCardMinWidthWithMargin","getCardMinHeightWithMargin","calcBestProportions","calcArrangementInfo","largestWidth","map","layout","minWidth","reduce","prev","curr","paddings","borders","largestHeight","calcMinHeight","_super","lastRowCount","fullRowCount","nextLastRowCount","arrangementInfo","nextArrangementInfo","proportionFactor","ceil","getArrangementMethod"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_arrangement-strategy.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RowArrangementStrategy = exports.ColumnArrangementStrategy = exports.AutoArrangementStrategy = exports.ArrangementStrategy = void 0;\nvar _card_arrangement_info_1 = require(\"./_card-arrangement-info\");\nvar _card_measurer_1 = require(\"./_card-measurer\");\nvar ArrangementStrategy = (function () {\n    function ArrangementStrategy() {\n        this.cardMeasurer = new _card_measurer_1.cardMeasurer();\n    }\n    ArrangementStrategy.createInstance = function (method, lineCount) {\n        switch (method) {\n            case 'column':\n                return new ColumnArrangementStrategy(lineCount);\n            case 'row':\n                return new RowArrangementStrategy(lineCount);\n            default:\n                return new AutoArrangementStrategy();\n        }\n    };\n    ArrangementStrategy.prototype.getArrangeMethod = function () {\n        return '';\n    };\n    ArrangementStrategy.prototype.getLineCount = function () {\n        return -1;\n    };\n    ArrangementStrategy.prototype.arrange = function (viewerHeight, viewerWidth, itemsCount, layouts, ignorePadding) {\n        var _this = this;\n        if (ignorePadding === void 0) { ignorePadding = false; }\n        var getArrangementInfo = function (nextColumnCount) {\n            if (nextColumnCount === void 0) { nextColumnCount = undefined; }\n            var result = new _card_arrangement_info_1.cardArrangementInfo();\n            var columnCount = nextColumnCount || _this.getColumnCount(itemsCount, actualViewerWidth, cardMinWidth);\n            columnCount = _this.checkEmptyRows(columnCount, itemsCount);\n            var rowCount = _this.getRowCount(itemsCount, columnCount);\n            var visibleColumnCount = Math.max(1, Math.min(columnCount, Math.floor(actualViewerWidth / cardMinWidth)));\n            var visibleRowCount = Math.max(1, Math.min(rowCount, Math.floor(actualViewerHeight / cardMinHeight)));\n            result.cellHeight = Math.max(cardMinHeight, Math.floor(actualViewerHeight / visibleRowCount));\n            result.cellWidth = Math.max(cardMinWidth, Math.floor(actualViewerWidth / visibleColumnCount));\n            result.columnCount = columnCount;\n            result.rowCount = rowCount;\n            result.itemsCount = itemsCount;\n            result.ignorePadding = ignorePadding;\n            result.viewerHeight = viewerHeight;\n            result.viewerWidth = viewerWidth;\n            result.arrangementDirection = _this.getArrangementDirection();\n            return result;\n        };\n        var marginOffset = ignorePadding ? _card_arrangement_info_1.margins : 0;\n        var cardMinWidth = this.getCardMinWidthWithMargin(layouts);\n        var cardMinHeight = this.getCardMinHeightWithMargin(layouts);\n        var actualViewerWidth = viewerWidth + marginOffset;\n        var actualViewerHeight = viewerHeight + marginOffset;\n        return this.calcBestProportions(getArrangementInfo);\n    };\n    ArrangementStrategy.prototype.calcBestProportions = function (calcArrangementInfo) {\n        return calcArrangementInfo();\n    };\n    ArrangementStrategy.prototype.getCardMinWidthWithMargin = function (layouts) {\n        var largestWidth = layouts.map(function (layout) { return layout.minWidth; }).reduce(function (prev, curr) { return Math.max(prev, curr); });\n        return largestWidth + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;\n    };\n    ArrangementStrategy.prototype.getCardMinHeightWithMargin = function (layouts) {\n        var _this = this;\n        var largestHeight = layouts.map(function (layout) { return _this.cardMeasurer.calcMinHeight(layout); }).reduce(function (prev, curr) { return Math.max(prev, curr); });\n        return largestHeight + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;\n    };\n    ArrangementStrategy.prototype.checkEmptyRows = function (columnCount, itemsCount) {\n        return columnCount;\n    };\n    ArrangementStrategy.prototype.getArrangementDirection = function () {\n        return 'column';\n    };\n    return ArrangementStrategy;\n}());\nexports.ArrangementStrategy = ArrangementStrategy;\nvar AutoArrangementStrategy = (function (_super) {\n    __extends(AutoArrangementStrategy, _super);\n    function AutoArrangementStrategy() {\n        return _super.call(this) || this;\n    }\n    AutoArrangementStrategy.prototype.getArrangeMethod = function () {\n        return 'auto';\n    };\n    AutoArrangementStrategy.prototype.getLineCount = function () {\n        return -1;\n    };\n    AutoArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {\n        var columnCount = Math.max(1, Math.floor(actualViewerWidth / cardMinWidth));\n        columnCount = Math.min(itemsCount, columnCount);\n        return columnCount;\n    };\n    AutoArrangementStrategy.prototype.checkEmptyRows = function (columnCount, itemsCount) {\n        var lastRowCount = function () { return itemsCount % columnCount; };\n        var fullRowCount = function () { return Math.floor(itemsCount / columnCount); };\n        var nextLastRowCount = function () { return lastRowCount() + fullRowCount(); };\n        while (lastRowCount() > 0 && (nextLastRowCount() < columnCount)) {\n            columnCount--;\n        }\n        return columnCount;\n    };\n    AutoArrangementStrategy.prototype.calcBestProportions = function (calcArrangementInfo) {\n        var arrangementInfo = calcArrangementInfo();\n        if (arrangementInfo.columnCount > 1) {\n            var nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);\n            while (nextArrangementInfo.proportionFactor() < arrangementInfo.proportionFactor() && arrangementInfo.columnCount > 1) {\n                arrangementInfo = nextArrangementInfo;\n                nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);\n            }\n        }\n        return arrangementInfo;\n    };\n    AutoArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {\n        return Math.ceil(itemsCount / columnCount);\n    };\n    return AutoArrangementStrategy;\n}(ArrangementStrategy));\nexports.AutoArrangementStrategy = AutoArrangementStrategy;\nvar ColumnArrangementStrategy = (function (_super) {\n    __extends(ColumnArrangementStrategy, _super);\n    function ColumnArrangementStrategy(columnCount) {\n        var _this = _super.call(this) || this;\n        _this.columnCount = columnCount;\n        return _this;\n    }\n    ColumnArrangementStrategy.prototype.getArrangeMethod = function () {\n        return 'column';\n    };\n    ColumnArrangementStrategy.prototype.getLineCount = function () {\n        return this.columnCount;\n    };\n    ColumnArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {\n        return Math.min(itemsCount, this.columnCount);\n    };\n    ColumnArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {\n        return Math.max(1, Math.ceil(itemsCount / columnCount));\n    };\n    return ColumnArrangementStrategy;\n}(ArrangementStrategy));\nexports.ColumnArrangementStrategy = ColumnArrangementStrategy;\nvar RowArrangementStrategy = (function (_super) {\n    __extends(RowArrangementStrategy, _super);\n    function RowArrangementStrategy(rowCount) {\n        var _this = _super.call(this) || this;\n        _this.rowCount = rowCount;\n        return _this;\n    }\n    RowArrangementStrategy.prototype.getArrangementMethod = function () {\n        return 'row';\n    };\n    RowArrangementStrategy.prototype.getLineCount = function () {\n        return this.rowCount;\n    };\n    RowArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {\n        return Math.ceil(itemsCount / Math.min(itemsCount, this.rowCount));\n    };\n    RowArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {\n        return Math.min(itemsCount, this.rowCount);\n    };\n    RowArrangementStrategy.prototype.getArrangementDirection = function () {\n        return 'row';\n    };\n    return RowArrangementStrategy;\n}(ArrangementStrategy));\nexports.RowArrangementStrategy = RowArrangementStrategy;\n"]},"metadata":{},"sourceType":"script"}