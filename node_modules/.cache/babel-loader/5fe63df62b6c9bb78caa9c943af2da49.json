{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_column-width-calculator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColumnWidthCalculator = void 0;\n\nvar $ = require(\"jquery\");\n\nvar COLUMN_MIN_WIDTH = 10;\n\nvar ColumnWidthCalculator = function () {\n  function ColumnWidthCalculator() {}\n\n  Object.defineProperty(ColumnWidthCalculator.prototype, \"columnsResized\", {\n    get: function () {\n      return this._columnWidthsStorage && this._columnWidthsStorage.columnsResized ? true : false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ColumnWidthCalculator.prototype.reset = function (viewModel, columnWidthMode) {\n    this._resetWidthOptions(viewModel, columnWidthMode);\n\n    this._columnWidthsStorage = undefined;\n  };\n\n  ColumnWidthCalculator.prototype.getLeftPrintingColumnIndex = function (hScrollPosition) {\n    var that = this,\n        columnIndex = 0,\n        widthSum = 0;\n    $.each(that._columnWidths, function (index, width) {\n      if (hScrollPosition < widthSum + width / 2) {\n        columnIndex = index;\n        return false;\n      }\n\n      widthSum += width;\n    });\n    return columnIndex;\n  };\n\n  ColumnWidthCalculator.prototype.getClientWidthOptions = function () {\n    var that = this,\n        clientWidthOptions;\n\n    if (that.widthOptions) {\n      clientWidthOptions = {\n        mode: that.widthOptions.mode,\n        columnsOptions: []\n      };\n      $.each(that.widthOptions.columnsOptions, function (i, info) {\n        clientWidthOptions.columnsOptions[i] = {\n          widthType: info.widthType,\n          weight: info.weight\n        };\n      });\n    }\n\n    return clientWidthOptions;\n  };\n\n  ColumnWidthCalculator.prototype.onDataLoaded = function (viewModel, columnWidthMode) {\n    var that = this;\n\n    this._resetWidthOptions(viewModel, columnWidthMode);\n\n    if (that._columnWidthsStorage) {\n      that.widthOptions.mode = that._columnWidthsStorage.mode;\n      $.each(that.widthOptions.columnsOptions, function (i, info) {\n        $.each(that._columnWidthsStorage.columnsOptions, function (j, storageWidthInfo) {\n          if (info.actualIndex === storageWidthInfo.actualIndex) {\n            info.widthType = storageWidthInfo.widthType;\n            info.weight = storageWidthInfo.weight;\n          }\n        });\n      });\n    }\n  };\n\n  ColumnWidthCalculator.prototype.calcColumnsWidth = function (bestFitProvider, maxVisibleWidth, charWidth) {\n    var _this = this;\n\n    this._columnWidths = [];\n\n    var widthInfo = this._createWidthInfo(bestFitProvider, charWidth);\n\n    this._calcWidth(widthInfo, maxVisibleWidth);\n\n    widthInfo.columnsOptions.forEach(function (columnInfo) {\n      _this._columnWidths.push(columnInfo.actualWidth);\n    });\n    return this._columnWidths;\n  };\n\n  ColumnWidthCalculator.prototype.onColumnResized = function (leftColumnIndex, leftColumnWidth, rightColumnWidth) {\n    this._unfixColumnWidth(leftColumnIndex);\n\n    if (leftColumnWidth < COLUMN_MIN_WIDTH) {\n      rightColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;\n      leftColumnWidth = COLUMN_MIN_WIDTH;\n    } else if (rightColumnWidth < COLUMN_MIN_WIDTH) {\n      leftColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;\n      rightColumnWidth = COLUMN_MIN_WIDTH;\n    }\n\n    this._columnWidths[leftColumnIndex] = leftColumnWidth;\n    this._columnWidths[leftColumnIndex + 1] = rightColumnWidth;\n\n    this._updateWeight(this.widthOptions.columnsOptions, this._columnWidths);\n\n    this._updateColumnWidthsStorage();\n\n    return this._columnWidths;\n  };\n\n  ColumnWidthCalculator.prototype._unfixColumnWidth = function (leftColumnIndex) {\n    var that = this,\n        leftColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex],\n        rightColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex + 1],\n        unfixColumnWidth = function (info) {\n      info.widthType = 'Weight';\n    };\n\n    that.widthOptions.mode = 'Manual';\n\n    if (that._isAllColumnsFixed()) {\n      $.each(that.widthOptions.columnsOptions, function (_, info) {\n        unfixColumnWidth(info);\n      });\n    } else {\n      unfixColumnWidth(leftColumnInfo);\n      unfixColumnWidth(rightColumnInfo);\n    }\n  };\n\n  ColumnWidthCalculator.prototype._calcWidth = function (optionsInfo, maxVisibleWidth) {\n    var actualWidthSum = 0,\n        autoFitToContents = optionsInfo.mode === 'AutoFitToContents';\n    $.each(optionsInfo.columnsOptions, function (_, info) {\n      info.actualWidth = info.initialWidth;\n      actualWidthSum += info.initialWidth;\n    });\n\n    if (actualWidthSum !== maxVisibleWidth && (!autoFitToContents || autoFitToContents && actualWidthSum < maxVisibleWidth)) {\n      actualWidthSum = this._scaleColumns(optionsInfo, false, maxVisibleWidth, actualWidthSum);\n\n      if (actualWidthSum !== maxVisibleWidth) {\n        this._scaleColumns(optionsInfo, true, maxVisibleWidth, actualWidthSum);\n      }\n    }\n  };\n\n  ColumnWidthCalculator.prototype._scaleColumns = function (optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {\n    var that = this,\n        scalingColumnSum,\n        targetScalingColumnSum,\n        updatedActualWidthSum,\n        nonScalingColumnSum = 0;\n    $.each(optionsInfo.columnsOptions, function (_, columnInfo) {\n      if (!that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {\n        nonScalingColumnSum += columnInfo.actualWidth;\n      }\n    });\n    scalingColumnSum = actualWidthSum - nonScalingColumnSum;\n    targetScalingColumnSum = Math.abs(maxVisibleWidth - nonScalingColumnSum);\n    updatedActualWidthSum = nonScalingColumnSum;\n    $.each(optionsInfo.columnsOptions, function (_, columnInfo) {\n      if (that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {\n        var correctedWidth = Math.round(targetScalingColumnSum * columnInfo.actualWidth / scalingColumnSum),\n            actualWidth = Math.max(correctedWidth, COLUMN_MIN_WIDTH);\n        columnInfo.actualWidth = actualWidth;\n        updatedActualWidthSum += actualWidth;\n      }\n    });\n    return that._spreadRemainder(optionsInfo, isFixed, maxVisibleWidth, updatedActualWidthSum);\n  };\n\n  ColumnWidthCalculator.prototype._spreadRemainder = function (optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {\n    for (var i = optionsInfo.columnsOptions.length - 1; i >= 0; i--) {\n      var columnInfo = optionsInfo.columnsOptions[i];\n      var remainder = actualWidthSum - maxVisibleWidth;\n      if (remainder === 0) return actualWidthSum;\n\n      if (this._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {\n        columnInfo.actualWidth -= remainder;\n        actualWidthSum -= remainder;\n\n        if (columnInfo.actualWidth < COLUMN_MIN_WIDTH) {\n          actualWidthSum += Math.abs(columnInfo.actualWidth - COLUMN_MIN_WIDTH);\n          columnInfo.actualWidth = COLUMN_MIN_WIDTH;\n        }\n      }\n    }\n\n    return actualWidthSum;\n  };\n\n  ColumnWidthCalculator.prototype._isScaledColumns = function (widthMode, widthType, isFixed) {\n    var isFixedWidth = function (widthMode, widthType) {\n      return widthMode !== 'Manual' || widthType != 'Weight';\n    };\n\n    return isFixedWidth(widthMode, widthType) === isFixed;\n  };\n\n  ColumnWidthCalculator.prototype._resetWidthOptions = function (viewModel, columnWidthMode) {\n    var that = this,\n        columns = viewModel.Columns,\n        isManualColumnWidthMode = columnWidthMode == 'Manual';\n    that.widthOptions = {\n      mode: columnWidthMode,\n      columnsOptions: []\n    };\n    $.each(columns, function (i, column) {\n      that.widthOptions.columnsOptions[i] = {\n        actualIndex: column.ActualIndex,\n        widthType: column.WidthType,\n        weight: column.Weight,\n        fixedWidth: column.FixedWidth\n      };\n    });\n  };\n\n  ColumnWidthCalculator.prototype._createWidthInfo = function (bestFitProvider, charWidth) {\n    var that = this,\n        isManualMode = that.widthOptions.mode == 'Manual',\n        widthInfo = {\n      mode: that.widthOptions.mode,\n      columnsOptions: []\n    };\n    $.each(that.widthOptions.columnsOptions, function (i, info) {\n      var initialWidth = 0;\n\n      if (!isManualMode || info.widthType === 'FitToContent') {\n        initialWidth = bestFitProvider.getBestFit(i);\n      } else if (isManualMode && info.widthType === 'FixedWidth') {\n        initialWidth = Math.round(info.fixedWidth * charWidth);\n      } else {\n        initialWidth = info.weight;\n      }\n\n      widthInfo.columnsOptions.push({\n        widthType: info.widthType,\n        initialWidth: initialWidth,\n        actualWidth: 0\n      });\n    });\n    return widthInfo;\n  };\n\n  ColumnWidthCalculator.prototype._updateColumnWidthsStorage = function () {\n    var that = this,\n        found,\n        res = {\n      columnsResized: true,\n      mode: that.widthOptions.mode,\n      columnsOptions: []\n    };\n\n    for (var i = 0; i < that.widthOptions.columnsOptions.length; i++) {\n      res.columnsOptions.push(that.widthOptions.columnsOptions[i]);\n    }\n\n    if (that._columnWidthsStorage) {\n      for (var i = 0; i < that._columnWidthsStorage.columnsOptions.length; i++) {\n        found = false;\n\n        for (var j = 0; j < res.columnsOptions.length; j++) {\n          if (that._columnWidthsStorage.columnsOptions[i].actualIndex === res.columnsOptions[j].actualIndex) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          res.columnsOptions.push(that._columnWidthsStorage.columnsOptions[i]);\n        }\n      }\n    }\n\n    this._columnWidthsStorage = res;\n  };\n\n  ColumnWidthCalculator.prototype._isAllColumnsFixed = function () {\n    var that = this,\n        allColumnsFixed = true;\n    $.each(that.widthOptions.columnsOptions, function (_, info) {\n      if (info.widthType === 'Weight') {\n        allColumnsFixed = false;\n        return false;\n      }\n    });\n    return allColumnsFixed;\n  };\n\n  ColumnWidthCalculator.prototype._updateWeight = function (columnsWidthInfo, columnWidths) {\n    var widthSum = 0;\n    var weightSum = 0;\n    $.each(columnsWidthInfo, function (i, info) {\n      if (info.widthType === 'Weight') {\n        widthSum += columnWidths[i];\n        weightSum += info.weight;\n      }\n    });\n    $.each(columnsWidthInfo, function (i, info) {\n      if (info.widthType === 'Weight') {\n        info.weight = columnWidths[i] * weightSum / widthSum;\n      }\n    });\n  };\n\n  return ColumnWidthCalculator;\n}();\n\nexports.ColumnWidthCalculator = ColumnWidthCalculator;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/viewer-items/data-grid-item/_column-width-calculator.js"],"names":["Object","defineProperty","exports","value","ColumnWidthCalculator","$","require","COLUMN_MIN_WIDTH","prototype","get","_columnWidthsStorage","columnsResized","enumerable","configurable","reset","viewModel","columnWidthMode","_resetWidthOptions","undefined","getLeftPrintingColumnIndex","hScrollPosition","that","columnIndex","widthSum","each","_columnWidths","index","width","getClientWidthOptions","clientWidthOptions","widthOptions","mode","columnsOptions","i","info","widthType","weight","onDataLoaded","j","storageWidthInfo","actualIndex","calcColumnsWidth","bestFitProvider","maxVisibleWidth","charWidth","_this","widthInfo","_createWidthInfo","_calcWidth","forEach","columnInfo","push","actualWidth","onColumnResized","leftColumnIndex","leftColumnWidth","rightColumnWidth","_unfixColumnWidth","_updateWeight","_updateColumnWidthsStorage","leftColumnInfo","rightColumnInfo","unfixColumnWidth","_isAllColumnsFixed","_","optionsInfo","actualWidthSum","autoFitToContents","initialWidth","_scaleColumns","isFixed","scalingColumnSum","targetScalingColumnSum","updatedActualWidthSum","nonScalingColumnSum","_isScaledColumns","Math","abs","correctedWidth","round","max","_spreadRemainder","length","remainder","widthMode","isFixedWidth","columns","Columns","isManualColumnWidthMode","column","ActualIndex","WidthType","Weight","fixedWidth","FixedWidth","isManualMode","getBestFit","found","res","allColumnsFixed","columnsWidthInfo","columnWidths","weightSum"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_column-width-calculator.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColumnWidthCalculator = void 0;\nvar $ = require(\"jquery\");\nvar COLUMN_MIN_WIDTH = 10;\nvar ColumnWidthCalculator = (function () {\n    function ColumnWidthCalculator() {\n    }\n    Object.defineProperty(ColumnWidthCalculator.prototype, \"columnsResized\", {\n        get: function () {\n            return this._columnWidthsStorage && this._columnWidthsStorage.columnsResized ? true : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ColumnWidthCalculator.prototype.reset = function (viewModel, columnWidthMode) {\n        this._resetWidthOptions(viewModel, columnWidthMode);\n        this._columnWidthsStorage = undefined;\n    };\n    ColumnWidthCalculator.prototype.getLeftPrintingColumnIndex = function (hScrollPosition) {\n        var that = this, columnIndex = 0, widthSum = 0;\n        $.each(that._columnWidths, function (index, width) {\n            if (hScrollPosition < widthSum + width / 2) {\n                columnIndex = index;\n                return false;\n            }\n            widthSum += width;\n        });\n        return columnIndex;\n    };\n    ColumnWidthCalculator.prototype.getClientWidthOptions = function () {\n        var that = this, clientWidthOptions;\n        if (that.widthOptions) {\n            clientWidthOptions = {\n                mode: that.widthOptions.mode,\n                columnsOptions: []\n            };\n            $.each(that.widthOptions.columnsOptions, function (i, info) {\n                clientWidthOptions.columnsOptions[i] = {\n                    widthType: info.widthType,\n                    weight: info.weight\n                };\n            });\n        }\n        return clientWidthOptions;\n    };\n    ColumnWidthCalculator.prototype.onDataLoaded = function (viewModel, columnWidthMode) {\n        var that = this;\n        this._resetWidthOptions(viewModel, columnWidthMode);\n        if (that._columnWidthsStorage) {\n            that.widthOptions.mode = that._columnWidthsStorage.mode;\n            $.each(that.widthOptions.columnsOptions, function (i, info) {\n                $.each(that._columnWidthsStorage.columnsOptions, function (j, storageWidthInfo) {\n                    if (info.actualIndex === storageWidthInfo.actualIndex) {\n                        info.widthType = storageWidthInfo.widthType;\n                        info.weight = storageWidthInfo.weight;\n                    }\n                });\n            });\n        }\n    };\n    ColumnWidthCalculator.prototype.calcColumnsWidth = function (bestFitProvider, maxVisibleWidth, charWidth) {\n        var _this = this;\n        this._columnWidths = [];\n        var widthInfo = this._createWidthInfo(bestFitProvider, charWidth);\n        this._calcWidth(widthInfo, maxVisibleWidth);\n        widthInfo.columnsOptions.forEach(function (columnInfo) {\n            _this._columnWidths.push(columnInfo.actualWidth);\n        });\n        return this._columnWidths;\n    };\n    ColumnWidthCalculator.prototype.onColumnResized = function (leftColumnIndex, leftColumnWidth, rightColumnWidth) {\n        this._unfixColumnWidth(leftColumnIndex);\n        if (leftColumnWidth < COLUMN_MIN_WIDTH) {\n            rightColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;\n            leftColumnWidth = COLUMN_MIN_WIDTH;\n        }\n        else if (rightColumnWidth < COLUMN_MIN_WIDTH) {\n            leftColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;\n            rightColumnWidth = COLUMN_MIN_WIDTH;\n        }\n        this._columnWidths[leftColumnIndex] = leftColumnWidth;\n        this._columnWidths[leftColumnIndex + 1] = rightColumnWidth;\n        this._updateWeight(this.widthOptions.columnsOptions, this._columnWidths);\n        this._updateColumnWidthsStorage();\n        return this._columnWidths;\n    };\n    ColumnWidthCalculator.prototype._unfixColumnWidth = function (leftColumnIndex) {\n        var that = this, leftColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex], rightColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex + 1], unfixColumnWidth = function (info) {\n            info.widthType = 'Weight';\n        };\n        that.widthOptions.mode = 'Manual';\n        if (that._isAllColumnsFixed()) {\n            $.each(that.widthOptions.columnsOptions, function (_, info) {\n                unfixColumnWidth(info);\n            });\n        }\n        else {\n            unfixColumnWidth(leftColumnInfo);\n            unfixColumnWidth(rightColumnInfo);\n        }\n    };\n    ColumnWidthCalculator.prototype._calcWidth = function (optionsInfo, maxVisibleWidth) {\n        var actualWidthSum = 0, autoFitToContents = optionsInfo.mode === 'AutoFitToContents';\n        $.each(optionsInfo.columnsOptions, function (_, info) {\n            info.actualWidth = info.initialWidth;\n            actualWidthSum += info.initialWidth;\n        });\n        if (actualWidthSum !== maxVisibleWidth && (!autoFitToContents || (autoFitToContents && actualWidthSum < maxVisibleWidth))) {\n            actualWidthSum = this._scaleColumns(optionsInfo, false, maxVisibleWidth, actualWidthSum);\n            if (actualWidthSum !== maxVisibleWidth) {\n                this._scaleColumns(optionsInfo, true, maxVisibleWidth, actualWidthSum);\n            }\n        }\n    };\n    ColumnWidthCalculator.prototype._scaleColumns = function (optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {\n        var that = this, scalingColumnSum, targetScalingColumnSum, updatedActualWidthSum, nonScalingColumnSum = 0;\n        $.each(optionsInfo.columnsOptions, function (_, columnInfo) {\n            if (!that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {\n                nonScalingColumnSum += columnInfo.actualWidth;\n            }\n        });\n        scalingColumnSum = actualWidthSum - nonScalingColumnSum;\n        targetScalingColumnSum = Math.abs(maxVisibleWidth - nonScalingColumnSum);\n        updatedActualWidthSum = nonScalingColumnSum;\n        $.each(optionsInfo.columnsOptions, function (_, columnInfo) {\n            if (that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {\n                var correctedWidth = Math.round(targetScalingColumnSum * columnInfo.actualWidth / scalingColumnSum), actualWidth = Math.max(correctedWidth, COLUMN_MIN_WIDTH);\n                columnInfo.actualWidth = actualWidth;\n                updatedActualWidthSum += actualWidth;\n            }\n        });\n        return that._spreadRemainder(optionsInfo, isFixed, maxVisibleWidth, updatedActualWidthSum);\n    };\n    ColumnWidthCalculator.prototype._spreadRemainder = function (optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {\n        for (var i = optionsInfo.columnsOptions.length - 1; i >= 0; i--) {\n            var columnInfo = optionsInfo.columnsOptions[i];\n            var remainder = actualWidthSum - maxVisibleWidth;\n            if (remainder === 0)\n                return actualWidthSum;\n            if (this._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {\n                columnInfo.actualWidth -= remainder;\n                actualWidthSum -= remainder;\n                if (columnInfo.actualWidth < COLUMN_MIN_WIDTH) {\n                    actualWidthSum += Math.abs(columnInfo.actualWidth - COLUMN_MIN_WIDTH);\n                    columnInfo.actualWidth = COLUMN_MIN_WIDTH;\n                }\n            }\n        }\n        return actualWidthSum;\n    };\n    ColumnWidthCalculator.prototype._isScaledColumns = function (widthMode, widthType, isFixed) {\n        var isFixedWidth = function (widthMode, widthType) {\n            return widthMode !== 'Manual' || widthType != 'Weight';\n        };\n        return isFixedWidth(widthMode, widthType) === isFixed;\n    };\n    ColumnWidthCalculator.prototype._resetWidthOptions = function (viewModel, columnWidthMode) {\n        var that = this, columns = viewModel.Columns, isManualColumnWidthMode = columnWidthMode == 'Manual';\n        that.widthOptions = {\n            mode: columnWidthMode,\n            columnsOptions: []\n        };\n        $.each(columns, function (i, column) {\n            that.widthOptions.columnsOptions[i] = {\n                actualIndex: column.ActualIndex,\n                widthType: column.WidthType,\n                weight: column.Weight,\n                fixedWidth: column.FixedWidth\n            };\n        });\n    };\n    ColumnWidthCalculator.prototype._createWidthInfo = function (bestFitProvider, charWidth) {\n        var that = this, isManualMode = that.widthOptions.mode == 'Manual', widthInfo = {\n            mode: that.widthOptions.mode,\n            columnsOptions: []\n        };\n        $.each(that.widthOptions.columnsOptions, function (i, info) {\n            var initialWidth = 0;\n            if (!isManualMode || info.widthType === 'FitToContent') {\n                initialWidth = bestFitProvider.getBestFit(i);\n            }\n            else if (isManualMode && info.widthType === 'FixedWidth') {\n                initialWidth = Math.round(info.fixedWidth * charWidth);\n            }\n            else {\n                initialWidth = info.weight;\n            }\n            widthInfo.columnsOptions.push({\n                widthType: info.widthType,\n                initialWidth: initialWidth,\n                actualWidth: 0,\n            });\n        });\n        return widthInfo;\n    };\n    ColumnWidthCalculator.prototype._updateColumnWidthsStorage = function () {\n        var that = this, found, res = {\n            columnsResized: true,\n            mode: that.widthOptions.mode,\n            columnsOptions: []\n        };\n        for (var i = 0; i < that.widthOptions.columnsOptions.length; i++) {\n            res.columnsOptions.push(that.widthOptions.columnsOptions[i]);\n        }\n        if (that._columnWidthsStorage) {\n            for (var i = 0; i < that._columnWidthsStorage.columnsOptions.length; i++) {\n                found = false;\n                for (var j = 0; j < res.columnsOptions.length; j++) {\n                    if (that._columnWidthsStorage.columnsOptions[i].actualIndex === res.columnsOptions[j].actualIndex) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    res.columnsOptions.push(that._columnWidthsStorage.columnsOptions[i]);\n                }\n            }\n        }\n        this._columnWidthsStorage = res;\n    };\n    ColumnWidthCalculator.prototype._isAllColumnsFixed = function () {\n        var that = this, allColumnsFixed = true;\n        $.each(that.widthOptions.columnsOptions, function (_, info) {\n            if (info.widthType === 'Weight') {\n                allColumnsFixed = false;\n                return false;\n            }\n        });\n        return allColumnsFixed;\n    };\n    ColumnWidthCalculator.prototype._updateWeight = function (columnsWidthInfo, columnWidths) {\n        var widthSum = 0;\n        var weightSum = 0;\n        $.each(columnsWidthInfo, function (i, info) {\n            if (info.widthType === 'Weight') {\n                widthSum += columnWidths[i];\n                weightSum += info.weight;\n            }\n        });\n        $.each(columnsWidthInfo, function (i, info) {\n            if (info.widthType === 'Weight') {\n                info.weight = columnWidths[i] * weightSum / widthSum;\n            }\n        });\n    };\n    return ColumnWidthCalculator;\n}());\nexports.ColumnWidthCalculator = ColumnWidthCalculator;\n"]},"metadata":{},"sourceType":"script"}