{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_condition-type-editor.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatConditionTypeEditorSurface = void 0;\n\nvar ko = require(\"knockout\");\n\nvar _jquery_helpers_1 = require(\"../../data/_jquery-helpers\");\n\nvar _data_field_1 = require(\"../../model/data-sources/_data-field\");\n\nvar _format_condition_average_1 = require(\"../../model/format-rules/conditions/metadata/_format-condition-average\");\n\nvar _format_condition_top_bottom_1 = require(\"../../model/format-rules/conditions/metadata/_format-condition-top-bottom\");\n\nvar _format_condition_value_1 = require(\"../../model/format-rules/conditions/metadata/_format-condition-value\");\n\nvar range_converter_1 = require(\"../../model/format-rules/conditions/range/range-converter\");\n\nvar range_generator_1 = require(\"../../model/format-rules/conditions/range/range-generator\");\n\nvar _dashboard_item_format_rule_1 = require(\"../../model/format-rules/metadata/_dashboard-item-format-rule\");\n\nvar _appearance_settings_provider_1 = require(\"../../viewer-parts/conditional-formatting/_appearance-settings-provider\");\n\nvar _style_settings_provider_1 = require(\"../../viewer-parts/conditional-formatting/_style-settings-provider\");\n\nvar _cssHelper_1 = require(\"../../viewer-parts/viewer/_cssHelper\");\n\nfunction getConditionTypes(dataType, filters) {\n  if (filters === void 0) {\n    filters = {};\n  }\n\n  var filterGradient = function (array) {\n    return array.filter(function (displayValue) {\n      return filters.rangeGradientPredefinedTypeFilter ? filters.rangeGradientPredefinedTypeFilter(displayValue.value) : true;\n    });\n  };\n\n  var filterRangeSet = function (array) {\n    return array.filter(function (displayValue) {\n      return filters.rangeSetPredefinedTypeFilter ? filters.rangeSetPredefinedTypeFilter(displayValue.value) : true;\n    });\n  };\n\n  var conditionTypeFilter = filters.conditionTypeFilter || function () {\n    return true;\n  };\n\n  return [{\n    propertyName: 'conditionValue',\n    constraint: function (dataType) {\n      return dataType !== 'Enum';\n    },\n    specificTypes: Object.keys(_format_condition_value_1.conditionInCondition.values).map(function (key) {\n      return {\n        value: key,\n        displayText: _format_condition_value_1.conditionInCondition.values[key],\n        constraint: ['Equal', 'NotEqual', 'ContainsText'].indexOf(key) !== -1 ? function () {\n          return true;\n        } : function (dataType) {\n          return dataType !== 'Text';\n        }\n      };\n    })\n  }, {\n    propertyName: 'conditionTopBottom',\n    constraint: function (dataType) {\n      return _data_field_1.IsNumeric(dataType);\n    },\n    specificTypes: Object.keys(_format_condition_top_bottom_1.topBottom.values).map(function (key) {\n      return {\n        value: key,\n        displayText: _format_condition_top_bottom_1.topBottom.values[key]\n      };\n    })\n  }, {\n    propertyName: 'conditionAverage',\n    displayText: 'DashboardStringId.CommandFormatRuleAboveBelowAverage',\n    constraint: function (dataType) {\n      return _data_field_1.IsNumeric(dataType);\n    },\n    specificTypes: Object.keys(_format_condition_average_1.averageType.values).map(function (key) {\n      return {\n        value: key,\n        displayText: _format_condition_average_1.averageType.values[key]\n      };\n    })\n  }, {\n    propertyName: 'conditionDateOccuring',\n    constraint: function (dataType) {\n      return _data_field_1.IsDateTime(dataType);\n    }\n  }, {\n    propertyName: 'conditionExpression',\n    constraint: function (dataType) {\n      return dataType !== 'Enum';\n    }\n  }, {\n    propertyName: 'conditionRangeSet',\n    displayText: 'DashboardStringId.CommandFormatRuleRangeIcons',\n    rangeStyleType: 'Icon',\n    constraint: function (dataType) {\n      return !_data_field_1.IsTextual(dataType);\n    },\n    subtype: 'icons',\n    specificTypes: [{\n      key: 'Ranges 2',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows2,\n        displayText: 'Arrows 2'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray2,\n        displayText: 'Arrows Gray 2'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles2,\n        displayText: 'Circles 2'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols2,\n        displayText: 'Symbols 2'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled2,\n        displayText: 'Symbols Circled 2'\n      }])\n    }, {\n      key: 'Ranges 3',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows3,\n        displayText: 'Arrows 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray3,\n        displayText: 'Arrows Gray 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.PositiveNegative3,\n        displayText: 'Positive Negative 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles3,\n        displayText: 'Circles 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.TrafficLights3,\n        displayText: 'Traffic Lights 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Signs3,\n        displayText: 'Signs 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols3,\n        displayText: 'Symbols 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled3,\n        displayText: 'Symbols Circled 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Stars3,\n        displayText: 'Stars 3'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Flags3,\n        displayText: 'Flags 3'\n      }])\n    }, {\n      key: 'Ranges 4',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows4,\n        displayText: 'Arrows 4'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray4,\n        displayText: 'Arrows Gray 4'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles4,\n        displayText: 'Circles 4'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.CirclesRedToBlack4,\n        displayText: 'Circles Red To Black 4'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars4,\n        displayText: 'Bars 4'\n      }])\n    }, {\n      key: 'Ranges 5',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows5,\n        displayText: 'Arrows 5'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray5,\n        displayText: 'Arrows Gray 5'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Quarters5,\n        displayText: 'Quarters 5'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars5,\n        displayText: 'Bars 5'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.Boxes5,\n        displayText: 'Boxes 5'\n      }])\n    }]\n  }, {\n    propertyName: 'conditionRangeSet',\n    rangeStyleType: 'Color',\n    constraint: function (dataType) {\n      return !_data_field_1.IsTextual(dataType);\n    },\n    subtype: 'colors',\n    specificTypes: [{\n      key: 'Ranges 2',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen,\n        displayText: 'Pale Red Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen,\n        displayText: 'Red Green'\n      }])\n    }, {\n      key: 'Ranges 3',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue,\n        displayText: 'Pale Red Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue,\n        displayText: 'Red Green Blue'\n      }])\n    }, {\n      key: 'Ranges 4',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue,\n        displayText: 'Pale Red Yellow Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue,\n        displayText: 'Red Yellow Green Blue'\n      }])\n    }, {\n      key: 'Ranges 5',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue,\n        displayText: 'Pale Red Orange Yellow Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue,\n        displayText: 'Red Orange Yellow Green Blue'\n      }])\n    }]\n  }, {\n    propertyName: 'conditionRangeGradient',\n    rangeStyleType: 'Gradient',\n    constraint: function (dataType) {\n      return !_data_field_1.IsTextual(dataType);\n    },\n    specificTypes: [{\n      key: '2 Color Gradient Ranges',\n      items: filterGradient([{\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite,\n        displayText: 'Green White'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen,\n        displayText: 'White Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite,\n        displayText: 'Red White'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed,\n        displayText: 'White Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow,\n        displayText: 'Green Yellow'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen,\n        displayText: 'Yellow Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow,\n        displayText: 'Red Yellow'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed,\n        displayText: 'Yellow Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite,\n        displayText: 'Blue White'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue,\n        displayText: 'White Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed,\n        displayText: 'Blue Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue,\n        displayText: 'Red Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue,\n        displayText: 'Yellow Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow,\n        displayText: 'Blue Yellow'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue,\n        displayText: 'Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen,\n        displayText: 'Blue Green'\n      }])\n    }, {\n      key: '3 Color Gradient Ranges',\n      items: filterGradient([{\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue,\n        displayText: 'Green White Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen,\n        displayText: 'Blue White Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed,\n        displayText: 'Blue White Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue,\n        displayText: 'Red White Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed,\n        displayText: 'Green White Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen,\n        displayText: 'Red White Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed,\n        displayText: 'Green Yellow Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen,\n        displayText: 'Red Yellow Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed,\n        displayText: 'Blue Yellow Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue,\n        displayText: 'Red Yellow Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue,\n        displayText: 'Green Yellow Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen,\n        displayText: 'Blue Yellow Green'\n      }])\n    }]\n  }, {\n    propertyName: 'conditionBar',\n    constraint: function (dataType) {\n      return !_data_field_1.IsTextual(dataType);\n    }\n  }, {\n    propertyName: 'conditionColorRangeBar',\n    displayText: 'DashboardStringId.CommandFormatRuleColorRangeBar',\n    rangeStyleType: 'ColorBar',\n    constraint: function (dataType) {\n      return !_data_field_1.IsTextual(dataType);\n    },\n    specificTypes: [{\n      key: 'Ranges 2',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen,\n        displayText: 'Pale Red Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen,\n        displayText: 'Red Green'\n      }])\n    }, {\n      key: 'Ranges 3',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue,\n        displayText: 'Pale Red Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue,\n        displayText: 'Red Green Blue'\n      }])\n    }, {\n      key: 'Ranges 4',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue,\n        displayText: 'Pale Red Yellow Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue,\n        displayText: 'Red Yellow Green Blue'\n      }])\n    }, {\n      key: 'Ranges 5',\n      items: filterRangeSet([{\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue,\n        displayText: 'Pale Red Orange Yellow Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue,\n        displayText: 'Red Orange Yellow Green Blue'\n      }])\n    }]\n  }, {\n    propertyName: 'conditionGradientRangeBar',\n    displayText: 'DashboardStringId.CommandFormatRuleGradientRangeBar',\n    rangeStyleType: 'GradientBar',\n    constraint: function (dataType) {\n      return !_data_field_1.IsTextual(dataType);\n    },\n    specificTypes: [{\n      key: '2 Color Gradient Ranges',\n      items: filterGradient([{\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite,\n        displayText: 'Green White'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen,\n        displayText: 'White Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite,\n        displayText: 'Red White'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed,\n        displayText: 'White Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow,\n        displayText: 'Green Yellow'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen,\n        displayText: 'Yellow Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow,\n        displayText: 'Red Yellow'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed,\n        displayText: 'Yellow Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite,\n        displayText: 'Blue White'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue,\n        displayText: 'White Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed,\n        displayText: 'Blue Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue,\n        displayText: 'Red Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue,\n        displayText: 'Yellow Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow,\n        displayText: 'Blue Yellow'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue,\n        displayText: 'Green Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen,\n        displayText: 'Blue Green'\n      }])\n    }, {\n      key: '3 Color Gradient Ranges',\n      items: filterGradient([{\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue,\n        displayText: 'Green White Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen,\n        displayText: 'Blue White Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed,\n        displayText: 'Blue White Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue,\n        displayText: 'Red White Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed,\n        displayText: 'Green White Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen,\n        displayText: 'Red White Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed,\n        displayText: 'Green Yellow Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen,\n        displayText: 'Red Yellow Green'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed,\n        displayText: 'Blue Yellow Red'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue,\n        displayText: 'Red Yellow Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue,\n        displayText: 'Green Yellow Blue'\n      }, {\n        value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen,\n        displayText: 'Blue Yellow Green'\n      }])\n    }]\n  }].map(function (typeDescr) {\n    typeDescr['displayText'] = typeDescr['displayText'] || _dashboard_item_format_rule_1.conditionTypes.filter(function (t) {\n      return t.propertyName === typeDescr.propertyName;\n    })[0].displayName;\n    return typeDescr;\n  }).filter(function (ct) {\n    return conditionTypeFilter(ct.propertyName, ct.subtype);\n  }).filter(function (ct) {\n    return ct.constraint(dataType);\n  });\n}\n\nfunction getConditionSpecificTypes(conditionType, dataType, filters) {\n  var conditionTypeDesciptor = getConditionTypes(dataType, filters).filter(function (ct) {\n    return !!ct.subtype ? ct.propertyName + '_' + ct.subtype === conditionType : ct.propertyName === conditionType;\n  })[0];\n\n  if (conditionTypeDesciptor && conditionTypeDesciptor.specificTypes) {\n    var types = conditionTypeDesciptor.specificTypes.filter(function (st) {\n      return !st.constraint || st.constraint(dataType);\n    });\n    types['rangeStyleType'] = conditionTypeDesciptor.rangeStyleType || 'None';\n    return types;\n  } else {\n    var types = [{\n      value: conditionType,\n      displayText: '-'\n    }];\n    types['rangeStyleType'] = 'None';\n    return types;\n  }\n}\n\nvar FormatConditionTypeEditorSurface = function () {\n  function FormatConditionTypeEditorSurface(options) {\n    var _this = this;\n\n    this.displayMode = ko.observable();\n    this.ancestors = ko.observable([]);\n\n    this.backClick = function () {\n      _this.displayMode('conditionTypes');\n    };\n\n    this.updateItemAppearance = function (e) {\n      var element = _jquery_helpers_1.$unwrap(e.itemElement);\n\n      e.itemData.hasSpecificTypes ? element.classList.add('dx-dashboard-has-children') : element.classList.remove('dx-dashboard-has-children');\n    };\n\n    this.dataType = options.dataType;\n    this.conditionType = options.conditionType;\n    this.specificType = options.specificType;\n    this.displayMode.subscribe(function (mode) {\n      if (mode === 'conditionTypes') {\n        _this.ancestors(['…']);\n      } else {\n        _this.ancestors(['…', _this.availableConditionTypes().filter(function (t) {\n          return t.value === _this.conditionType();\n        })[0].displayText]);\n      }\n    });\n    this.availableConditionTypes = ko.computed(function () {\n      if (!_this.dataType()) return;\n      var types = getConditionTypes(_this.dataType(), options.filters).map(function (ct) {\n        return {\n          value: ct.propertyName + (ct.subtype ? '_' + ct.subtype : ''),\n          displayText: ct.displayText,\n          hasSpecificTypes: !!ct.specificTypes\n        };\n      });\n      return types;\n    });\n    this.availableConditionTypes.subscribe(function (types) {\n      if (!types.filter(function (t) {\n        return t.value === _this.conditionType.peek();\n      })[0]) {\n        _this.conditionType(null);\n      }\n    });\n    this.availableSpecificTypes = ko.computed(function () {\n      var conditionType = _this.conditionType();\n\n      var dataType = _this.dataType();\n\n      var types = dataType && conditionType ? getConditionSpecificTypes(conditionType, dataType, options.filters) : [];\n\n      if (types && types.length > 1) {\n        _this.displayMode('specificTypes');\n      } else {\n        _this.displayMode('conditionTypes');\n      }\n\n      return types;\n    });\n    this.availableSpecificTypes.subscribe(function (types) {\n      if (types.length === 1) _this.specificType(types[0].value);\n    });\n    this.selectedSpecificTypes = ko.computed(function () {\n      if (_this.availableSpecificTypes()['rangeStyleType'] === 'None') {\n        return _this.availableSpecificTypes() && _this.availableSpecificTypes().filter(function (value) {\n          return value.value === _this.specificType();\n        }) || [];\n      } else {\n        var selection = null,\n            key = null;\n\n        _this.availableSpecificTypes().forEach(function (group) {\n          group.items.forEach(function (item) {\n            if (item.value === _this.specificType()) {\n              key = group.key;\n              selection = item;\n              return false;\n            }\n          });\n          if (selection) return false;\n        });\n\n        return selection && [{\n          key: key,\n          items: [selection]\n        }] || [];\n      }\n    });\n  }\n\n  FormatConditionTypeEditorSurface.prototype.getStyleList = function (rangeStyleType) {\n    var _this = this;\n\n    var styleList = range_converter_1.FormatConditionConverter.getStyleList(rangeStyleType).list.reverse();\n    return styleList.map(function (styleType) {\n      if (_this.availableSpecificTypes()['rangeStyleType'] === 'Icon') {\n        return _style_settings_provider_1.styleSettingsProvider.toIconCssClass(styleType);\n      } else {\n        return _cssHelper_1.convertCssPropertyWrappersToString(_appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(styleType));\n      }\n    });\n  };\n\n  FormatConditionTypeEditorSurface.prototype.getGradientColorsList = function (type) {\n    return range_generator_1.FormatConditionRangeGenerator.generateGradientColors(type, 6).reverse();\n  };\n\n  return FormatConditionTypeEditorSurface;\n}();\n\nexports.FormatConditionTypeEditorSurface = FormatConditionTypeEditorSurface;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/designer/conditional-formatting/_condition-type-editor.js"],"names":["Object","defineProperty","exports","value","FormatConditionTypeEditorSurface","ko","require","_jquery_helpers_1","_data_field_1","_format_condition_average_1","_format_condition_top_bottom_1","_format_condition_value_1","range_converter_1","range_generator_1","_dashboard_item_format_rule_1","_appearance_settings_provider_1","_style_settings_provider_1","_cssHelper_1","getConditionTypes","dataType","filters","filterGradient","array","filter","displayValue","rangeGradientPredefinedTypeFilter","filterRangeSet","rangeSetPredefinedTypeFilter","conditionTypeFilter","propertyName","constraint","specificTypes","keys","conditionInCondition","values","map","key","displayText","indexOf","IsNumeric","topBottom","averageType","IsDateTime","rangeStyleType","IsTextual","subtype","items","FormatConditionRangeSetPredefinedType","Arrows2","ArrowsGray2","Circles2","Symbols2","SymbolsCircled2","Arrows3","ArrowsGray3","PositiveNegative3","Circles3","TrafficLights3","Signs3","Symbols3","SymbolsCircled3","Stars3","Flags3","Arrows4","ArrowsGray4","Circles4","CirclesRedToBlack4","Bars4","Arrows5","ArrowsGray5","Quarters5","Bars5","Boxes5","ColorsPaleRedGreen","ColorsRedGreen","ColorsPaleRedGreenBlue","ColorsRedGreenBlue","ColorsPaleRedYellowGreenBlue","ColorsRedYellowGreenBlue","ColorsPaleRedOrangeYellowGreenBlue","ColorsRedOrangeYellowGreenBlue","FormatConditionRangeGradientPredefinedType","GreenWhite","WhiteGreen","RedWhite","WhiteRed","GreenYellow","YellowGreen","RedYellow","YellowRed","BlueWhite","WhiteBlue","BlueRed","RedBlue","YellowBlue","BlueYellow","GreenBlue","BlueGreen","GreenWhiteBlue","BlueWhiteGreen","BlueWhiteRed","RedWhiteBlue","GreenWhiteRed","RedWhiteGreen","GreenYellowRed","RedYellowGreen","BlueYellowRed","RedYellowBlue","GreenYellowBlue","BlueYellowGreen","typeDescr","conditionTypes","t","displayName","ct","getConditionSpecificTypes","conditionType","conditionTypeDesciptor","types","st","options","_this","displayMode","observable","ancestors","backClick","updateItemAppearance","e","element","$unwrap","itemElement","itemData","hasSpecificTypes","classList","add","remove","specificType","subscribe","mode","availableConditionTypes","computed","peek","availableSpecificTypes","length","selectedSpecificTypes","selection","forEach","group","item","prototype","getStyleList","styleList","FormatConditionConverter","list","reverse","styleType","styleSettingsProvider","toIconCssClass","convertCssPropertyWrappersToString","appearanceSettingsProvider","toCssProperties","getGradientColorsList","type","FormatConditionRangeGenerator","generateGradientColors"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_condition-type-editor.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatConditionTypeEditorSurface = void 0;\nvar ko = require(\"knockout\");\nvar _jquery_helpers_1 = require(\"../../data/_jquery-helpers\");\nvar _data_field_1 = require(\"../../model/data-sources/_data-field\");\nvar _format_condition_average_1 = require(\"../../model/format-rules/conditions/metadata/_format-condition-average\");\nvar _format_condition_top_bottom_1 = require(\"../../model/format-rules/conditions/metadata/_format-condition-top-bottom\");\nvar _format_condition_value_1 = require(\"../../model/format-rules/conditions/metadata/_format-condition-value\");\nvar range_converter_1 = require(\"../../model/format-rules/conditions/range/range-converter\");\nvar range_generator_1 = require(\"../../model/format-rules/conditions/range/range-generator\");\nvar _dashboard_item_format_rule_1 = require(\"../../model/format-rules/metadata/_dashboard-item-format-rule\");\nvar _appearance_settings_provider_1 = require(\"../../viewer-parts/conditional-formatting/_appearance-settings-provider\");\nvar _style_settings_provider_1 = require(\"../../viewer-parts/conditional-formatting/_style-settings-provider\");\nvar _cssHelper_1 = require(\"../../viewer-parts/viewer/_cssHelper\");\nfunction getConditionTypes(dataType, filters) {\n    if (filters === void 0) { filters = {}; }\n    var filterGradient = function (array) { return array.filter(function (displayValue) { return filters.rangeGradientPredefinedTypeFilter ? filters.rangeGradientPredefinedTypeFilter(displayValue.value) : true; }); };\n    var filterRangeSet = function (array) { return array.filter(function (displayValue) { return filters.rangeSetPredefinedTypeFilter ? filters.rangeSetPredefinedTypeFilter(displayValue.value) : true; }); };\n    var conditionTypeFilter = filters.conditionTypeFilter || (function () { return true; });\n    return [{\n            propertyName: 'conditionValue',\n            constraint: function (dataType) { return dataType !== 'Enum'; },\n            specificTypes: Object\n                .keys(_format_condition_value_1.conditionInCondition.values)\n                .map(function (key) {\n                return {\n                    value: key,\n                    displayText: _format_condition_value_1.conditionInCondition.values[key],\n                    constraint: ['Equal', 'NotEqual', 'ContainsText'].indexOf(key) !== -1 ? function () { return true; } : (function (dataType) { return dataType !== 'Text'; })\n                };\n            })\n        }, {\n            propertyName: 'conditionTopBottom',\n            constraint: function (dataType) { return _data_field_1.IsNumeric(dataType); },\n            specificTypes: Object\n                .keys(_format_condition_top_bottom_1.topBottom.values)\n                .map(function (key) { return { value: key, displayText: _format_condition_top_bottom_1.topBottom.values[key] }; })\n        }, {\n            propertyName: 'conditionAverage',\n            displayText: 'DashboardStringId.CommandFormatRuleAboveBelowAverage',\n            constraint: function (dataType) { return _data_field_1.IsNumeric(dataType); },\n            specificTypes: Object\n                .keys(_format_condition_average_1.averageType.values)\n                .map(function (key) { return { value: key, displayText: _format_condition_average_1.averageType.values[key] }; })\n        }, {\n            propertyName: 'conditionDateOccuring',\n            constraint: function (dataType) { return _data_field_1.IsDateTime(dataType); }\n        }, {\n            propertyName: 'conditionExpression',\n            constraint: function (dataType) { return dataType !== 'Enum'; }\n        }, {\n            propertyName: 'conditionRangeSet',\n            displayText: 'DashboardStringId.CommandFormatRuleRangeIcons',\n            rangeStyleType: 'Icon',\n            constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },\n            subtype: 'icons',\n            specificTypes: [{\n                    key: 'Ranges 2',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows2, displayText: 'Arrows 2' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray2, displayText: 'Arrows Gray 2' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles2, displayText: 'Circles 2' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols2, displayText: 'Symbols 2' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled2, displayText: 'Symbols Circled 2' }\n                    ])\n                }, {\n                    key: 'Ranges 3',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows3, displayText: 'Arrows 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray3, displayText: 'Arrows Gray 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.PositiveNegative3, displayText: 'Positive Negative 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles3, displayText: 'Circles 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.TrafficLights3, displayText: 'Traffic Lights 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Signs3, displayText: 'Signs 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols3, displayText: 'Symbols 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled3, displayText: 'Symbols Circled 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Stars3, displayText: 'Stars 3' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Flags3, displayText: 'Flags 3' }\n                    ])\n                }, {\n                    key: 'Ranges 4',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows4, displayText: 'Arrows 4' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray4, displayText: 'Arrows Gray 4' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles4, displayText: 'Circles 4' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.CirclesRedToBlack4, displayText: 'Circles Red To Black 4' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars4, displayText: 'Bars 4' }\n                    ])\n                }, {\n                    key: 'Ranges 5',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows5, displayText: 'Arrows 5' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray5, displayText: 'Arrows Gray 5' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Quarters5, displayText: 'Quarters 5' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars5, displayText: 'Bars 5' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.Boxes5, displayText: 'Boxes 5' }\n                    ])\n                }]\n        }, {\n            propertyName: 'conditionRangeSet',\n            rangeStyleType: 'Color',\n            constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },\n            subtype: 'colors',\n            specificTypes: [{\n                    key: 'Ranges 2',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }\n                    ])\n                }, {\n                    key: 'Ranges 3',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }\n                    ])\n                }, {\n                    key: 'Ranges 4',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }\n                    ])\n                }, {\n                    key: 'Ranges 5',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }\n                    ])\n                }]\n        }, {\n            propertyName: 'conditionRangeGradient',\n            rangeStyleType: 'Gradient',\n            constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },\n            specificTypes: [{\n                    key: '2 Color Gradient Ranges',\n                    items: filterGradient([\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }\n                    ])\n                }, {\n                    key: '3 Color Gradient Ranges',\n                    items: filterGradient([\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }\n                    ])\n                }]\n        }, {\n            propertyName: 'conditionBar',\n            constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); }\n        }, {\n            propertyName: 'conditionColorRangeBar',\n            displayText: 'DashboardStringId.CommandFormatRuleColorRangeBar',\n            rangeStyleType: 'ColorBar',\n            constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },\n            specificTypes: [{\n                    key: 'Ranges 2',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }\n                    ])\n                }, {\n                    key: 'Ranges 3',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }\n                    ])\n                }, {\n                    key: 'Ranges 4',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }\n                    ])\n                }, {\n                    key: 'Ranges 5',\n                    items: filterRangeSet([\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }\n                    ])\n                }]\n        }, {\n            propertyName: 'conditionGradientRangeBar',\n            displayText: 'DashboardStringId.CommandFormatRuleGradientRangeBar',\n            rangeStyleType: 'GradientBar',\n            constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },\n            specificTypes: [{\n                    key: '2 Color Gradient Ranges',\n                    items: filterGradient([\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }\n                    ])\n                }, {\n                    key: '3 Color Gradient Ranges',\n                    items: filterGradient([\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },\n                        { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }\n                    ])\n                }]\n        },\n    ]\n        .map(function (typeDescr) {\n        typeDescr['displayText'] = typeDescr['displayText'] || _dashboard_item_format_rule_1.conditionTypes.filter(function (t) { return t.propertyName === typeDescr.propertyName; })[0].displayName;\n        return typeDescr;\n    })\n        .filter(function (ct) { return conditionTypeFilter(ct.propertyName, ct.subtype); })\n        .filter(function (ct) { return ct.constraint(dataType); });\n}\nfunction getConditionSpecificTypes(conditionType, dataType, filters) {\n    var conditionTypeDesciptor = getConditionTypes(dataType, filters).filter(function (ct) { return !!ct.subtype\n        ? ct.propertyName + '_' + ct.subtype === conditionType\n        : ct.propertyName === conditionType; })[0];\n    if (conditionTypeDesciptor && conditionTypeDesciptor.specificTypes) {\n        var types = conditionTypeDesciptor.specificTypes\n            .filter(function (st) { return !st.constraint || st.constraint(dataType); });\n        types['rangeStyleType'] = conditionTypeDesciptor.rangeStyleType || 'None';\n        return types;\n    }\n    else {\n        var types = [{ value: conditionType, displayText: '-' }];\n        types['rangeStyleType'] = 'None';\n        return types;\n    }\n}\nvar FormatConditionTypeEditorSurface = (function () {\n    function FormatConditionTypeEditorSurface(options) {\n        var _this = this;\n        this.displayMode = ko.observable();\n        this.ancestors = ko.observable([]);\n        this.backClick = function () {\n            _this.displayMode('conditionTypes');\n        };\n        this.updateItemAppearance = function (e) {\n            var element = _jquery_helpers_1.$unwrap(e.itemElement);\n            e.itemData.hasSpecificTypes ? element.classList.add('dx-dashboard-has-children') : element.classList.remove('dx-dashboard-has-children');\n        };\n        this.dataType = options.dataType;\n        this.conditionType = options.conditionType;\n        this.specificType = options.specificType;\n        this.displayMode.subscribe(function (mode) {\n            if (mode === 'conditionTypes') {\n                _this.ancestors(['…']);\n            }\n            else {\n                _this.ancestors(['…', _this.availableConditionTypes().filter(function (t) { return t.value === _this.conditionType(); })[0].displayText]);\n            }\n        });\n        this.availableConditionTypes = ko.computed(function () {\n            if (!_this.dataType())\n                return;\n            var types = getConditionTypes(_this.dataType(), options.filters)\n                .map(function (ct) { return ({\n                value: ct.propertyName + (ct.subtype ? '_' + ct.subtype : ''),\n                displayText: ct.displayText,\n                hasSpecificTypes: !!ct.specificTypes\n            }); });\n            return types;\n        });\n        this.availableConditionTypes.subscribe(function (types) {\n            if (!types.filter(function (t) { return t.value === _this.conditionType.peek(); })[0]) {\n                _this.conditionType(null);\n            }\n        });\n        this.availableSpecificTypes = ko.computed(function () {\n            var conditionType = _this.conditionType();\n            var dataType = _this.dataType();\n            var types = dataType && conditionType ? getConditionSpecificTypes(conditionType, dataType, options.filters) : [];\n            if (types && (types.length > 1)) {\n                _this.displayMode('specificTypes');\n            }\n            else {\n                _this.displayMode('conditionTypes');\n            }\n            return types;\n        });\n        this.availableSpecificTypes.subscribe(function (types) {\n            if (types.length === 1)\n                _this.specificType(types[0].value);\n        });\n        this.selectedSpecificTypes = ko.computed(function () {\n            if (_this.availableSpecificTypes()['rangeStyleType'] === 'None') {\n                return _this.availableSpecificTypes() && _this.availableSpecificTypes().filter(function (value) { return value.value === _this.specificType(); }) || [];\n            }\n            else {\n                var selection = null, key = null;\n                _this.availableSpecificTypes().forEach(function (group) {\n                    group.items.forEach(function (item) {\n                        if (item.value === _this.specificType()) {\n                            key = group.key;\n                            selection = item;\n                            return false;\n                        }\n                    });\n                    if (selection)\n                        return false;\n                });\n                return selection && [{ key: key, items: [selection] }] || [];\n            }\n        });\n    }\n    FormatConditionTypeEditorSurface.prototype.getStyleList = function (rangeStyleType) {\n        var _this = this;\n        var styleList = range_converter_1.FormatConditionConverter.getStyleList(rangeStyleType).list.reverse();\n        return styleList.map(function (styleType) {\n            if (_this.availableSpecificTypes()['rangeStyleType'] === 'Icon') {\n                return _style_settings_provider_1.styleSettingsProvider.toIconCssClass(styleType);\n            }\n            else {\n                return _cssHelper_1.convertCssPropertyWrappersToString(_appearance_settings_provider_1.appearanceSettingsProvider.toCssProperties(styleType));\n            }\n        });\n    };\n    FormatConditionTypeEditorSurface.prototype.getGradientColorsList = function (type) {\n        return range_generator_1.FormatConditionRangeGenerator.generateGradientColors(type, 6).reverse();\n    };\n    return FormatConditionTypeEditorSurface;\n}());\nexports.FormatConditionTypeEditorSurface = FormatConditionTypeEditorSurface;\n"]},"metadata":{},"sourceType":"script"}