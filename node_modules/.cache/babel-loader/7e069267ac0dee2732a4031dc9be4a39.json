{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/slider/ui.slider_tooltip.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Tooltip from \"../tooltip\";\nimport { extend } from \"../../core/utils/extend\";\nimport { SliderTooltipPositionController } from \"./slider_tooltip_position_controller\";\nimport numberLocalization from \"../../localization/number\";\nvar SLIDER_TOOLTIP_VISIBILITY_CLASS = \"dx-slider-tooltip-visible-on-hover\";\nvar SliderTooltip = Tooltip.inherit({\n  _getDefaultOptions() {\n    return extend(this.callBase(), {\n      visible: false,\n      position: \"top\",\n      hideOnOutsideClick: false,\n      hideTopOverlayHandler: null,\n      hideOnParentScroll: false,\n      animation: null,\n      arrowPosition: null,\n      templatesRenderAsynchronously: false,\n      _fixWrapperPosition: false,\n      useResizeObserver: false,\n      showMode: \"onHover\",\n      format: value => value,\n      value: 0\n    });\n  },\n\n  _initMarkup() {\n    this.callBase();\n\n    this._attachToMarkup(this.option(\"visible\"));\n\n    this._toggleShowModeClass();\n  },\n\n  _renderContent() {\n    this.callBase();\n\n    this._renderContentText();\n  },\n\n  _renderContentText() {\n    var {\n      value: value,\n      format: format\n    } = this.option();\n    var formattedText = numberLocalization.format(null !== value && void 0 !== value ? value : 0, format);\n    this.$content().text(formattedText);\n\n    this._renderPosition();\n  },\n\n  _toggleShowModeClass() {\n    var isHoverMode = \"onHover\" === this.option(\"showMode\");\n    var $sliderHandle = this.option(\"target\");\n    $sliderHandle.toggleClass(SLIDER_TOOLTIP_VISIBILITY_CLASS, isHoverMode);\n  },\n\n  _initPositionController() {\n    this._positionController = new SliderTooltipPositionController(this._getPositionControllerConfig());\n  },\n\n  _attachToMarkup(enabled) {\n    var $sliderHandle = this.option(\"target\");\n    enabled ? this.$element().appendTo($sliderHandle) : this.$element().detach();\n  },\n\n  _optionChanged(args) {\n    var {\n      name: name,\n      value: value\n    } = args;\n\n    switch (name) {\n      case \"visible\":\n        this._attachToMarkup(value);\n\n        this.callBase(args);\n        break;\n\n      case \"showMode\":\n        this._toggleShowModeClass();\n\n        break;\n\n      case \"format\":\n      case \"value\":\n        this._renderContentText();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n\n  updatePosition() {\n    this._renderPosition();\n  }\n\n});\nexport default SliderTooltip;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/slider/ui.slider_tooltip.js"],"names":["Tooltip","extend","SliderTooltipPositionController","numberLocalization","SLIDER_TOOLTIP_VISIBILITY_CLASS","SliderTooltip","inherit","_getDefaultOptions","callBase","visible","position","hideOnOutsideClick","hideTopOverlayHandler","hideOnParentScroll","animation","arrowPosition","templatesRenderAsynchronously","_fixWrapperPosition","useResizeObserver","showMode","format","value","_initMarkup","_attachToMarkup","option","_toggleShowModeClass","_renderContent","_renderContentText","formattedText","$content","text","_renderPosition","isHoverMode","$sliderHandle","toggleClass","_initPositionController","_positionController","_getPositionControllerConfig","enabled","$element","appendTo","detach","_optionChanged","args","name","updatePosition"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/slider/ui.slider_tooltip.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Tooltip from \"../tooltip\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    SliderTooltipPositionController\r\n} from \"./slider_tooltip_position_controller\";\r\nimport numberLocalization from \"../../localization/number\";\r\nvar SLIDER_TOOLTIP_VISIBILITY_CLASS = \"dx-slider-tooltip-visible-on-hover\";\r\nvar SliderTooltip = Tooltip.inherit({\r\n    _getDefaultOptions() {\r\n        return extend(this.callBase(), {\r\n            visible: false,\r\n            position: \"top\",\r\n            hideOnOutsideClick: false,\r\n            hideTopOverlayHandler: null,\r\n            hideOnParentScroll: false,\r\n            animation: null,\r\n            arrowPosition: null,\r\n            templatesRenderAsynchronously: false,\r\n            _fixWrapperPosition: false,\r\n            useResizeObserver: false,\r\n            showMode: \"onHover\",\r\n            format: value => value,\r\n            value: 0\r\n        })\r\n    },\r\n    _initMarkup() {\r\n        this.callBase();\r\n        this._attachToMarkup(this.option(\"visible\"));\r\n        this._toggleShowModeClass()\r\n    },\r\n    _renderContent() {\r\n        this.callBase();\r\n        this._renderContentText()\r\n    },\r\n    _renderContentText() {\r\n        var {\r\n            value: value,\r\n            format: format\r\n        } = this.option();\r\n        var formattedText = numberLocalization.format(null !== value && void 0 !== value ? value : 0, format);\r\n        this.$content().text(formattedText);\r\n        this._renderPosition()\r\n    },\r\n    _toggleShowModeClass() {\r\n        var isHoverMode = \"onHover\" === this.option(\"showMode\");\r\n        var $sliderHandle = this.option(\"target\");\r\n        $sliderHandle.toggleClass(SLIDER_TOOLTIP_VISIBILITY_CLASS, isHoverMode)\r\n    },\r\n    _initPositionController() {\r\n        this._positionController = new SliderTooltipPositionController(this._getPositionControllerConfig())\r\n    },\r\n    _attachToMarkup(enabled) {\r\n        var $sliderHandle = this.option(\"target\");\r\n        enabled ? this.$element().appendTo($sliderHandle) : this.$element().detach()\r\n    },\r\n    _optionChanged(args) {\r\n        var {\r\n            name: name,\r\n            value: value\r\n        } = args;\r\n        switch (name) {\r\n            case \"visible\":\r\n                this._attachToMarkup(value);\r\n                this.callBase(args);\r\n                break;\r\n            case \"showMode\":\r\n                this._toggleShowModeClass();\r\n                break;\r\n            case \"format\":\r\n            case \"value\":\r\n                this._renderContentText();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    updatePosition() {\r\n        this._renderPosition()\r\n    }\r\n});\r\nexport default SliderTooltip;\r\n"]},"metadata":{},"sourceType":"module"}