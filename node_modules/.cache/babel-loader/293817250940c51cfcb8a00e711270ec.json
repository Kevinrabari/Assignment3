{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_grid-filter-parser.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseFilter = void 0;\n\nvar _utils_1 = require(\"../../../data/_utils\");\n\nfunction parseFilter(filterItems, columns, columnIndex, dateToString) {\n  var resultFilterString = '';\n\n  if (_utils_1.type.isFunction(filterItems[0])) {\n    var exprColumnIndex = columnIndex === undefined ? filterItems.columnIndex : columnIndex;\n    return _parseFilterOperatorPart(filterItems, columns, exprColumnIndex, dateToString);\n  } else {\n    for (var i = 0; i < filterItems.length; i++) {\n      var filterItem = filterItems[i];\n      resultFilterString += _utils_1.type.isString(filterItem) ? ' ' + filterItem + ' ' : parseFilter(filterItem, columns, filterItems.columnIndex, dateToString);\n    }\n  }\n\n  return '(' + resultFilterString + ')';\n}\n\nexports.parseFilter = parseFilter;\n\nfunction _parseFilterOperatorPart(filterItemPart, columns, exprColumnIndex, dateToString) {\n  var partOperator = filterItemPart[1],\n      value = filterItemPart[2],\n      column = columns[exprColumnIndex],\n      dataField = column.dataField,\n      unaryOperator = 'not',\n      binaryOperators = ['contains', 'startswith', 'endswith'],\n      format = function (fmtstr) {\n    var argArray = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      argArray[_i - 1] = arguments[_i];\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n    return fmtstr.replace(/\\{(\\d+)\\}/g, function (match, index) {\n      return args[index];\n    });\n  };\n\n  if (partOperator.indexOf(unaryOperator) != -1) {\n    filterItemPart[1] = partOperator.replace(unaryOperator, '').trim();\n\n    var builder = _parseFilterOperatorPart(filterItemPart, columns, exprColumnIndex, dateToString);\n\n    return format('{0}({1})', unaryOperator, builder);\n  }\n\n  if (!_utils_1.type.isDefined(value)) value = null;\n  if (binaryOperators.indexOf(partOperator) != -1) return format(\"{1}([{0}], '{2}')\", dataField, partOperator, value);\n  if (value === null || _utils_1.type.isNumeric(value) || _utils_1.type.isBoolean(value)) return format('[{0}] {1} {2}', dataField, partOperator, value);\n  if (column.dataType === 'date') return format('[{0}] {1} #{2}#', dataField, partOperator, dateToString(value));\n  return format(\"[{0}] {1} '{2}'\", dataField, partOperator, value);\n}","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/viewer-parts/viewer-items/data-grid-item/_grid-filter-parser.js"],"names":["Object","defineProperty","exports","value","parseFilter","_utils_1","require","filterItems","columns","columnIndex","dateToString","resultFilterString","type","isFunction","exprColumnIndex","undefined","_parseFilterOperatorPart","i","length","filterItem","isString","filterItemPart","partOperator","column","dataField","unaryOperator","binaryOperators","format","fmtstr","argArray","_i","arguments","args","Array","prototype","slice","call","replace","match","index","indexOf","trim","builder","isDefined","isNumeric","isBoolean","dataType"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_grid-filter-parser.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseFilter = void 0;\nvar _utils_1 = require(\"../../../data/_utils\");\nfunction parseFilter(filterItems, columns, columnIndex, dateToString) {\n    var resultFilterString = '';\n    if (_utils_1.type.isFunction(filterItems[0])) {\n        var exprColumnIndex = columnIndex === undefined ? filterItems.columnIndex : columnIndex;\n        return _parseFilterOperatorPart(filterItems, columns, exprColumnIndex, dateToString);\n    }\n    else {\n        for (var i = 0; i < filterItems.length; i++) {\n            var filterItem = filterItems[i];\n            resultFilterString += _utils_1.type.isString(filterItem) ? ' ' + filterItem + ' ' : parseFilter(filterItem, columns, filterItems.columnIndex, dateToString);\n        }\n    }\n    return '(' + resultFilterString + ')';\n}\nexports.parseFilter = parseFilter;\nfunction _parseFilterOperatorPart(filterItemPart, columns, exprColumnIndex, dateToString) {\n    var partOperator = filterItemPart[1], value = filterItemPart[2], column = columns[exprColumnIndex], dataField = column.dataField, unaryOperator = 'not', binaryOperators = [\n        'contains',\n        'startswith',\n        'endswith'\n    ], format = function (fmtstr) {\n        var argArray = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            argArray[_i - 1] = arguments[_i];\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        return fmtstr.replace(/\\{(\\d+)\\}/g, function (match, index) {\n            return args[index];\n        });\n    };\n    if (partOperator.indexOf(unaryOperator) != -1) {\n        filterItemPart[1] = partOperator.replace(unaryOperator, '').trim();\n        var builder = _parseFilterOperatorPart(filterItemPart, columns, exprColumnIndex, dateToString);\n        return format('{0}({1})', unaryOperator, builder);\n    }\n    if (!_utils_1.type.isDefined(value))\n        value = null;\n    if (binaryOperators.indexOf(partOperator) != -1)\n        return format(\"{1}([{0}], '{2}')\", dataField, partOperator, value);\n    if (value === null || _utils_1.type.isNumeric(value) || _utils_1.type.isBoolean(value))\n        return format('[{0}] {1} {2}', dataField, partOperator, value);\n    if (column.dataType === 'date')\n        return format('[{0}] {1} #{2}#', dataField, partOperator, dateToString(value));\n    return format(\"[{0}] {1} '{2}'\", dataField, partOperator, value);\n}\n"]},"metadata":{},"sourceType":"script"}