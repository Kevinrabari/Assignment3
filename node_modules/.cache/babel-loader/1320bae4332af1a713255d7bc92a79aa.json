{"ast":null,"code":"/**\n* DevExpress Analytics (core\\tools\\_copyPaste.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CopyPasteHandler = exports.copyPasteStrategy = void 0;\n\nvar ko = require(\"knockout\");\n\nvar $ = require(\"jquery\");\n\nvar point_1 = require(\"../elements/point\");\n\nvar serializer_1 = require(\"../../serializer/serializer\");\n\nvar _surfaceHelpers_1 = require(\"../internal/_surfaceHelpers\");\n\nexports.copyPasteStrategy = {\n  createChild: function (pasteTarget, info) {\n    return pasteTarget.createChild(info);\n  },\n  calculateDelta: function (selection, pasteTargetSurface, minPoint) {\n    return {\n      x: selection.rect().left - minPoint.x(),\n      y: selection.rect().top - minPoint.y()\n    };\n  },\n  canPaste: function (pasteTarget, info) {\n    return true;\n  }\n};\n\nvar CopyPasteHandler = function () {\n  function CopyPasteHandler(selectionProvider, _copyPasteStrategy) {\n    var _this = this;\n\n    if (_copyPasteStrategy === void 0) {\n      _copyPasteStrategy = exports.copyPasteStrategy;\n    }\n\n    this._copyPasteStrategy = _copyPasteStrategy;\n    this._copyInfo = ko.observable(null);\n    this.hasPasteInfo = ko.pureComputed(function () {\n      return _this._copyInfo() !== null;\n    });\n    this._selectionProvider = selectionProvider;\n  }\n\n  CopyPasteHandler.prototype.canCopy = function () {\n    return this._selectionProvider.focused() !== null && !this._selectionProvider.focused().getControlModel().getMetaData().isCopyDeny;\n  };\n\n  CopyPasteHandler.prototype.canPaste = function () {\n    var pasteTargetSurface = this._selectionProvider.focused();\n\n    return pasteTargetSurface !== null && this.hasPasteInfo() && pasteTargetSurface.canDrop() && (!this._copyPasteStrategy.canPaste || this._copyPasteStrategy.canPaste(pasteTargetSurface.getControlModel(), this._copyInfo())) && !pasteTargetSurface.getControlModel().getMetaData().isPasteDeny;\n  };\n\n  CopyPasteHandler.prototype.copy = function () {\n    if (this.canCopy()) {\n      var serializer = new serializer_1.ModelSerializer(),\n          copyInfo = {\n        focused: this._selectionProvider.focused(),\n        objects: $.map(this._selectionProvider.selectedItems, function (item) {\n          return serializer.serialize(item.getControlModel());\n        })\n      };\n\n      this._copyInfo(copyInfo);\n    }\n  };\n\n  CopyPasteHandler.prototype.cut = function () {\n    var _this = this;\n\n    var serializer = new serializer_1.ModelSerializer(),\n        focused = this._selectionProvider.focused(),\n        objects = [];\n\n    this._selectionProvider.selectedItems.forEach(function (item) {\n      var control = item.getControlModel();\n      control.parentModel().removeChild(control);\n      objects.push(serializer.serialize(control));\n      if (_this._copyPasteStrategy.createSelfRestoringItems) objects.push.apply(objects, _this._copyPasteStrategy.createSelfRestoringItems(control, serializer));\n    });\n\n    var cutInfo = {\n      focused: focused,\n      objects: objects\n    };\n\n    this._copyInfo(cutInfo);\n  };\n\n  CopyPasteHandler.prototype.paste = function () {\n    var _this = this;\n\n    if (this.canPaste()) {\n      var pasteTargetSurface = this._selectionProvider.focused(),\n          pasteTarget = pasteTargetSurface.getControlModel(),\n          newSelection = [];\n\n      if (pasteTargetSurface === this._copyInfo().focused) {\n        pasteTargetSurface = pasteTargetSurface.parent;\n        pasteTarget = pasteTargetSurface.getControlModel();\n      }\n\n      if (!pasteTarget.getMetaData().isContainer) {\n        pasteTargetSurface = pasteTargetSurface.parent;\n        pasteTarget = pasteTargetSurface.getControlModel();\n      }\n\n      var minPoint = new point_1.Point(Number.MAX_VALUE, Number.MAX_VALUE),\n          maxPoint = new point_1.Point(-1, -1);\n\n      for (var i = 0; i < this._copyInfo().objects.length; i++) {\n        var newControl = this._copyPasteStrategy.createChild(pasteTarget, this._copyInfo().objects[i]);\n\n        var newControlSurface = _surfaceHelpers_1.findSurface(newControl);\n\n        if (!newControlSurface) continue;\n        var posMin = new point_1.Point(newControlSurface.rect().left, newControlSurface.rect().top);\n        var posMax = new point_1.Point(newControlSurface.rect().left + newControlSurface.rect().width, newControlSurface.rect().top + newControlSurface.rect().height);\n        if (minPoint.x() >= posMin.x()) minPoint.x(posMin.x());\n        if (maxPoint.x() <= posMax.x()) maxPoint.x(posMax.x());\n        if (minPoint.y() >= posMin.y()) minPoint.y(posMin.y());\n        if (maxPoint.y() <= posMax.y()) maxPoint.y(posMax.y());\n        newSelection.push(newControlSurface);\n      }\n\n      var newOriginPoint = new point_1.Point((pasteTargetSurface.rect().width - pasteTargetSurface['_context'].margins.right()) / 2 - (maxPoint.x() - minPoint.x()) / 2 + (pasteTargetSurface['rtlLayout']() ? pasteTargetSurface['_context'].margins.right() : 0), pasteTargetSurface.rect().height / 2 - (maxPoint.y() - minPoint.y()) / 2);\n\n      for (var i = 0; i < newSelection.length; i++) {\n        var delta = this._copyPasteStrategy.calculateDelta(newSelection[i], pasteTargetSurface, minPoint);\n\n        newSelection[i].rect({\n          left: newOriginPoint.x() + delta.x,\n          top: newOriginPoint.y() + delta.y\n        });\n      }\n\n      this._selectionProvider.initialize();\n\n      newSelection.forEach(function (newControlSurface) {\n        _this._selectionProvider.selecting({\n          control: newControlSurface,\n          cancel: false\n        });\n      });\n    }\n  };\n\n  return CopyPasteHandler;\n}();\n\nexports.CopyPasteHandler = CopyPasteHandler;","map":{"version":3,"sources":["/Users/kevinrabari/Desktop/Georgian College Work/1005_ Mobile Web Application/Assignment3/node_modules/@devexpress/analytics-core/core/tools/_copyPaste.js"],"names":["Object","defineProperty","exports","value","CopyPasteHandler","copyPasteStrategy","ko","require","$","point_1","serializer_1","_surfaceHelpers_1","createChild","pasteTarget","info","calculateDelta","selection","pasteTargetSurface","minPoint","x","rect","left","y","top","canPaste","selectionProvider","_copyPasteStrategy","_this","_copyInfo","observable","hasPasteInfo","pureComputed","_selectionProvider","prototype","canCopy","focused","getControlModel","getMetaData","isCopyDeny","canDrop","isPasteDeny","copy","serializer","ModelSerializer","copyInfo","objects","map","selectedItems","item","serialize","cut","forEach","control","parentModel","removeChild","push","createSelfRestoringItems","apply","cutInfo","paste","newSelection","parent","isContainer","Point","Number","MAX_VALUE","maxPoint","i","length","newControl","newControlSurface","findSurface","posMin","posMax","width","height","newOriginPoint","margins","right","delta","initialize","selecting","cancel"],"mappings":"AAAA;;;;;;;AAOA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,iBAAR,GAA4B,KAAK,CAA5D;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAhB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,6BAAD,CAA1B;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAA/B;;AACAL,OAAO,CAACG,iBAAR,GAA4B;AACxBO,EAAAA,WAAW,EAAE,UAAUC,WAAV,EAAuBC,IAAvB,EAA6B;AACtC,WAAOD,WAAW,CAACD,WAAZ,CAAwBE,IAAxB,CAAP;AACH,GAHuB;AAIxBC,EAAAA,cAAc,EAAE,UAAUC,SAAV,EAAqBC,kBAArB,EAAyCC,QAAzC,EAAmD;AAC/D,WAAO;AACHC,MAAAA,CAAC,EAAEH,SAAS,CAACI,IAAV,GAAiBC,IAAjB,GAAwBH,QAAQ,CAACC,CAAT,EADxB;AAEHG,MAAAA,CAAC,EAAEN,SAAS,CAACI,IAAV,GAAiBG,GAAjB,GAAuBL,QAAQ,CAACI,CAAT;AAFvB,KAAP;AAIH,GATuB;AAUxBE,EAAAA,QAAQ,EAAE,UAAUX,WAAV,EAAuBC,IAAvB,EAA6B;AAAE,WAAO,IAAP;AAAc;AAV/B,CAA5B;;AAYA,IAAIV,gBAAgB,GAAI,YAAY;AAChC,WAASA,gBAAT,CAA0BqB,iBAA1B,EAA6CC,kBAA7C,EAAiE;AAC7D,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAID,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;AAAEA,MAAAA,kBAAkB,GAAGxB,OAAO,CAACG,iBAA7B;AAAiD;;AACtF,SAAKqB,kBAAL,GAA0BA,kBAA1B;AACA,SAAKE,SAAL,GAAiBtB,EAAE,CAACuB,UAAH,CAAc,IAAd,CAAjB;AACA,SAAKC,YAAL,GAAoBxB,EAAE,CAACyB,YAAH,CAAgB,YAAY;AAAE,aAAOJ,KAAK,CAACC,SAAN,OAAsB,IAA7B;AAAoC,KAAlE,CAApB;AACA,SAAKI,kBAAL,GAA0BP,iBAA1B;AACH;;AACDrB,EAAAA,gBAAgB,CAAC6B,SAAjB,CAA2BC,OAA3B,GAAqC,YAAY;AAC7C,WAAO,KAAKF,kBAAL,CAAwBG,OAAxB,OAAsC,IAAtC,IAA8C,CAAC,KAAKH,kBAAL,CAAwBG,OAAxB,GAAkCC,eAAlC,GAAoDC,WAApD,GAAkEC,UAAxH;AACH,GAFD;;AAGAlC,EAAAA,gBAAgB,CAAC6B,SAAjB,CAA2BT,QAA3B,GAAsC,YAAY;AAC9C,QAAIP,kBAAkB,GAAG,KAAKe,kBAAL,CAAwBG,OAAxB,EAAzB;;AACA,WAAOlB,kBAAkB,KAAK,IAAvB,IACA,KAAKa,YAAL,EADA,IAEAb,kBAAkB,CAACsB,OAAnB,EAFA,KAGC,CAAC,KAAKb,kBAAL,CAAwBF,QAAzB,IAAqC,KAAKE,kBAAL,CAAwBF,QAAxB,CAAiCP,kBAAkB,CAACmB,eAAnB,EAAjC,EAAuE,KAAKR,SAAL,EAAvE,CAHtC,KAIA,CAACX,kBAAkB,CAACmB,eAAnB,GAAqCC,WAArC,GAAmDG,WAJ3D;AAKH,GAPD;;AAQApC,EAAAA,gBAAgB,CAAC6B,SAAjB,CAA2BQ,IAA3B,GAAkC,YAAY;AAC1C,QAAI,KAAKP,OAAL,EAAJ,EAAoB;AAChB,UAAIQ,UAAU,GAAG,IAAIhC,YAAY,CAACiC,eAAjB,EAAjB;AAAA,UAAqDC,QAAQ,GAAG;AAC5DT,QAAAA,OAAO,EAAE,KAAKH,kBAAL,CAAwBG,OAAxB,EADmD;AAE5DU,QAAAA,OAAO,EAAErC,CAAC,CAACsC,GAAF,CAAM,KAAKd,kBAAL,CAAwBe,aAA9B,EAA6C,UAAUC,IAAV,EAAgB;AAClE,iBAAON,UAAU,CAACO,SAAX,CAAqBD,IAAI,CAACZ,eAAL,EAArB,CAAP;AACH,SAFQ;AAFmD,OAAhE;;AAMA,WAAKR,SAAL,CAAegB,QAAf;AACH;AACJ,GAVD;;AAWAxC,EAAAA,gBAAgB,CAAC6B,SAAjB,CAA2BiB,GAA3B,GAAiC,YAAY;AACzC,QAAIvB,KAAK,GAAG,IAAZ;;AACA,QAAIe,UAAU,GAAG,IAAIhC,YAAY,CAACiC,eAAjB,EAAjB;AAAA,QAAqDR,OAAO,GAAG,KAAKH,kBAAL,CAAwBG,OAAxB,EAA/D;AAAA,QAAkGU,OAAO,GAAG,EAA5G;;AACA,SAAKb,kBAAL,CAAwBe,aAAxB,CAAsCI,OAAtC,CAA8C,UAAUH,IAAV,EAAgB;AAC1D,UAAII,OAAO,GAAGJ,IAAI,CAACZ,eAAL,EAAd;AACAgB,MAAAA,OAAO,CAACC,WAAR,GAAsBC,WAAtB,CAAkCF,OAAlC;AACAP,MAAAA,OAAO,CAACU,IAAR,CAAab,UAAU,CAACO,SAAX,CAAqBG,OAArB,CAAb;AACA,UAAIzB,KAAK,CAACD,kBAAN,CAAyB8B,wBAA7B,EACIX,OAAO,CAACU,IAAR,CAAaE,KAAb,CAAmBZ,OAAnB,EAA4BlB,KAAK,CAACD,kBAAN,CAAyB8B,wBAAzB,CAAkDJ,OAAlD,EAA2DV,UAA3D,CAA5B;AACP,KAND;;AAOA,QAAIgB,OAAO,GAAG;AACVvB,MAAAA,OAAO,EAAEA,OADC;AAEVU,MAAAA,OAAO,EAAEA;AAFC,KAAd;;AAIA,SAAKjB,SAAL,CAAe8B,OAAf;AACH,GAfD;;AAgBAtD,EAAAA,gBAAgB,CAAC6B,SAAjB,CAA2B0B,KAA3B,GAAmC,YAAY;AAC3C,QAAIhC,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKH,QAAL,EAAJ,EAAqB;AACjB,UAAIP,kBAAkB,GAAG,KAAKe,kBAAL,CAAwBG,OAAxB,EAAzB;AAAA,UAA4DtB,WAAW,GAAGI,kBAAkB,CAACmB,eAAnB,EAA1E;AAAA,UAAgHwB,YAAY,GAAG,EAA/H;;AACA,UAAI3C,kBAAkB,KAAK,KAAKW,SAAL,GAAiBO,OAA5C,EAAqD;AACjDlB,QAAAA,kBAAkB,GAAGA,kBAAkB,CAAC4C,MAAxC;AACAhD,QAAAA,WAAW,GAAGI,kBAAkB,CAACmB,eAAnB,EAAd;AACH;;AACD,UAAI,CAACvB,WAAW,CAACwB,WAAZ,GAA0ByB,WAA/B,EAA4C;AACxC7C,QAAAA,kBAAkB,GAAGA,kBAAkB,CAAC4C,MAAxC;AACAhD,QAAAA,WAAW,GAAGI,kBAAkB,CAACmB,eAAnB,EAAd;AACH;;AACD,UAAIlB,QAAQ,GAAG,IAAIT,OAAO,CAACsD,KAAZ,CAAkBC,MAAM,CAACC,SAAzB,EAAoCD,MAAM,CAACC,SAA3C,CAAf;AAAA,UAAsEC,QAAQ,GAAG,IAAIzD,OAAO,CAACsD,KAAZ,CAAkB,CAAC,CAAnB,EAAsB,CAAC,CAAvB,CAAjF;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvC,SAAL,GAAiBiB,OAAjB,CAAyBuB,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACtD,YAAIE,UAAU,GAAG,KAAK3C,kBAAL,CAAwBd,WAAxB,CAAoCC,WAApC,EAAiD,KAAKe,SAAL,GAAiBiB,OAAjB,CAAyBsB,CAAzB,CAAjD,CAAjB;;AACA,YAAIG,iBAAiB,GAAG3D,iBAAiB,CAAC4D,WAAlB,CAA8BF,UAA9B,CAAxB;;AACA,YAAI,CAACC,iBAAL,EACI;AACJ,YAAIE,MAAM,GAAG,IAAI/D,OAAO,CAACsD,KAAZ,CAAkBO,iBAAiB,CAAClD,IAAlB,GAAyBC,IAA3C,EAAiDiD,iBAAiB,CAAClD,IAAlB,GAAyBG,GAA1E,CAAb;AACA,YAAIkD,MAAM,GAAG,IAAIhE,OAAO,CAACsD,KAAZ,CAAkBO,iBAAiB,CAAClD,IAAlB,GAAyBC,IAAzB,GAAgCiD,iBAAiB,CAAClD,IAAlB,GAAyBsD,KAA3E,EAAkFJ,iBAAiB,CAAClD,IAAlB,GAAyBG,GAAzB,GAA+B+C,iBAAiB,CAAClD,IAAlB,GAAyBuD,MAA1I,CAAb;AACA,YAAIzD,QAAQ,CAACC,CAAT,MAAgBqD,MAAM,CAACrD,CAAP,EAApB,EACID,QAAQ,CAACC,CAAT,CAAWqD,MAAM,CAACrD,CAAP,EAAX;AACJ,YAAI+C,QAAQ,CAAC/C,CAAT,MAAgBsD,MAAM,CAACtD,CAAP,EAApB,EACI+C,QAAQ,CAAC/C,CAAT,CAAWsD,MAAM,CAACtD,CAAP,EAAX;AACJ,YAAID,QAAQ,CAACI,CAAT,MAAgBkD,MAAM,CAAClD,CAAP,EAApB,EACIJ,QAAQ,CAACI,CAAT,CAAWkD,MAAM,CAAClD,CAAP,EAAX;AACJ,YAAI4C,QAAQ,CAAC5C,CAAT,MAAgBmD,MAAM,CAACnD,CAAP,EAApB,EACI4C,QAAQ,CAAC5C,CAAT,CAAWmD,MAAM,CAACnD,CAAP,EAAX;AACJsC,QAAAA,YAAY,CAACL,IAAb,CAAkBe,iBAAlB;AACH;;AACD,UAAIM,cAAc,GAAG,IAAInE,OAAO,CAACsD,KAAZ,CAAmB,CAAC9C,kBAAkB,CAACG,IAAnB,GAA0BsD,KAA1B,GAAkCzD,kBAAkB,CAAC,UAAD,CAAlB,CAA+B4D,OAA/B,CAAuCC,KAAvC,EAAnC,IAAqF,CAAtF,GAA4F,CAACZ,QAAQ,CAAC/C,CAAT,KAAeD,QAAQ,CAACC,CAAT,EAAhB,IAAgC,CAA5H,IAAkIF,kBAAkB,CAAC,WAAD,CAAlB,KAAoCA,kBAAkB,CAAC,UAAD,CAAlB,CAA+B4D,OAA/B,CAAuCC,KAAvC,EAApC,GAAqF,CAAvN,CAAlB,EAA8O7D,kBAAkB,CAACG,IAAnB,GAA0BuD,MAA1B,GAAmC,CAApC,GAA0C,CAACT,QAAQ,CAAC5C,CAAT,KAAeJ,QAAQ,CAACI,CAAT,EAAhB,IAAgC,CAAvT,CAArB;;AACA,WAAK,IAAI6C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,YAAY,CAACQ,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,YAAIY,KAAK,GAAG,KAAKrD,kBAAL,CAAwBX,cAAxB,CAAuC6C,YAAY,CAACO,CAAD,CAAnD,EAAwDlD,kBAAxD,EAA4EC,QAA5E,CAAZ;;AACA0C,QAAAA,YAAY,CAACO,CAAD,CAAZ,CAAgB/C,IAAhB,CAAqB;AAAEC,UAAAA,IAAI,EAAEuD,cAAc,CAACzD,CAAf,KAAqB4D,KAAK,CAAC5D,CAAnC;AAAsCI,UAAAA,GAAG,EAAEqD,cAAc,CAACtD,CAAf,KAAqByD,KAAK,CAACzD;AAAtE,SAArB;AACH;;AACD,WAAKU,kBAAL,CAAwBgD,UAAxB;;AACApB,MAAAA,YAAY,CAACT,OAAb,CAAqB,UAAUmB,iBAAV,EAA6B;AAC9C3C,QAAAA,KAAK,CAACK,kBAAN,CAAyBiD,SAAzB,CAAmC;AAAE7B,UAAAA,OAAO,EAAEkB,iBAAX;AAA8BY,UAAAA,MAAM,EAAE;AAAtC,SAAnC;AACH,OAFD;AAGH;AACJ,GAxCD;;AAyCA,SAAO9E,gBAAP;AACH,CAzFuB,EAAxB;;AA0FAF,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["/**\n* DevExpress Analytics (core\\tools\\_copyPaste.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CopyPasteHandler = exports.copyPasteStrategy = void 0;\nvar ko = require(\"knockout\");\nvar $ = require(\"jquery\");\nvar point_1 = require(\"../elements/point\");\nvar serializer_1 = require(\"../../serializer/serializer\");\nvar _surfaceHelpers_1 = require(\"../internal/_surfaceHelpers\");\nexports.copyPasteStrategy = {\n    createChild: function (pasteTarget, info) {\n        return pasteTarget.createChild(info);\n    },\n    calculateDelta: function (selection, pasteTargetSurface, minPoint) {\n        return {\n            x: selection.rect().left - minPoint.x(),\n            y: selection.rect().top - minPoint.y()\n        };\n    },\n    canPaste: function (pasteTarget, info) { return true; }\n};\nvar CopyPasteHandler = (function () {\n    function CopyPasteHandler(selectionProvider, _copyPasteStrategy) {\n        var _this = this;\n        if (_copyPasteStrategy === void 0) { _copyPasteStrategy = exports.copyPasteStrategy; }\n        this._copyPasteStrategy = _copyPasteStrategy;\n        this._copyInfo = ko.observable(null);\n        this.hasPasteInfo = ko.pureComputed(function () { return _this._copyInfo() !== null; });\n        this._selectionProvider = selectionProvider;\n    }\n    CopyPasteHandler.prototype.canCopy = function () {\n        return this._selectionProvider.focused() !== null && !this._selectionProvider.focused().getControlModel().getMetaData().isCopyDeny;\n    };\n    CopyPasteHandler.prototype.canPaste = function () {\n        var pasteTargetSurface = this._selectionProvider.focused();\n        return pasteTargetSurface !== null\n            && this.hasPasteInfo()\n            && pasteTargetSurface.canDrop()\n            && (!this._copyPasteStrategy.canPaste || this._copyPasteStrategy.canPaste(pasteTargetSurface.getControlModel(), this._copyInfo()))\n            && !pasteTargetSurface.getControlModel().getMetaData().isPasteDeny;\n    };\n    CopyPasteHandler.prototype.copy = function () {\n        if (this.canCopy()) {\n            var serializer = new serializer_1.ModelSerializer(), copyInfo = {\n                focused: this._selectionProvider.focused(),\n                objects: $.map(this._selectionProvider.selectedItems, function (item) {\n                    return serializer.serialize(item.getControlModel());\n                })\n            };\n            this._copyInfo(copyInfo);\n        }\n    };\n    CopyPasteHandler.prototype.cut = function () {\n        var _this = this;\n        var serializer = new serializer_1.ModelSerializer(), focused = this._selectionProvider.focused(), objects = [];\n        this._selectionProvider.selectedItems.forEach(function (item) {\n            var control = item.getControlModel();\n            control.parentModel().removeChild(control);\n            objects.push(serializer.serialize(control));\n            if (_this._copyPasteStrategy.createSelfRestoringItems)\n                objects.push.apply(objects, _this._copyPasteStrategy.createSelfRestoringItems(control, serializer));\n        });\n        var cutInfo = {\n            focused: focused,\n            objects: objects\n        };\n        this._copyInfo(cutInfo);\n    };\n    CopyPasteHandler.prototype.paste = function () {\n        var _this = this;\n        if (this.canPaste()) {\n            var pasteTargetSurface = this._selectionProvider.focused(), pasteTarget = pasteTargetSurface.getControlModel(), newSelection = [];\n            if (pasteTargetSurface === this._copyInfo().focused) {\n                pasteTargetSurface = pasteTargetSurface.parent;\n                pasteTarget = pasteTargetSurface.getControlModel();\n            }\n            if (!pasteTarget.getMetaData().isContainer) {\n                pasteTargetSurface = pasteTargetSurface.parent;\n                pasteTarget = pasteTargetSurface.getControlModel();\n            }\n            var minPoint = new point_1.Point(Number.MAX_VALUE, Number.MAX_VALUE), maxPoint = new point_1.Point(-1, -1);\n            for (var i = 0; i < this._copyInfo().objects.length; i++) {\n                var newControl = this._copyPasteStrategy.createChild(pasteTarget, this._copyInfo().objects[i]);\n                var newControlSurface = _surfaceHelpers_1.findSurface(newControl);\n                if (!newControlSurface)\n                    continue;\n                var posMin = new point_1.Point(newControlSurface.rect().left, newControlSurface.rect().top);\n                var posMax = new point_1.Point(newControlSurface.rect().left + newControlSurface.rect().width, newControlSurface.rect().top + newControlSurface.rect().height);\n                if (minPoint.x() >= posMin.x())\n                    minPoint.x(posMin.x());\n                if (maxPoint.x() <= posMax.x())\n                    maxPoint.x(posMax.x());\n                if (minPoint.y() >= posMin.y())\n                    minPoint.y(posMin.y());\n                if (maxPoint.y() <= posMax.y())\n                    maxPoint.y(posMax.y());\n                newSelection.push(newControlSurface);\n            }\n            var newOriginPoint = new point_1.Point(((pasteTargetSurface.rect().width - pasteTargetSurface['_context'].margins.right()) / 2) - ((maxPoint.x() - minPoint.x()) / 2) + (pasteTargetSurface['rtlLayout']() ? pasteTargetSurface['_context'].margins.right() : 0), (pasteTargetSurface.rect().height / 2) - ((maxPoint.y() - minPoint.y()) / 2));\n            for (var i = 0; i < newSelection.length; i++) {\n                var delta = this._copyPasteStrategy.calculateDelta(newSelection[i], pasteTargetSurface, minPoint);\n                newSelection[i].rect({ left: newOriginPoint.x() + delta.x, top: newOriginPoint.y() + delta.y });\n            }\n            this._selectionProvider.initialize();\n            newSelection.forEach(function (newControlSurface) {\n                _this._selectionProvider.selecting({ control: newControlSurface, cancel: false });\n            });\n        }\n    };\n    return CopyPasteHandler;\n}());\nexports.CopyPasteHandler = CopyPasteHandler;\n"]},"metadata":{},"sourceType":"script"}