{"ast":null,"code":"/**\r\n * DevExtreme (esm/integration/knockout/component_registrator.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport ko from \"knockout\";\nimport Callbacks from \"../../core/utils/callbacks\";\nimport { isPlainObject } from \"../../core/utils/type\";\nimport registerComponentCallbacks from \"../../core/component_registrator_callbacks\";\nimport Widget from \"../../ui/widget/ui.widget\";\nimport VizWidget from \"../../viz/core/base_widget\";\nimport ComponentWrapper from \"../../renovation/component_wrapper/common/component\";\nimport Draggable from \"../../ui/draggable\";\nimport { KoTemplate } from \"./template\";\nimport Editor from \"../../ui/editor/editor\";\nimport Locker from \"../../core/utils/locker\";\nimport { getClosestNodeWithContext } from \"./utils\";\nimport config from \"../../core/config\";\n\nif (ko) {\n  var LOCKS_DATA_KEY = \"dxKoLocks\";\n  var CREATED_WITH_KO_DATA_KEY = \"dxKoCreation\";\n  var editorsBindingHandlers = [];\n\n  var registerComponentKoBinding = function (componentName, componentClass) {\n    if (Editor.isEditor(componentClass.prototype)) {\n      editorsBindingHandlers.push(componentName);\n    }\n\n    ko.bindingHandlers[componentName] = {\n      init: function (domNode, valueAccessor) {\n        var $element = $(domNode);\n        var optionChangedCallbacks = Callbacks();\n        var optionsByReference = {};\n        var component;\n        var knockoutConfig = config().knockout;\n        var isBindingPropertyPredicateName = knockoutConfig && knockoutConfig.isBindingPropertyPredicateName;\n        var isBindingPropertyPredicate;\n        var ctorOptions = {\n          onInitializing: function (options) {\n            optionsByReference = this._getOptionsByReference();\n            ko.computed(() => {\n              var model = ko.unwrap(valueAccessor());\n\n              if (component) {\n                component.beginUpdate();\n              }\n\n              isBindingPropertyPredicate = isBindingPropertyPredicateName && model && model[isBindingPropertyPredicateName];\n              unwrapModel(model);\n\n              if (component) {\n                component.endUpdate();\n              } else {\n                var _model$onInitializing;\n\n                null === model || void 0 === model ? void 0 : null === (_model$onInitializing = model.onInitializing) || void 0 === _model$onInitializing ? void 0 : _model$onInitializing.call(this, options);\n              }\n            }, null, {\n              disposeWhenNodeIsRemoved: domNode\n            });\n            component = this;\n          },\n          modelByElement: function ($element) {\n            if ($element.length) {\n              var node = getClosestNodeWithContext($element.get(0));\n              return ko.dataFor(node);\n            }\n          },\n          nestedComponentOptions: function (component) {\n            return {\n              modelByElement: component.option(\"modelByElement\"),\n              nestedComponentOptions: component.option(\"nestedComponentOptions\")\n            };\n          },\n          _optionChangedCallbacks: optionChangedCallbacks,\n          integrationOptions: {\n            watchMethod: function (fn, callback, options) {\n              options = options || {};\n              var skipCallback = options.skipImmediate;\n              var watcher = ko.computed(function () {\n                var newValue = ko.unwrap(fn());\n\n                if (!skipCallback) {\n                  callback(newValue);\n                }\n\n                skipCallback = false;\n              });\n              return function () {\n                watcher.dispose();\n              };\n            },\n            templates: {\n              \"dx-polymorph-widget\": {\n                render: function (options) {\n                  var widgetName = ko.utils.unwrapObservable(options.model.widget);\n\n                  if (!widgetName) {\n                    return;\n                  }\n\n                  var markup = $(\"<div>\").attr(\"data-bind\", widgetName + \": options\").get(0);\n                  $(options.container).append(markup);\n                  ko.applyBindings(options.model, markup);\n                }\n              }\n            },\n            createTemplate: function (element) {\n              return new KoTemplate(element);\n            }\n          }\n        };\n        var optionNameToModelMap = {};\n\n        var applyModelValueToOption = function (optionName, modelValue, unwrap) {\n          var locks = $element.data(LOCKS_DATA_KEY);\n          var optionValue = unwrap ? ko.unwrap(modelValue) : modelValue;\n\n          if (ko.isWriteableObservable(modelValue)) {\n            optionNameToModelMap[optionName] = modelValue;\n          }\n\n          if (component) {\n            if (locks.locked(optionName)) {\n              return;\n            }\n\n            locks.obtain(optionName);\n\n            try {\n              if (ko.ignoreDependencies) {\n                ko.ignoreDependencies(component.option, component, [optionName, optionValue]);\n              } else {\n                component.option(optionName, optionValue);\n              }\n            } finally {\n              locks.release(optionName);\n            }\n          } else {\n            ctorOptions[optionName] = optionValue;\n          }\n        };\n\n        var handleOptionChanged = function (args) {\n          var optionName = args.fullName;\n          var optionValue = args.value;\n\n          if (!(optionName in optionNameToModelMap)) {\n            return;\n          }\n\n          var $element = this._$element;\n          var locks = $element.data(LOCKS_DATA_KEY);\n\n          if (locks.locked(optionName)) {\n            return;\n          }\n\n          locks.obtain(optionName);\n\n          try {\n            optionNameToModelMap[optionName](optionValue);\n          } finally {\n            locks.release(optionName);\n          }\n        };\n\n        var unwrapModelValue = function (currentModel, propertyName, propertyPath) {\n          if (propertyPath === isBindingPropertyPredicateName) {\n            return;\n          }\n\n          if (!isBindingPropertyPredicate || isBindingPropertyPredicate(propertyPath, propertyName, currentModel)) {\n            var unwrappedPropertyValue;\n            ko.computed(function () {\n              var propertyValue = currentModel[propertyName];\n              applyModelValueToOption(propertyPath, propertyValue, true);\n              unwrappedPropertyValue = ko.unwrap(propertyValue);\n            }, null, {\n              disposeWhenNodeIsRemoved: domNode\n            });\n\n            if (isPlainObject(unwrappedPropertyValue)) {\n              if (!optionsByReference[propertyPath]) {\n                unwrapModel(unwrappedPropertyValue, propertyPath);\n              }\n            }\n          } else {\n            applyModelValueToOption(propertyPath, currentModel[propertyName], false);\n          }\n        };\n\n        function unwrapModel(model, propertyPath) {\n          for (var propertyName in model) {\n            if (Object.prototype.hasOwnProperty.call(model, propertyName)) {\n              unwrapModelValue(model, propertyName, propertyPath ? [propertyPath, propertyName].join(\".\") : propertyName);\n            }\n          }\n        }\n\n        !function () {\n          optionChangedCallbacks.add(handleOptionChanged);\n          $element.data(CREATED_WITH_KO_DATA_KEY, true).data(LOCKS_DATA_KEY, new Locker());\n          new componentClass($element, ctorOptions);\n          ctorOptions = null;\n        }();\n        return {\n          controlsDescendantBindings: componentClass.subclassOf(Widget) || componentClass.subclassOf(VizWidget) || componentClass.subclassOf(ComponentWrapper) || component instanceof Draggable\n        };\n      }\n    };\n\n    if (\"dxValidator\" === componentName) {\n      ko.bindingHandlers.dxValidator.after = editorsBindingHandlers;\n    }\n  };\n\n  registerComponentCallbacks.add(function (name, componentClass) {\n    registerComponentKoBinding(name, componentClass);\n  });\n}","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/integration/knockout/component_registrator.js"],"names":["$","ko","Callbacks","isPlainObject","registerComponentCallbacks","Widget","VizWidget","ComponentWrapper","Draggable","KoTemplate","Editor","Locker","getClosestNodeWithContext","config","LOCKS_DATA_KEY","CREATED_WITH_KO_DATA_KEY","editorsBindingHandlers","registerComponentKoBinding","componentName","componentClass","isEditor","prototype","push","bindingHandlers","init","domNode","valueAccessor","$element","optionChangedCallbacks","optionsByReference","component","knockoutConfig","knockout","isBindingPropertyPredicateName","isBindingPropertyPredicate","ctorOptions","onInitializing","options","_getOptionsByReference","computed","model","unwrap","beginUpdate","unwrapModel","endUpdate","_model$onInitializing","call","disposeWhenNodeIsRemoved","modelByElement","length","node","get","dataFor","nestedComponentOptions","option","_optionChangedCallbacks","integrationOptions","watchMethod","fn","callback","skipCallback","skipImmediate","watcher","newValue","dispose","templates","render","widgetName","utils","unwrapObservable","widget","markup","attr","container","append","applyBindings","createTemplate","element","optionNameToModelMap","applyModelValueToOption","optionName","modelValue","locks","data","optionValue","isWriteableObservable","locked","obtain","ignoreDependencies","release","handleOptionChanged","args","fullName","value","_$element","unwrapModelValue","currentModel","propertyName","propertyPath","unwrappedPropertyValue","propertyValue","Object","hasOwnProperty","join","add","controlsDescendantBindings","subclassOf","dxValidator","after","name"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/integration/knockout/component_registrator.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport ko from \"knockout\";\r\nimport Callbacks from \"../../core/utils/callbacks\";\r\nimport {\r\n    isPlainObject\r\n} from \"../../core/utils/type\";\r\nimport registerComponentCallbacks from \"../../core/component_registrator_callbacks\";\r\nimport Widget from \"../../ui/widget/ui.widget\";\r\nimport VizWidget from \"../../viz/core/base_widget\";\r\nimport ComponentWrapper from \"../../renovation/component_wrapper/common/component\";\r\nimport Draggable from \"../../ui/draggable\";\r\nimport {\r\n    KoTemplate\r\n} from \"./template\";\r\nimport Editor from \"../../ui/editor/editor\";\r\nimport Locker from \"../../core/utils/locker\";\r\nimport {\r\n    getClosestNodeWithContext\r\n} from \"./utils\";\r\nimport config from \"../../core/config\";\r\nif (ko) {\r\n    var LOCKS_DATA_KEY = \"dxKoLocks\";\r\n    var CREATED_WITH_KO_DATA_KEY = \"dxKoCreation\";\r\n    var editorsBindingHandlers = [];\r\n    var registerComponentKoBinding = function(componentName, componentClass) {\r\n        if (Editor.isEditor(componentClass.prototype)) {\r\n            editorsBindingHandlers.push(componentName)\r\n        }\r\n        ko.bindingHandlers[componentName] = {\r\n            init: function(domNode, valueAccessor) {\r\n                var $element = $(domNode);\r\n                var optionChangedCallbacks = Callbacks();\r\n                var optionsByReference = {};\r\n                var component;\r\n                var knockoutConfig = config().knockout;\r\n                var isBindingPropertyPredicateName = knockoutConfig && knockoutConfig.isBindingPropertyPredicateName;\r\n                var isBindingPropertyPredicate;\r\n                var ctorOptions = {\r\n                    onInitializing: function(options) {\r\n                        optionsByReference = this._getOptionsByReference();\r\n                        ko.computed(() => {\r\n                            var model = ko.unwrap(valueAccessor());\r\n                            if (component) {\r\n                                component.beginUpdate()\r\n                            }\r\n                            isBindingPropertyPredicate = isBindingPropertyPredicateName && model && model[isBindingPropertyPredicateName];\r\n                            unwrapModel(model);\r\n                            if (component) {\r\n                                component.endUpdate()\r\n                            } else {\r\n                                var _model$onInitializing;\r\n                                null === model || void 0 === model ? void 0 : null === (_model$onInitializing = model.onInitializing) || void 0 === _model$onInitializing ? void 0 : _model$onInitializing.call(this, options)\r\n                            }\r\n                        }, null, {\r\n                            disposeWhenNodeIsRemoved: domNode\r\n                        });\r\n                        component = this\r\n                    },\r\n                    modelByElement: function($element) {\r\n                        if ($element.length) {\r\n                            var node = getClosestNodeWithContext($element.get(0));\r\n                            return ko.dataFor(node)\r\n                        }\r\n                    },\r\n                    nestedComponentOptions: function(component) {\r\n                        return {\r\n                            modelByElement: component.option(\"modelByElement\"),\r\n                            nestedComponentOptions: component.option(\"nestedComponentOptions\")\r\n                        }\r\n                    },\r\n                    _optionChangedCallbacks: optionChangedCallbacks,\r\n                    integrationOptions: {\r\n                        watchMethod: function(fn, callback, options) {\r\n                            options = options || {};\r\n                            var skipCallback = options.skipImmediate;\r\n                            var watcher = ko.computed((function() {\r\n                                var newValue = ko.unwrap(fn());\r\n                                if (!skipCallback) {\r\n                                    callback(newValue)\r\n                                }\r\n                                skipCallback = false\r\n                            }));\r\n                            return function() {\r\n                                watcher.dispose()\r\n                            }\r\n                        },\r\n                        templates: {\r\n                            \"dx-polymorph-widget\": {\r\n                                render: function(options) {\r\n                                    var widgetName = ko.utils.unwrapObservable(options.model.widget);\r\n                                    if (!widgetName) {\r\n                                        return\r\n                                    }\r\n                                    var markup = $(\"<div>\").attr(\"data-bind\", widgetName + \": options\").get(0);\r\n                                    $(options.container).append(markup);\r\n                                    ko.applyBindings(options.model, markup)\r\n                                }\r\n                            }\r\n                        },\r\n                        createTemplate: function(element) {\r\n                            return new KoTemplate(element)\r\n                        }\r\n                    }\r\n                };\r\n                var optionNameToModelMap = {};\r\n                var applyModelValueToOption = function(optionName, modelValue, unwrap) {\r\n                    var locks = $element.data(LOCKS_DATA_KEY);\r\n                    var optionValue = unwrap ? ko.unwrap(modelValue) : modelValue;\r\n                    if (ko.isWriteableObservable(modelValue)) {\r\n                        optionNameToModelMap[optionName] = modelValue\r\n                    }\r\n                    if (component) {\r\n                        if (locks.locked(optionName)) {\r\n                            return\r\n                        }\r\n                        locks.obtain(optionName);\r\n                        try {\r\n                            if (ko.ignoreDependencies) {\r\n                                ko.ignoreDependencies(component.option, component, [optionName, optionValue])\r\n                            } else {\r\n                                component.option(optionName, optionValue)\r\n                            }\r\n                        } finally {\r\n                            locks.release(optionName)\r\n                        }\r\n                    } else {\r\n                        ctorOptions[optionName] = optionValue\r\n                    }\r\n                };\r\n                var handleOptionChanged = function(args) {\r\n                    var optionName = args.fullName;\r\n                    var optionValue = args.value;\r\n                    if (!(optionName in optionNameToModelMap)) {\r\n                        return\r\n                    }\r\n                    var $element = this._$element;\r\n                    var locks = $element.data(LOCKS_DATA_KEY);\r\n                    if (locks.locked(optionName)) {\r\n                        return\r\n                    }\r\n                    locks.obtain(optionName);\r\n                    try {\r\n                        optionNameToModelMap[optionName](optionValue)\r\n                    } finally {\r\n                        locks.release(optionName)\r\n                    }\r\n                };\r\n                var unwrapModelValue = function(currentModel, propertyName, propertyPath) {\r\n                    if (propertyPath === isBindingPropertyPredicateName) {\r\n                        return\r\n                    }\r\n                    if (!isBindingPropertyPredicate || isBindingPropertyPredicate(propertyPath, propertyName, currentModel)) {\r\n                        var unwrappedPropertyValue;\r\n                        ko.computed((function() {\r\n                            var propertyValue = currentModel[propertyName];\r\n                            applyModelValueToOption(propertyPath, propertyValue, true);\r\n                            unwrappedPropertyValue = ko.unwrap(propertyValue)\r\n                        }), null, {\r\n                            disposeWhenNodeIsRemoved: domNode\r\n                        });\r\n                        if (isPlainObject(unwrappedPropertyValue)) {\r\n                            if (!optionsByReference[propertyPath]) {\r\n                                unwrapModel(unwrappedPropertyValue, propertyPath)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        applyModelValueToOption(propertyPath, currentModel[propertyName], false)\r\n                    }\r\n                };\r\n\r\n                function unwrapModel(model, propertyPath) {\r\n                    for (var propertyName in model) {\r\n                        if (Object.prototype.hasOwnProperty.call(model, propertyName)) {\r\n                            unwrapModelValue(model, propertyName, propertyPath ? [propertyPath, propertyName].join(\".\") : propertyName)\r\n                        }\r\n                    }\r\n                }! function() {\r\n                    optionChangedCallbacks.add(handleOptionChanged);\r\n                    $element.data(CREATED_WITH_KO_DATA_KEY, true).data(LOCKS_DATA_KEY, new Locker);\r\n                    new componentClass($element, ctorOptions);\r\n                    ctorOptions = null\r\n                }();\r\n                return {\r\n                    controlsDescendantBindings: componentClass.subclassOf(Widget) || componentClass.subclassOf(VizWidget) || componentClass.subclassOf(ComponentWrapper) || component instanceof Draggable\r\n                }\r\n            }\r\n        };\r\n        if (\"dxValidator\" === componentName) {\r\n            ko.bindingHandlers.dxValidator.after = editorsBindingHandlers\r\n        }\r\n    };\r\n    registerComponentCallbacks.add((function(name, componentClass) {\r\n        registerComponentKoBinding(name, componentClass)\r\n    }))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}