{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_expression-editor-functions.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExpressionEditorFunctions = exports.ExpressionEditorFunctions = void 0;\n\nvar analytics_widgets_internal_1 = require(\"@devexpress/analytics-core/analytics-widgets-internal\");\n\nvar windowFunctions = {\n  display: 'Window Functions',\n  localizationId: 'DashboardStringId.FunctionCategoryWindow',\n  items: {\n    First: [{\n      paramCount: 1,\n      text: 'First()',\n      displayName: 'First()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionFirst'\n    }],\n    Last: [{\n      paramCount: 1,\n      text: 'Last()',\n      displayName: 'Last()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionLast'\n    }],\n    Index: [{\n      paramCount: 1,\n      text: 'Index()',\n      displayName: 'Index()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionIndex'\n    }],\n    Size: [{\n      paramCount: 1,\n      text: 'Size()',\n      displayName: 'Size()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionSize'\n    }],\n    Lookup: [{\n      paramCount: 2,\n      text: 'Lookup(, )',\n      displayName: 'Lookup(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionLookup'\n    }],\n    RankCompetition: [{\n      paramCount: 2,\n      text: 'RankCompetition(, )',\n      displayName: 'RankCompetition(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRankCompetition'\n    }],\n    RankDense: [{\n      paramCount: 2,\n      text: 'RankDense(, )',\n      displayName: 'RankDense(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRankDense'\n    }],\n    RankUnique: [{\n      paramCount: 2,\n      text: 'RankUnique(, )',\n      displayName: 'RankUnique(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRankUnique'\n    }],\n    RankModified: [{\n      paramCount: 2,\n      text: 'RankModified(, )',\n      displayName: 'RankModified(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRankModified'\n    }],\n    RankPercentile: [{\n      paramCount: 2,\n      text: 'RankPercentile(, )',\n      displayName: 'RankPercentile(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRankPercentile'\n    }],\n    RunningAggregate: [{\n      paramCount: 2,\n      text: 'RunningAggregate(, )',\n      displayName: 'RunningAggregate(, )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCustomAggregate'\n    }],\n    RunningAvg: [{\n      paramCount: 1,\n      text: 'RunningAvg()',\n      displayName: 'RunningAvg()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningAvg'\n    }],\n    RunningCount: [{\n      paramCount: 1,\n      text: 'RunningCount()',\n      displayName: 'RunningCount()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCount'\n    }],\n    RunningMax: [{\n      paramCount: 1,\n      text: 'RunningMax()',\n      displayName: 'RunningMax()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMax'\n    }],\n    RunningMin: [{\n      paramCount: 1,\n      text: 'RunningMin()',\n      displayName: 'RunningMin()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMin'\n    }],\n    RunningSum: [{\n      paramCount: 1,\n      text: 'RunningSum()',\n      displayName: 'RunningSum()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningSum'\n    }],\n    WindowAggregate: [{\n      paramCount: 4,\n      text: 'WindowAggregate(, , , )',\n      displayName: 'WindowAggregate(, , , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCustomAggregate'\n    }],\n    WindowAvg: [{\n      paramCount: 3,\n      text: 'WindowAvg(, , )',\n      displayName: 'WindowAvg(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowAvg'\n    }],\n    WindowCount: [{\n      paramCount: 3,\n      text: 'WindowCount(, , )',\n      displayName: 'WindowCount(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCount'\n    }],\n    WindowCountDistinct: [{\n      paramCount: 3,\n      text: 'WindowCountDistinct(, , )',\n      displayName: 'WindowCountDistinct(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCountDistinct'\n    }],\n    WindowMax: [{\n      paramCount: 3,\n      text: 'WindowMax(, , )',\n      displayName: 'WindowMax(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMax'\n    }],\n    WindowMin: [{\n      paramCount: 3,\n      text: 'WindowMin(, , )',\n      displayName: 'WindowMin(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMin'\n    }],\n    WindowSum: [{\n      paramCount: 3,\n      text: 'WindowSum(, , )',\n      displayName: 'WindowSum(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowSum'\n    }],\n    WindowMedian: [{\n      paramCount: 3,\n      text: 'WindowMedian(, , )',\n      displayName: 'WindowMedian(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMedian'\n    }],\n    WindowMode: [{\n      paramCount: 3,\n      text: 'WindowMode(, , )',\n      displayName: 'WindowMode(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMode'\n    }],\n    WindowVar: [{\n      paramCount: 3,\n      text: 'WindowVar(, , )',\n      displayName: 'WindowVar(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVar'\n    }],\n    WindowVarp: [{\n      paramCount: 3,\n      text: 'WindowVarp(, , )',\n      displayName: 'WindowVarp(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVarp'\n    }],\n    WindowStdDev: [{\n      paramCount: 3,\n      text: 'WindowStdDev(, , )',\n      displayName: 'WindowStdDev(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDev'\n    }],\n    WindowStdDevp: [{\n      paramCount: 3,\n      text: 'WindowStdDevp(, , )',\n      displayName: 'WindowStdDevp(, , )',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDevp'\n    }],\n    Total: [{\n      paramCount: 0,\n      text: 'Total()',\n      displayName: 'Total()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionTotal'\n    }]\n  }\n};\nvar dashboardAggrFunctions = {\n  display: 'Aggregate',\n  localizationId: 'DashboardStringId.FunctionCategoryAggregate',\n  category: 'DashboardAggregate',\n  items: {\n    Avg: [{\n      paramCount: 1,\n      text: 'Avg()',\n      displayName: 'Avg()',\n      descriptionStringId: 'XtraEditorsExpressionEditor.AvgAggregate.Description'\n    }],\n    Count: [{\n      paramCount: 1,\n      text: 'Count()',\n      displayName: 'Count()',\n      descriptionStringId: 'XtraEditorsExpressionEditor.CountAggregate.Description'\n    }],\n    Max: [{\n      paramCount: 1,\n      text: 'Max()',\n      displayName: 'Max()',\n      descriptionStringId: 'XtraEditorsExpressionEditor.MaxAggregate.Description'\n    }],\n    Min: [{\n      paramCount: 1,\n      text: 'Min()',\n      displayName: 'Min()',\n      descriptionStringId: 'XtraEditorsExpressionEditor.MinAggregate.Description'\n    }],\n    Sum: [{\n      paramCount: 1,\n      text: 'Sum()',\n      displayName: 'Sum()',\n      descriptionStringId: 'XtraEditorsExpressionEditor.SumAggregate.Description'\n    }],\n    CountNotNull: [{\n      paramCount: 1,\n      text: 'CountNotNull()',\n      displayName: 'CountNotNull()',\n      descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionCountNotNull'\n    }],\n    CountDistinct: [{\n      paramCount: 1,\n      text: 'CountDistinct()',\n      displayName: 'CountDistinct()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionCountDistinct'\n    }],\n    Median: [{\n      paramCount: 1,\n      text: 'Median()',\n      displayName: 'Median()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionMedian'\n    }],\n    Mode: [{\n      paramCount: 1,\n      text: 'Mode()',\n      displayName: 'Mode()',\n      descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionMode'\n    }],\n    StdDev: [{\n      paramCount: 1,\n      text: 'StdDev()',\n      displayName: 'StdDev()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDev'\n    }],\n    StdDevp: [{\n      paramCount: 1,\n      text: 'StdDevp()',\n      displayName: 'StdDevp()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDevp'\n    }],\n    Var: [{\n      paramCount: 1,\n      text: 'Var()',\n      displayName: 'Var()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionVar'\n    }],\n    Varp: [{\n      paramCount: 1,\n      text: 'Varp()',\n      displayName: 'Varp()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionVarp'\n    }]\n  }\n};\nvar dashboardAdvancedFunctions = {\n  display: 'Advanced',\n  localizationId: 'DashboardStringId.FunctionCategoryAdvanced',\n  category: 'Advanced',\n  items: {\n    aggr: [{\n      paramCount: 1,\n      text: 'aggr()',\n      displayName: 'aggr()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionAggr'\n    }],\n    asc: [{\n      paramCount: 1,\n      text: 'asc()',\n      displayName: 'asc()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc'\n    }],\n    desc: [{\n      paramCount: 1,\n      text: 'desc()',\n      displayName: 'desc()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc'\n    }],\n    orderBy: [{\n      paramCount: 1,\n      text: 'orderBy()',\n      displayName: 'orderBy()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy'\n    }],\n    partitionBy: [{\n      paramCount: 1,\n      text: 'partitionBy()',\n      displayName: 'partitionBy()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy'\n    }],\n    w: [{\n      paramCount: 3,\n      text: 'w( , partitionBy(), orderBy() )',\n      displayName: 'w()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinition'\n    }],\n    filter: [{\n      paramCount: 2,\n      text: 'filter( , )',\n      displayName: 'filter()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionAggregateFilter'\n    }],\n    joinRule: [{\n      paramCount: 2,\n      text: 'joinRule()',\n      displayName: 'joinRule()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionAggrJoinRule'\n    }]\n  }\n};\nvar dashboardAdditionalFunctions = {\n  'Date-Time': {\n    GetDateHour: [{\n      paramCount: 1,\n      text: 'GetDateHour()',\n      displayName: 'GetDateHour()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour'\n    }],\n    GetDateHourMinute: [{\n      paramCount: 1,\n      text: 'GetDateHourMinute()',\n      displayName: 'GetDateHourMinute()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute'\n    }],\n    GetDateHourMinuteSecond: [{\n      paramCount: 1,\n      text: 'GetDateHourMinuteSecond()',\n      displayName: 'GetDateHourMinuteSecond()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond'\n    }],\n    GetDateMonthYear: [{\n      paramCount: 1,\n      text: 'GetDateMonthYear()',\n      displayName: 'GetDateMonthYear()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear'\n    }],\n    GetDateWeekYear: [{\n      paramCount: 1,\n      text: 'GetDateWeekYear()',\n      displayName: 'GetDateWeekYear()',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear'\n    }, {\n      paramCount: 2,\n      text: 'GetDateWeekYear(,)',\n      displayName: 'GetDateWeekYear(,)',\n      descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear2'\n    }],\n    GetDateQuarterYear: [{\n      paramCount: 1,\n      text: 'GetDateQuarterYear()',\n      displayName: 'GetDateQuarterYear()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear'\n    }],\n    GetQuarter: [{\n      paramCount: 1,\n      text: 'GetQuarter()',\n      displayName: 'GetQuarter()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter'\n    }],\n    GetWeekOfMonth: [{\n      paramCount: 1,\n      text: 'GetWeekOfMonth()',\n      displayName: 'GetWeekOfMonth()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth'\n    }],\n    GetWeekOfYear: [{\n      paramCount: 1,\n      text: 'GetWeekOfYear()',\n      displayName: 'GetWeekOfYear()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear'\n    }],\n    ToDateTime: [{\n      paramCount: 1,\n      text: 'ToDateTime()',\n      displayName: 'ToDateTime()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime'\n    }],\n    MakeDateTime: [{\n      paramCount: 3,\n      text: 'MakeDateTime(,,)',\n      displayName: 'MakeDateTime(,,)',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3'\n    }, {\n      paramCount: 4,\n      text: 'MakeDateTime(,,,)',\n      displayName: 'MakeDateTime(,,,)',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4'\n    }, {\n      paramCount: 5,\n      text: 'MakeDateTime(,,,,)',\n      displayName: 'MakeDateTime(,,,,)',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5'\n    }, {\n      paramCount: 6,\n      text: 'MakeDateTime(,,,,,)',\n      displayName: 'MakeDateTime(,,,,,)',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6'\n    }]\n  },\n  'Logical': {\n    ToBoolean: [{\n      paramCount: 1,\n      text: 'ToBoolean()',\n      displayName: 'ToBoolean()',\n      descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean'\n    }]\n  },\n  'String': {\n    Join: null\n  }\n};\n\nvar ExpressionEditorFunctions = function () {\n  function ExpressionEditorFunctions() {}\n\n  ExpressionEditorFunctions.customFunctions = [];\n  return ExpressionEditorFunctions;\n}();\n\nexports.ExpressionEditorFunctions = ExpressionEditorFunctions;\n\nfunction getExpressionEditorFunctions() {\n  return [dashboardAdvancedFunctions, dashboardAggrFunctions].concat(analytics_widgets_internal_1.functionDisplay().filter(function (category) {\n    return category.display !== 'Aggregate';\n  })).map(function (functionCategory) {\n    var category = functionCategory.display;\n\n    if (dashboardAdditionalFunctions[category]) {\n      var clone = __assign({}, functionCategory);\n\n      clone.items = __assign(__assign({}, clone.items), dashboardAdditionalFunctions[category]);\n      return clone;\n    } else {\n      return functionCategory;\n    }\n  }).concat([windowFunctions]).concat(ExpressionEditorFunctions.customFunctions);\n}\n\nexports.getExpressionEditorFunctions = getExpressionEditorFunctions;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/designer/expression-editor/_expression-editor-functions.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","getExpressionEditorFunctions","ExpressionEditorFunctions","analytics_widgets_internal_1","require","windowFunctions","display","localizationId","items","First","paramCount","text","displayName","descriptionStringId","Last","Index","Size","Lookup","RankCompetition","RankDense","RankUnique","RankModified","RankPercentile","RunningAggregate","RunningAvg","RunningCount","RunningMax","RunningMin","RunningSum","WindowAggregate","WindowAvg","WindowCount","WindowCountDistinct","WindowMax","WindowMin","WindowSum","WindowMedian","WindowMode","WindowVar","WindowVarp","WindowStdDev","WindowStdDevp","Total","dashboardAggrFunctions","category","Avg","Count","Max","Min","Sum","CountNotNull","CountDistinct","Median","Mode","StdDev","StdDevp","Var","Varp","dashboardAdvancedFunctions","aggr","asc","desc","orderBy","partitionBy","w","filter","joinRule","dashboardAdditionalFunctions","GetDateHour","GetDateHourMinute","GetDateHourMinuteSecond","GetDateMonthYear","GetDateWeekYear","GetDateQuarterYear","GetQuarter","GetWeekOfMonth","GetWeekOfYear","ToDateTime","MakeDateTime","ToBoolean","Join","customFunctions","concat","functionDisplay","map","functionCategory","clone"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_expression-editor-functions.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getExpressionEditorFunctions = exports.ExpressionEditorFunctions = void 0;\nvar analytics_widgets_internal_1 = require(\"@devexpress/analytics-core/analytics-widgets-internal\");\nvar windowFunctions = {\n    display: 'Window Functions',\n    localizationId: 'DashboardStringId.FunctionCategoryWindow',\n    items: {\n        First: [{\n                paramCount: 1,\n                text: 'First()',\n                displayName: 'First()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionFirst'\n            }],\n        Last: [{\n                paramCount: 1,\n                text: 'Last()',\n                displayName: 'Last()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionLast'\n            }],\n        Index: [{\n                paramCount: 1,\n                text: 'Index()',\n                displayName: 'Index()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionIndex'\n            }],\n        Size: [{\n                paramCount: 1,\n                text: 'Size()',\n                displayName: 'Size()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionSize'\n            }],\n        Lookup: [{\n                paramCount: 2,\n                text: 'Lookup(, )',\n                displayName: 'Lookup(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionLookup'\n            }],\n        RankCompetition: [{\n                paramCount: 2,\n                text: 'RankCompetition(, )',\n                displayName: 'RankCompetition(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankCompetition'\n            }],\n        RankDense: [{\n                paramCount: 2,\n                text: 'RankDense(, )',\n                displayName: 'RankDense(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankDense'\n            }],\n        RankUnique: [{\n                paramCount: 2,\n                text: 'RankUnique(, )',\n                displayName: 'RankUnique(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankUnique'\n            }],\n        RankModified: [{\n                paramCount: 2,\n                text: 'RankModified(, )',\n                displayName: 'RankModified(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankModified'\n            }],\n        RankPercentile: [{\n                paramCount: 2,\n                text: 'RankPercentile(, )',\n                displayName: 'RankPercentile(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankPercentile'\n            }],\n        RunningAggregate: [{\n                paramCount: 2,\n                text: 'RunningAggregate(, )',\n                displayName: 'RunningAggregate(, )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCustomAggregate'\n            }],\n        RunningAvg: [{\n                paramCount: 1,\n                text: 'RunningAvg()',\n                displayName: 'RunningAvg()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningAvg'\n            }],\n        RunningCount: [{\n                paramCount: 1,\n                text: 'RunningCount()',\n                displayName: 'RunningCount()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCount'\n            }],\n        RunningMax: [{\n                paramCount: 1,\n                text: 'RunningMax()',\n                displayName: 'RunningMax()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMax'\n            }],\n        RunningMin: [{\n                paramCount: 1,\n                text: 'RunningMin()',\n                displayName: 'RunningMin()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMin'\n            }],\n        RunningSum: [{\n                paramCount: 1,\n                text: 'RunningSum()',\n                displayName: 'RunningSum()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningSum'\n            }],\n        WindowAggregate: [{\n                paramCount: 4,\n                text: 'WindowAggregate(, , , )',\n                displayName: 'WindowAggregate(, , , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCustomAggregate'\n            }],\n        WindowAvg: [{\n                paramCount: 3,\n                text: 'WindowAvg(, , )',\n                displayName: 'WindowAvg(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowAvg'\n            }],\n        WindowCount: [{\n                paramCount: 3,\n                text: 'WindowCount(, , )',\n                displayName: 'WindowCount(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCount'\n            }],\n        WindowCountDistinct: [{\n                paramCount: 3,\n                text: 'WindowCountDistinct(, , )',\n                displayName: 'WindowCountDistinct(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCountDistinct'\n            }],\n        WindowMax: [{\n                paramCount: 3,\n                text: 'WindowMax(, , )',\n                displayName: 'WindowMax(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMax'\n            }],\n        WindowMin: [{\n                paramCount: 3,\n                text: 'WindowMin(, , )',\n                displayName: 'WindowMin(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMin'\n            }],\n        WindowSum: [{\n                paramCount: 3,\n                text: 'WindowSum(, , )',\n                displayName: 'WindowSum(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowSum'\n            }],\n        WindowMedian: [{\n                paramCount: 3,\n                text: 'WindowMedian(, , )',\n                displayName: 'WindowMedian(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMedian'\n            }],\n        WindowMode: [{\n                paramCount: 3,\n                text: 'WindowMode(, , )',\n                displayName: 'WindowMode(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMode'\n            }],\n        WindowVar: [{\n                paramCount: 3,\n                text: 'WindowVar(, , )',\n                displayName: 'WindowVar(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVar'\n            }],\n        WindowVarp: [{\n                paramCount: 3,\n                text: 'WindowVarp(, , )',\n                displayName: 'WindowVarp(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVarp'\n            }],\n        WindowStdDev: [{\n                paramCount: 3,\n                text: 'WindowStdDev(, , )',\n                displayName: 'WindowStdDev(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDev'\n            }],\n        WindowStdDevp: [{\n                paramCount: 3,\n                text: 'WindowStdDevp(, , )',\n                displayName: 'WindowStdDevp(, , )',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDevp'\n            }],\n        Total: [{\n                paramCount: 0,\n                text: 'Total()',\n                displayName: 'Total()',\n                descriptionStringId: 'DashboardStringId.FunctionDescriptionTotal'\n            }]\n    }\n};\nvar dashboardAggrFunctions = {\n    display: 'Aggregate',\n    localizationId: 'DashboardStringId.FunctionCategoryAggregate',\n    category: 'DashboardAggregate',\n    items: {\n        Avg: [{ paramCount: 1, text: 'Avg()', displayName: 'Avg()', descriptionStringId: 'XtraEditorsExpressionEditor.AvgAggregate.Description' }],\n        Count: [{ paramCount: 1, text: 'Count()', displayName: 'Count()', descriptionStringId: 'XtraEditorsExpressionEditor.CountAggregate.Description' }],\n        Max: [{ paramCount: 1, text: 'Max()', displayName: 'Max()', descriptionStringId: 'XtraEditorsExpressionEditor.MaxAggregate.Description' }],\n        Min: [{ paramCount: 1, text: 'Min()', displayName: 'Min()', descriptionStringId: 'XtraEditorsExpressionEditor.MinAggregate.Description' }],\n        Sum: [{ paramCount: 1, text: 'Sum()', displayName: 'Sum()', descriptionStringId: 'XtraEditorsExpressionEditor.SumAggregate.Description' }],\n        CountNotNull: [{ paramCount: 1, text: 'CountNotNull()', displayName: 'CountNotNull()', descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionCountNotNull' }],\n        CountDistinct: [{ paramCount: 1, text: 'CountDistinct()', displayName: 'CountDistinct()', descriptionStringId: 'DashboardStringId.FunctionDescriptionCountDistinct' }],\n        Median: [{ paramCount: 1, text: 'Median()', displayName: 'Median()', descriptionStringId: 'DashboardStringId.FunctionDescriptionMedian' }],\n        Mode: [{ paramCount: 1, text: 'Mode()', displayName: 'Mode()', descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionMode' }],\n        StdDev: [{ paramCount: 1, text: 'StdDev()', displayName: 'StdDev()', descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDev' }],\n        StdDevp: [{ paramCount: 1, text: 'StdDevp()', displayName: 'StdDevp()', descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDevp' }],\n        Var: [{ paramCount: 1, text: 'Var()', displayName: 'Var()', descriptionStringId: 'DashboardStringId.FunctionDescriptionVar' }],\n        Varp: [{ paramCount: 1, text: 'Varp()', displayName: 'Varp()', descriptionStringId: 'DashboardStringId.FunctionDescriptionVarp' }]\n    }\n};\nvar dashboardAdvancedFunctions = {\n    display: 'Advanced',\n    localizationId: 'DashboardStringId.FunctionCategoryAdvanced',\n    category: 'Advanced',\n    items: {\n        aggr: [{ paramCount: 1, text: 'aggr()', displayName: 'aggr()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggr' }],\n        asc: [{ paramCount: 1, text: 'asc()', displayName: 'asc()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc' }],\n        desc: [{ paramCount: 1, text: 'desc()', displayName: 'desc()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc' }],\n        orderBy: [{ paramCount: 1, text: 'orderBy()', displayName: 'orderBy()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy' }],\n        partitionBy: [{ paramCount: 1, text: 'partitionBy()', displayName: 'partitionBy()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy' }],\n        w: [{ paramCount: 3, text: 'w( , partitionBy(), orderBy() )', displayName: 'w()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinition' }],\n        filter: [{ paramCount: 2, text: 'filter( , )', displayName: 'filter()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggregateFilter' }],\n        joinRule: [{ paramCount: 2, text: 'joinRule()', displayName: 'joinRule()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggrJoinRule' }]\n    }\n};\nvar dashboardAdditionalFunctions = {\n    'Date-Time': {\n        GetDateHour: [{ paramCount: 1, text: 'GetDateHour()', displayName: 'GetDateHour()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour' }],\n        GetDateHourMinute: [{ paramCount: 1, text: 'GetDateHourMinute()', displayName: 'GetDateHourMinute()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute' }],\n        GetDateHourMinuteSecond: [{ paramCount: 1, text: 'GetDateHourMinuteSecond()', displayName: 'GetDateHourMinuteSecond()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond' }],\n        GetDateMonthYear: [{ paramCount: 1, text: 'GetDateMonthYear()', displayName: 'GetDateMonthYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear' }],\n        GetDateWeekYear: [\n            { paramCount: 1, text: 'GetDateWeekYear()', displayName: 'GetDateWeekYear()', descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear' },\n            { paramCount: 2, text: 'GetDateWeekYear(,)', displayName: 'GetDateWeekYear(,)', descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear2' }\n        ],\n        GetDateQuarterYear: [{ paramCount: 1, text: 'GetDateQuarterYear()', displayName: 'GetDateQuarterYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear' }],\n        GetQuarter: [{ paramCount: 1, text: 'GetQuarter()', displayName: 'GetQuarter()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter' }],\n        GetWeekOfMonth: [{ paramCount: 1, text: 'GetWeekOfMonth()', displayName: 'GetWeekOfMonth()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth' }],\n        GetWeekOfYear: [{ paramCount: 1, text: 'GetWeekOfYear()', displayName: 'GetWeekOfYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear' }],\n        ToDateTime: [{ paramCount: 1, text: 'ToDateTime()', displayName: 'ToDateTime()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime' }],\n        MakeDateTime: [\n            { paramCount: 3, text: 'MakeDateTime(,,)', displayName: 'MakeDateTime(,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3' },\n            { paramCount: 4, text: 'MakeDateTime(,,,)', displayName: 'MakeDateTime(,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4' },\n            { paramCount: 5, text: 'MakeDateTime(,,,,)', displayName: 'MakeDateTime(,,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5' },\n            { paramCount: 6, text: 'MakeDateTime(,,,,,)', displayName: 'MakeDateTime(,,,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6' }\n        ]\n    },\n    'Logical': {\n        ToBoolean: [{ paramCount: 1, text: 'ToBoolean()', displayName: 'ToBoolean()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean' }]\n    },\n    'String': {\n        Join: null\n    }\n};\nvar ExpressionEditorFunctions = (function () {\n    function ExpressionEditorFunctions() {\n    }\n    ExpressionEditorFunctions.customFunctions = [];\n    return ExpressionEditorFunctions;\n}());\nexports.ExpressionEditorFunctions = ExpressionEditorFunctions;\nfunction getExpressionEditorFunctions() {\n    return [dashboardAdvancedFunctions,\n        dashboardAggrFunctions]\n        .concat(analytics_widgets_internal_1.functionDisplay().filter(function (category) { return category.display !== 'Aggregate'; }))\n        .map(function (functionCategory) {\n        var category = functionCategory.display;\n        if (dashboardAdditionalFunctions[category]) {\n            var clone = __assign({}, functionCategory);\n            clone.items = __assign(__assign({}, clone.items), dashboardAdditionalFunctions[category]);\n            return clone;\n        }\n        else {\n            return functionCategory;\n        }\n    })\n        .concat([windowFunctions])\n        .concat(ExpressionEditorFunctions.customFunctions);\n}\nexports.getExpressionEditorFunctions = getExpressionEditorFunctions;\n"]},"metadata":{},"sourceType":"script"}