{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_format-helper.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatHelper = exports.invariantCurrencySymbol = exports.invariantCurrencyIdentifier = void 0;\n\nvar config_1 = require(\"devextreme/core/config\");\n\nvar date_1 = require(\"devextreme/core/utils/date\");\n\nvar string_1 = require(\"devextreme/core/utils/string\");\n\nvar format_helper_1 = require(\"devextreme/format_helper\");\n\nexports.formatHelper = format_helper_1.default;\n\nvar date_2 = require(\"devextreme/localization/date\");\n\nvar number_1 = require(\"devextreme/localization/number\");\n\nvar _utils_1 = require(\"../data/_utils\");\n\nvar _default_1 = require(\"./localization/_default\");\n\nvar _jquery_helpers_1 = require(\"./_jquery-helpers\");\n\nexports.invariantCurrencyIdentifier = 'INVARIANT';\nexports.invariantCurrencySymbol = 'Â¤';\nnumber_1.default.inject({\n  format: function (value, formatConfig) {\n    if (formatConfig === void 0) {\n      formatConfig = {};\n    }\n\n    var numberStr = (+value).toString(10);\n\n    if (/e/.test(numberStr)) {\n      console.warn('The number ' + numberStr + ' out of (1e21, 1e-7) range can`t be formatted. The number will be displayed as is.');\n      return value.toString();\n    }\n\n    var invariantCurrency = formatConfig.currency === exports.invariantCurrencyIdentifier;\n\n    if (invariantCurrency) {\n      formatConfig.currency = 'USD';\n    }\n\n    var formattedValue = this.callBase.apply(this, arguments);\n\n    if (formattedValue != null && formatConfig.currency != 'default') {\n      var currencySymbol = '';\n      var symbolAltNarrow = '';\n\n      try {\n        var symbolInfo = number_1.default.getCurrencySymbol(formatConfig.currency);\n        currencySymbol = symbolInfo['symbol'];\n        symbolAltNarrow = symbolInfo['symbol-alt-narrow'];\n      } catch (_a) {}\n\n      try {\n        var symbolInfo = number_1.default._getCurrencySymbolInfo(formatConfig.currency);\n\n        currencySymbol = symbolInfo.symbol;\n        symbolAltNarrow = symbolInfo.symbol;\n      } catch (_b) {}\n\n      if (invariantCurrency) {\n        symbolAltNarrow = exports.invariantCurrencySymbol;\n        formatConfig.currency = exports.invariantCurrencyIdentifier;\n      }\n\n      if (!!symbolAltNarrow && symbolAltNarrow !== currencySymbol) {\n        return formattedValue.replace(currencySymbol, symbolAltNarrow);\n      }\n    }\n\n    return formattedValue;\n  }\n});\nformat_helper_1.default.inject({\n  defaultLargeNumberFormatPostfixes: {\n    1: 'DashboardStringId.NumericFormatUnitSymbolThousands',\n    2: 'DashboardStringId.NumericFormatUnitSymbolMillions',\n    3: 'DashboardStringId.NumericFormatUnitSymbolBillions',\n    4: 'T'\n  },\n  _accountingStyle: false,\n  defaultQuarterFormat: function () {\n    return _default_1.getLocalizationById('DashboardStringId.DateTimeQuarterFormat');\n  },\n  romanDigits: ['I', 'II', 'III', 'IV'],\n  format: function (value, format) {\n    if (_jquery_helpers_1.isPlainObject(format) && format.format) {\n      if (format.dateType) return this._formatDateEx(value, format);else if (_utils_1.type.isNumeric(value) && isFinite(value)) return this._formatNumberEx(value, format);\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _getQuarterString: function (date, format) {\n    var quarter = date_1.default.getQuarter(date.getMonth());\n\n    switch (format) {\n      case 'q':\n        return this.romanDigits[quarter];\n\n      case 'qq':\n        return string_1.format(this.defaultQuarterFormat(), this.romanDigits[quarter]);\n\n      case 'Q':\n        return (quarter + 1).toString();\n\n      case 'QQ':\n        return string_1.format(this.defaultQuarterFormat(), (quarter + 1).toString());\n    }\n\n    return '';\n  },\n  _formatDateEx: function (value, formatInfo) {\n    var that = this,\n        format = formatInfo.format.toLowerCase(),\n        dateType = formatInfo.dateType,\n        time,\n        index,\n        dateStr;\n\n    if (!_utils_1.type.isDefined(value)) {\n      return '';\n    }\n\n    if (dateType !== 'num' || format === 'dayofweek') {\n      switch (format) {\n        case 'monthyear':\n          return date_2.default.format(value, 'monthandyear');\n\n        case 'quarteryear':\n          return that._getQuarterString(value, 'QQ') + ' ' + value.getFullYear();\n\n        case 'daymonthyear':\n        case 'weekyear':\n          return date_2.default.format(value, dateType + 'Date');\n\n        case 'datehour':\n          time = new Date(value.getTime());\n          time.setMinutes(0);\n          dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');\n          return dateType === 'timeOnly' ? date_2.default.format(time, 'shorttime') : dateStr + ' ' + date_2.default.format(time, 'shorttime');\n\n        case 'datehourminute':\n          dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');\n          return dateType === 'timeOnly' ? date_2.default.format(value, 'shorttime') : dateStr + ' ' + date_2.default.format(value, 'shorttime');\n\n        case 'datehourminutesecond':\n          dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');\n          return dateType === 'timeOnly' ? date_2.default.format(value, 'longtime') : dateStr + ' ' + date_2.default.format(value, 'longtime');\n\n        case 'year':\n          dateStr = value.toString();\n          return dateType === 'abbr' ? dateStr.slice(2, 4) : dateStr;\n\n        case 'dateyear':\n          return dateType === 'abbr' ? date_2.default.format(value, 'shortyear') : date_2.default.format(value, 'year');\n\n        case 'quarter':\n          return string_1.format(that.defaultQuarterFormat(), value.toString());\n\n        case 'month':\n          index = value - 1;\n          return date_2.default.getMonthNames(dateType === 'abbr' ? 'abbreviated' : undefined)[index];\n\n        case 'hour':\n          if (dateType === 'long') {\n            time = new Date();\n            time.setHours(value);\n            time.setMinutes(0);\n            return date_2.default.format(time, 'shorttime');\n          }\n\n          return value.toString();\n\n        case 'dayofweek':\n          index = _utils_1.type.isString(value) ? ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(value) : value;\n\n          if (dateType !== 'num') {\n            return date_2.default.getDayNames(dateType === 'abbr' ? 'abbreviated' : undefined)[index];\n          }\n\n          return ((index - date_2.default.firstDayOfWeekIndex() + 1 + 7) % 8).toString();\n\n        default:\n          return value.toString();\n      }\n    } else {\n      return value.toString();\n    }\n  },\n  _getMinimalPossibleValue: function (formatType, precision) {\n    var maxPrecision = precision + 1;\n\n    if (formatType === 'percent') {\n      maxPrecision += 2;\n    }\n\n    return Math.pow(10, -maxPrecision);\n  },\n  _formatNumberEx: function (value, formatInfo) {\n    var that = this,\n        formatType = formatInfo.format.toLowerCase(),\n        formatSettings = that._getUnitFormatSettings(value, formatInfo),\n        result = '',\n        config;\n\n    if (!_utils_1.type.isDefined(value)) {\n      return '';\n    }\n\n    if (['currency', 'percent', 'fixedpoint'].indexOf(formatType) !== -1 && formatSettings.precision >= 0 && Math.abs(value) < that._getMinimalPossibleValue(formatType, formatSettings.precision)) {\n      value = 0;\n    }\n\n    value = that._getNumberByPower(value, formatSettings.unitPower, 1000);\n\n    if (['fixedpoint', 'currency', 'percent'].indexOf(formatType) !== -1) {\n      config = that._generateNumericFormatConfig(__assign(__assign({}, formatSettings), {\n        significantDigits: formatInfo.significantDigits,\n        signsAfterPointCount: that._countSignsAfterPoint(value, formatType),\n        formatType: formatType\n      }), value);\n    }\n\n    switch (formatType) {\n      case 'general':\n        if (value === 0) {\n          return '0';\n        } else if (Math.abs(value) < 0.0001) {\n          return number_1.default.format(value, {\n            type: 'exponential',\n            precision: 2,\n            minimumSignificantDigits: 1,\n            maximumSignificantDigits: 20\n          });\n        } else {\n          return number_1.default.format(value, {\n            useGrouping: false,\n            minimumSignificantDigits: 1,\n            maximumSignificantDigits: 20\n          });\n        }\n\n      case 'decimal':\n        result = number_1.default.format(value, that._normalizeFormatConfig(formatType, formatSettings.precision, value));\n        break;\n\n      case 'fixedpoint':\n        result = number_1.default.format(value, config);\n        break;\n\n      case 'currency':\n        config.currency = formatInfo.currency || config_1.default().defaultCurrency;\n        if (!this._accountingStyle) config.currencySign = 'standard';\n        if (config.style === 'accounting' && !this._accountingStyle) delete config.style;\n        result = number_1.default.format(value, config);\n        break;\n\n      case 'percent':\n        config.style = 'percent';\n        result = number_1.default.format(value, config);\n        break;\n\n      case 'exponential':\n        return number_1.default.format(value, {\n          type: 'exponential',\n          precision: formatSettings.precision\n        });\n\n      default:\n        throw \"Illegal numeric format: '\" + formatType + \"'\";\n    }\n\n    result = that._insertUnitPostfix(result, formatSettings.unitPower);\n    return (formatInfo.plus && value > 0 ? '+' : '') + result;\n  },\n  _getUnitFormatSettings: function (value, formatInfo) {\n    var unitPower = formatInfo.unitPower || 0,\n        precision = formatInfo.precision || 0,\n        includeGroupSeparator = formatInfo.includeGroupSeparator || false,\n        showTrailingZeros = formatInfo.showTrailingZeros === undefined ? true : formatInfo.showTrailingZeros,\n        significantDigits = formatInfo.significantDigits || 1,\n        absValue;\n\n    if (unitPower.toString().toLowerCase() === 'auto') {\n      showTrailingZeros = false;\n      absValue = Math.abs(value);\n      if (significantDigits < 1) significantDigits = 1;\n\n      if (absValue >= 1000000000) {\n        unitPower = 3;\n        absValue /= 1000000000;\n      } else if (absValue >= 1000000) {\n        unitPower = 2;\n        absValue /= 1000000;\n      } else if (absValue >= 1000) {\n        unitPower = 1;\n        absValue /= 1000;\n      } else unitPower = 0;\n\n      if (absValue === 0) precision = 0;else if (absValue < 1) {\n        precision = significantDigits;\n        var smallValue = Math.pow(10, -significantDigits);\n\n        while (absValue < smallValue) {\n          smallValue /= 10;\n          precision++;\n        }\n      } else {\n        if (absValue >= 100) precision = significantDigits - 3;else if (absValue >= 10) precision = significantDigits - 2;else precision = significantDigits - 1;\n      }\n    }\n\n    if (precision < 0) {\n      precision = 0;\n    }\n\n    return {\n      unitPower: unitPower,\n      precision: precision,\n      showTrailingZeros: showTrailingZeros,\n      includeGroupSeparator: includeGroupSeparator\n    };\n  },\n  _insertUnitPostfix: function (formattedNumber, unitPower) {\n    var lastDigitReg = /(\\d)([^\\d]*)$/;\n    return unitPower > 0 ? formattedNumber.replace(lastDigitReg, '$1' + _default_1.getLocalizationById(this.defaultLargeNumberFormatPostfixes[unitPower]) + '$2') : formattedNumber;\n  },\n  _generateNumericFormatConfig: function (settings, value) {\n    var that = this,\n        config;\n\n    if (!settings.showTrailingZeros) {\n      settings.precision = Math.min(settings.precision, settings.signsAfterPointCount);\n    }\n\n    config = that._normalizeFormatConfig(settings.formatType, settings.precision, value);\n    config.useGrouping = settings.includeGroupSeparator;\n\n    if (settings.significantDigits && value) {\n      _jquery_helpers_1.extend(config, {\n        minimumSignificantDigits: settings.showTrailingZeros ? settings.significantDigits : 1,\n        maximumSignificantDigits: settings.significantDigits\n      });\n    }\n\n    return config;\n  },\n  _countSignsAfterPoint: function (num, formatType) {\n    var strNum = String(num),\n        pointPos = strNum.indexOf('.');\n\n    if (formatType == 'percent') {\n      pointPos += 2;\n    }\n\n    if (pointPos < 0) {\n      return 0;\n    }\n\n    return strNum.substr(pointPos + 1, strNum.length).length;\n  },\n  _excludeTrailingZeros: function (strValue, floatingSymbol) {\n    var floatingIndex = strValue.indexOf(floatingSymbol),\n        stopIndex,\n        i;\n    if (floatingIndex < 0) return strValue;\n    stopIndex = strValue.length;\n\n    for (i = stopIndex - 1; i >= floatingIndex && (strValue[i] === '0' || i === floatingIndex); i--) {\n      stopIndex--;\n    }\n\n    return strValue.substring(0, stopIndex);\n  },\n  _normalizeFormatConfig: function (format, precision, value) {\n    var config = number_1.default._normalizeFormatConfig(format, {\n      precision: precision\n    }, value);\n\n    if (format === 'decimal') {\n      config = __assign(__assign({}, config), {\n        minimumIntegerDigits: precision || 1,\n        useGrouping: false,\n        maximumFractionDigits: 0,\n        round: value < 0 ? 'ceil' : 'floor'\n      });\n    } else {\n      config = __assign(__assign({}, config), {\n        minimumFractionDigits: precision,\n        maximumFractionDigits: precision\n      });\n    }\n\n    return config;\n  },\n  _getNumberByPower: function (number, power, base) {\n    var result = number;\n\n    while (power > 0) {\n      result = result / base;\n      power--;\n    }\n\n    while (power < 0) {\n      result = result * base;\n      power++;\n    }\n\n    return result;\n  }\n});","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/data/_format-helper.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","formatHelper","invariantCurrencySymbol","invariantCurrencyIdentifier","config_1","require","date_1","string_1","format_helper_1","default","date_2","number_1","_utils_1","_default_1","_jquery_helpers_1","inject","format","formatConfig","numberStr","toString","test","console","warn","invariantCurrency","currency","formattedValue","callBase","currencySymbol","symbolAltNarrow","symbolInfo","getCurrencySymbol","_a","_getCurrencySymbolInfo","symbol","_b","replace","defaultLargeNumberFormatPostfixes","_accountingStyle","defaultQuarterFormat","getLocalizationById","romanDigits","isPlainObject","dateType","_formatDateEx","type","isNumeric","isFinite","_formatNumberEx","_getQuarterString","date","quarter","getQuarter","getMonth","formatInfo","that","toLowerCase","time","index","dateStr","isDefined","getFullYear","Date","getTime","setMinutes","slice","getMonthNames","undefined","setHours","isString","indexOf","getDayNames","firstDayOfWeekIndex","_getMinimalPossibleValue","formatType","precision","maxPrecision","Math","pow","formatSettings","_getUnitFormatSettings","result","config","abs","_getNumberByPower","unitPower","_generateNumericFormatConfig","significantDigits","signsAfterPointCount","_countSignsAfterPoint","minimumSignificantDigits","maximumSignificantDigits","useGrouping","_normalizeFormatConfig","defaultCurrency","currencySign","style","_insertUnitPostfix","plus","includeGroupSeparator","showTrailingZeros","absValue","smallValue","formattedNumber","lastDigitReg","settings","min","extend","num","strNum","String","pointPos","substr","_excludeTrailingZeros","strValue","floatingSymbol","floatingIndex","stopIndex","substring","minimumIntegerDigits","maximumFractionDigits","round","minimumFractionDigits","number","power","base"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_format-helper.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatHelper = exports.invariantCurrencySymbol = exports.invariantCurrencyIdentifier = void 0;\nvar config_1 = require(\"devextreme/core/config\");\nvar date_1 = require(\"devextreme/core/utils/date\");\nvar string_1 = require(\"devextreme/core/utils/string\");\nvar format_helper_1 = require(\"devextreme/format_helper\");\nexports.formatHelper = format_helper_1.default;\nvar date_2 = require(\"devextreme/localization/date\");\nvar number_1 = require(\"devextreme/localization/number\");\nvar _utils_1 = require(\"../data/_utils\");\nvar _default_1 = require(\"./localization/_default\");\nvar _jquery_helpers_1 = require(\"./_jquery-helpers\");\nexports.invariantCurrencyIdentifier = 'INVARIANT';\nexports.invariantCurrencySymbol = 'Â¤';\nnumber_1.default.inject({\n    format: function (value, formatConfig) {\n        if (formatConfig === void 0) { formatConfig = {}; }\n        var numberStr = (+value).toString(10);\n        if ((/e/).test(numberStr)) {\n            console.warn('The number ' + numberStr + ' out of (1e21, 1e-7) range can`t be formatted. The number will be displayed as is.');\n            return value.toString();\n        }\n        var invariantCurrency = formatConfig.currency === exports.invariantCurrencyIdentifier;\n        if (invariantCurrency) {\n            formatConfig.currency = 'USD';\n        }\n        var formattedValue = this.callBase.apply(this, arguments);\n        if (formattedValue != null && formatConfig.currency != 'default') {\n            var currencySymbol = '';\n            var symbolAltNarrow = '';\n            try {\n                var symbolInfo = number_1.default.getCurrencySymbol(formatConfig.currency);\n                currencySymbol = symbolInfo['symbol'];\n                symbolAltNarrow = symbolInfo['symbol-alt-narrow'];\n            }\n            catch (_a) { }\n            try {\n                var symbolInfo = number_1.default._getCurrencySymbolInfo(formatConfig.currency);\n                currencySymbol = symbolInfo.symbol;\n                symbolAltNarrow = symbolInfo.symbol;\n            }\n            catch (_b) { }\n            if (invariantCurrency) {\n                symbolAltNarrow = exports.invariantCurrencySymbol;\n                formatConfig.currency = exports.invariantCurrencyIdentifier;\n            }\n            if (!!symbolAltNarrow && symbolAltNarrow !== currencySymbol) {\n                return formattedValue.replace(currencySymbol, symbolAltNarrow);\n            }\n        }\n        return formattedValue;\n    }\n});\nformat_helper_1.default.inject({\n    defaultLargeNumberFormatPostfixes: {\n        1: 'DashboardStringId.NumericFormatUnitSymbolThousands',\n        2: 'DashboardStringId.NumericFormatUnitSymbolMillions',\n        3: 'DashboardStringId.NumericFormatUnitSymbolBillions',\n        4: 'T'\n    },\n    _accountingStyle: false,\n    defaultQuarterFormat: function () { return _default_1.getLocalizationById('DashboardStringId.DateTimeQuarterFormat'); },\n    romanDigits: ['I', 'II', 'III', 'IV'],\n    format: function (value, format) {\n        if (_jquery_helpers_1.isPlainObject(format) && format.format) {\n            if (format.dateType)\n                return this._formatDateEx(value, format);\n            else if (_utils_1.type.isNumeric(value) && isFinite(value))\n                return this._formatNumberEx(value, format);\n        }\n        return this.callBase.apply(this, arguments);\n    },\n    _getQuarterString: function (date, format) {\n        var quarter = date_1.default.getQuarter(date.getMonth());\n        switch (format) {\n            case 'q':\n                return this.romanDigits[quarter];\n            case 'qq':\n                return string_1.format(this.defaultQuarterFormat(), this.romanDigits[quarter]);\n            case 'Q':\n                return (quarter + 1).toString();\n            case 'QQ':\n                return string_1.format(this.defaultQuarterFormat(), (quarter + 1).toString());\n        }\n        return '';\n    },\n    _formatDateEx: function (value, formatInfo) {\n        var that = this, format = formatInfo.format.toLowerCase(), dateType = formatInfo.dateType, time, index, dateStr;\n        if (!_utils_1.type.isDefined(value)) {\n            return '';\n        }\n        if (dateType !== 'num' || format === 'dayofweek') {\n            switch (format) {\n                case 'monthyear':\n                    return date_2.default.format(value, 'monthandyear');\n                case 'quarteryear':\n                    return that._getQuarterString(value, 'QQ') + ' ' + value.getFullYear();\n                case 'daymonthyear':\n                case 'weekyear':\n                    return date_2.default.format(value, dateType + 'Date');\n                case 'datehour':\n                    time = new Date(value.getTime());\n                    time.setMinutes(0);\n                    dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');\n                    return dateType === 'timeOnly' ? date_2.default.format(time, 'shorttime') : dateStr + ' ' + date_2.default.format(time, 'shorttime');\n                case 'datehourminute':\n                    dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');\n                    return dateType === 'timeOnly' ? date_2.default.format(value, 'shorttime') : dateStr + ' ' + date_2.default.format(value, 'shorttime');\n                case 'datehourminutesecond':\n                    dateStr = dateType === 'timeOnly' ? '' : date_2.default.format(value, dateType + 'Date');\n                    return dateType === 'timeOnly' ? date_2.default.format(value, 'longtime') : dateStr + ' ' + date_2.default.format(value, 'longtime');\n                case 'year':\n                    dateStr = value.toString();\n                    return (dateType === 'abbr') ? dateStr.slice(2, 4) : dateStr;\n                case 'dateyear':\n                    return (dateType === 'abbr') ? date_2.default.format(value, 'shortyear') : date_2.default.format(value, 'year');\n                case 'quarter':\n                    return string_1.format(that.defaultQuarterFormat(), value.toString());\n                case 'month':\n                    index = value - 1;\n                    return date_2.default.getMonthNames(dateType === 'abbr' ? 'abbreviated' : undefined)[index];\n                case 'hour':\n                    if (dateType === 'long') {\n                        time = new Date();\n                        time.setHours(value);\n                        time.setMinutes(0);\n                        return date_2.default.format(time, 'shorttime');\n                    }\n                    return value.toString();\n                case 'dayofweek':\n                    index = _utils_1.type.isString(value) ? ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(value) : value;\n                    if (dateType !== 'num') {\n                        return date_2.default.getDayNames(dateType === 'abbr' ? 'abbreviated' : undefined)[index];\n                    }\n                    return ((index - date_2.default.firstDayOfWeekIndex() + 1 + 7) % 8).toString();\n                default:\n                    return value.toString();\n            }\n        }\n        else {\n            return value.toString();\n        }\n    },\n    _getMinimalPossibleValue: function (formatType, precision) {\n        var maxPrecision = precision + 1;\n        if (formatType === 'percent') {\n            maxPrecision += 2;\n        }\n        return Math.pow(10, -maxPrecision);\n    },\n    _formatNumberEx: function (value, formatInfo) {\n        var that = this, formatType = formatInfo.format.toLowerCase(), formatSettings = that._getUnitFormatSettings(value, formatInfo), result = '', config;\n        if (!_utils_1.type.isDefined(value)) {\n            return '';\n        }\n        if (['currency', 'percent', 'fixedpoint'].indexOf(formatType) !== -1\n            && formatSettings.precision >= 0\n            && Math.abs(value) < that._getMinimalPossibleValue(formatType, formatSettings.precision)) {\n            value = 0;\n        }\n        value = that._getNumberByPower(value, formatSettings.unitPower, 1000);\n        if (['fixedpoint', 'currency', 'percent'].indexOf(formatType) !== -1) {\n            config = that._generateNumericFormatConfig(__assign(__assign({}, formatSettings), { significantDigits: formatInfo.significantDigits, signsAfterPointCount: that._countSignsAfterPoint(value, formatType), formatType: formatType }), value);\n        }\n        switch (formatType) {\n            case 'general':\n                if (value === 0) {\n                    return '0';\n                }\n                else if (Math.abs(value) < 0.0001) {\n                    return number_1.default.format(value, { type: 'exponential', precision: 2, minimumSignificantDigits: 1, maximumSignificantDigits: 20 });\n                }\n                else {\n                    return number_1.default.format(value, { useGrouping: false, minimumSignificantDigits: 1, maximumSignificantDigits: 20 });\n                }\n            case 'decimal':\n                result = number_1.default.format(value, that._normalizeFormatConfig(formatType, formatSettings.precision, value));\n                break;\n            case 'fixedpoint':\n                result = number_1.default.format(value, config);\n                break;\n            case 'currency':\n                config.currency = formatInfo.currency || config_1.default().defaultCurrency;\n                if (!this._accountingStyle)\n                    config.currencySign = 'standard';\n                if (config.style === 'accounting' && !this._accountingStyle)\n                    delete config.style;\n                result = number_1.default.format(value, config);\n                break;\n            case 'percent':\n                config.style = 'percent';\n                result = number_1.default.format(value, config);\n                break;\n            case 'exponential':\n                return number_1.default.format(value, { type: 'exponential', precision: formatSettings.precision });\n            default:\n                throw \"Illegal numeric format: '\" + formatType + \"'\";\n        }\n        result = that._insertUnitPostfix(result, formatSettings.unitPower);\n        return (formatInfo.plus && value > 0 ? '+' : '') + result;\n    },\n    _getUnitFormatSettings: function (value, formatInfo) {\n        var unitPower = formatInfo.unitPower || 0, precision = formatInfo.precision || 0, includeGroupSeparator = formatInfo.includeGroupSeparator || false, showTrailingZeros = formatInfo.showTrailingZeros === undefined ? true : formatInfo.showTrailingZeros, significantDigits = formatInfo.significantDigits || 1, absValue;\n        if (unitPower.toString().toLowerCase() === 'auto') {\n            showTrailingZeros = false;\n            absValue = Math.abs(value);\n            if (significantDigits < 1)\n                significantDigits = 1;\n            if (absValue >= 1000000000) {\n                unitPower = 3;\n                absValue /= 1000000000;\n            }\n            else if (absValue >= 1000000) {\n                unitPower = 2;\n                absValue /= 1000000;\n            }\n            else if (absValue >= 1000) {\n                unitPower = 1;\n                absValue /= 1000;\n            }\n            else\n                unitPower = 0;\n            if (absValue === 0)\n                precision = 0;\n            else if (absValue < 1) {\n                precision = significantDigits;\n                var smallValue = Math.pow(10, -significantDigits);\n                while (absValue < smallValue) {\n                    smallValue /= 10;\n                    precision++;\n                }\n            }\n            else {\n                if (absValue >= 100)\n                    precision = significantDigits - 3;\n                else if (absValue >= 10)\n                    precision = significantDigits - 2;\n                else\n                    precision = significantDigits - 1;\n            }\n        }\n        if (precision < 0) {\n            precision = 0;\n        }\n        return {\n            unitPower: unitPower,\n            precision: precision,\n            showTrailingZeros: showTrailingZeros,\n            includeGroupSeparator: includeGroupSeparator\n        };\n    },\n    _insertUnitPostfix: function (formattedNumber, unitPower) {\n        var lastDigitReg = /(\\d)([^\\d]*)$/;\n        return unitPower > 0\n            ? formattedNumber.replace(lastDigitReg, '$1' + _default_1.getLocalizationById(this.defaultLargeNumberFormatPostfixes[unitPower]) + '$2')\n            : formattedNumber;\n    },\n    _generateNumericFormatConfig: function (settings, value) {\n        var that = this, config;\n        if (!settings.showTrailingZeros) {\n            settings.precision = Math.min(settings.precision, settings.signsAfterPointCount);\n        }\n        config = that._normalizeFormatConfig(settings.formatType, settings.precision, value);\n        config.useGrouping = settings.includeGroupSeparator;\n        if (settings.significantDigits && value) {\n            _jquery_helpers_1.extend(config, {\n                minimumSignificantDigits: settings.showTrailingZeros ? settings.significantDigits : 1,\n                maximumSignificantDigits: settings.significantDigits\n            });\n        }\n        return config;\n    },\n    _countSignsAfterPoint: function (num, formatType) {\n        var strNum = String(num), pointPos = strNum.indexOf('.');\n        if (formatType == 'percent') {\n            pointPos += 2;\n        }\n        if (pointPos < 0) {\n            return 0;\n        }\n        return strNum.substr(pointPos + 1, strNum.length).length;\n    },\n    _excludeTrailingZeros: function (strValue, floatingSymbol) {\n        var floatingIndex = strValue.indexOf(floatingSymbol), stopIndex, i;\n        if (floatingIndex < 0)\n            return strValue;\n        stopIndex = strValue.length;\n        for (i = stopIndex - 1; i >= floatingIndex && (strValue[i] === '0' || i === floatingIndex); i--) {\n            stopIndex--;\n        }\n        return strValue.substring(0, stopIndex);\n    },\n    _normalizeFormatConfig: function (format, precision, value) {\n        var config = number_1.default._normalizeFormatConfig(format, {\n            precision: precision\n        }, value);\n        if (format === 'decimal') {\n            config = __assign(__assign({}, config), {\n                minimumIntegerDigits: precision || 1,\n                useGrouping: false,\n                maximumFractionDigits: 0,\n                round: value < 0 ? 'ceil' : 'floor'\n            });\n        }\n        else {\n            config = __assign(__assign({}, config), {\n                minimumFractionDigits: precision,\n                maximumFractionDigits: precision\n            });\n        }\n        return config;\n    },\n    _getNumberByPower: function (number, power, base) {\n        var result = number;\n        while (power > 0) {\n            result = result / base;\n            power--;\n        }\n        while (power < 0) {\n            result = result * base;\n            power++;\n        }\n        return result;\n    }\n});\n"]},"metadata":{},"sourceType":"script"}