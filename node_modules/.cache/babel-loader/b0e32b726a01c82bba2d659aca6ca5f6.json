{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/sparklines/sparkline.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseSparkline from \"./base_sparkline\";\nimport { validateData } from \"../components/data_validator\";\nimport { Series } from \"../series/base_series\";\nvar MIN_BAR_WIDTH = 1;\nvar MAX_BAR_WIDTH = 50;\nvar DEFAULT_BAR_INTERVAL = 4;\nvar DEFAULT_CANVAS_WIDTH = 250;\nvar DEFAULT_CANVAS_HEIGHT = 30;\nvar DEFAULT_POINT_BORDER = 2;\nvar ALLOWED_TYPES = {\n  line: true,\n  spline: true,\n  stepline: true,\n  area: true,\n  steparea: true,\n  splinearea: true,\n  bar: true,\n  winloss: true\n};\nvar _math = Math;\nvar _abs = _math.abs;\nvar _round = _math.round;\nvar _max = _math.max;\nvar _min = _math.min;\nvar _isFinite = isFinite;\nimport { map as _map, normalizeEnum as _normalizeEnum } from \"../core/utils\";\nimport { isDefined as _isDefined } from \"../../core/utils/type\";\nvar _Number = Number;\nvar _String = String;\n\nfunction findMinMax(data, valField) {\n  var firstItem = data[0] || {};\n  var firstValue = firstItem[valField] || 0;\n  var min = firstValue;\n  var max = firstValue;\n  var minIndexes = [0];\n  var maxIndexes = [0];\n  var dataLength = data.length;\n  var value;\n  var i;\n\n  for (i = 1; i < dataLength; i++) {\n    value = data[i][valField];\n\n    if (value < min) {\n      min = value;\n      minIndexes = [i];\n    } else if (value === min) {\n      minIndexes.push(i);\n    }\n\n    if (value > max) {\n      max = value;\n      maxIndexes = [i];\n    } else if (value === max) {\n      maxIndexes.push(i);\n    }\n  }\n\n  if (max === min) {\n    minIndexes = maxIndexes = [];\n  }\n\n  return {\n    minIndexes: minIndexes,\n    maxIndexes: maxIndexes\n  };\n}\n\nfunction parseNumericDataSource(data, argField, valField, ignoreEmptyPoints) {\n  return _map(data, function (dataItem, index) {\n    var item = null;\n    var isDataNumber;\n    var value;\n\n    if (void 0 !== dataItem) {\n      item = {};\n      isDataNumber = _isFinite(dataItem);\n      item[argField] = isDataNumber ? _String(index) : dataItem[argField];\n      value = isDataNumber ? dataItem : dataItem[valField];\n      item[valField] = null === value ? ignoreEmptyPoints ? void 0 : value : _Number(value);\n      item = void 0 !== item[argField] && void 0 !== item[valField] ? item : null;\n    }\n\n    return item;\n  });\n}\n\nfunction parseWinlossDataSource(data, argField, valField, target) {\n  return _map(data, function (dataItem) {\n    var item = {};\n    item[argField] = dataItem[argField];\n\n    if (_abs(dataItem[valField] - target) < 1e-4) {\n      item[valField] = 0;\n    } else if (dataItem[valField] > target) {\n      item[valField] = 1;\n    } else {\n      item[valField] = -1;\n    }\n\n    return item;\n  });\n}\n\nfunction selectPointColor(color, options, index, pointIndexes) {\n  if (index === pointIndexes.first || index === pointIndexes.last) {\n    color = options.firstLastColor;\n  }\n\n  if ((pointIndexes.min || []).indexOf(index) >= 0) {\n    color = options.minColor;\n  }\n\n  if ((pointIndexes.max || []).indexOf(index) >= 0) {\n    color = options.maxColor;\n  }\n\n  return color;\n}\n\nfunction createLineCustomizeFunction(pointIndexes, options) {\n  return function () {\n    var color = selectPointColor(void 0, options, this.index, pointIndexes);\n    return color ? {\n      visible: true,\n      border: {\n        color: color\n      }\n    } : {};\n  };\n}\n\nfunction createBarCustomizeFunction(pointIndexes, options, winlossData) {\n  return function () {\n    var index = this.index;\n    var isWinloss = \"winloss\" === options.type;\n    var target = isWinloss ? options.winlossThreshold : 0;\n    var value = isWinloss ? winlossData[index][options.valueField] : this.value;\n    var positiveColor = isWinloss ? options.winColor : options.barPositiveColor;\n    var negativeColor = isWinloss ? options.lossColor : options.barNegativeColor;\n    return {\n      color: selectPointColor(value >= target ? positiveColor : negativeColor, options, index, pointIndexes)\n    };\n  };\n}\n\nvar dxSparkline = BaseSparkline.inherit({\n  _rootClassPrefix: \"dxsl\",\n  _rootClass: \"dxsl-sparkline\",\n  _themeSection: \"sparkline\",\n  _defaultSize: {\n    width: DEFAULT_CANVAS_WIDTH,\n    height: DEFAULT_CANVAS_HEIGHT\n  },\n  _initCore: function () {\n    this.callBase();\n\n    this._createSeries();\n  },\n  _initialChanges: [\"DATA_SOURCE\"],\n  _dataSourceChangedHandler: function () {\n    this._requestChange([\"UPDATE\"]);\n  },\n  _updateWidgetElements: function () {\n    this._updateSeries();\n\n    this.callBase();\n  },\n  _disposeWidgetElements: function () {\n    this._series && this._series.dispose();\n    this._series = this._seriesGroup = this._seriesLabelGroup = null;\n  },\n  _cleanWidgetElements: function () {\n    this._seriesGroup.remove();\n\n    this._seriesLabelGroup.remove();\n\n    this._seriesGroup.clear();\n\n    this._seriesLabelGroup.clear();\n\n    this._series.removeGraphicElements();\n\n    this._series.removePointElements();\n\n    this._series.removeBordersGroup();\n  },\n  _drawWidgetElements: function () {\n    if (this._dataIsLoaded()) {\n      this._drawSeries();\n\n      this._drawn();\n    }\n  },\n  _getCorrectCanvas: function () {\n    var options = this._allOptions;\n    var canvas = this._canvas;\n    var halfPointSize = options.pointSize && Math.ceil(options.pointSize / 2) + DEFAULT_POINT_BORDER;\n    var type = options.type;\n\n    if (\"bar\" !== type && \"winloss\" !== type && (options.showFirstLast || options.showMinMax)) {\n      return {\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left + halfPointSize,\n        right: canvas.right + halfPointSize,\n        top: canvas.top + halfPointSize,\n        bottom: canvas.bottom + halfPointSize\n      };\n    }\n\n    return canvas;\n  },\n  _prepareOptions: function () {\n    this._allOptions = this.callBase();\n    this._allOptions.type = _normalizeEnum(this._allOptions.type);\n\n    if (!ALLOWED_TYPES[this._allOptions.type]) {\n      this._allOptions.type = \"line\";\n    }\n  },\n  _createHtmlElements: function () {\n    this._seriesGroup = this._renderer.g().attr({\n      class: \"dxsl-series\"\n    });\n    this._seriesLabelGroup = this._renderer.g().attr({\n      class: \"dxsl-series-labels\"\n    });\n  },\n  _createSeries: function () {\n    this._series = new Series({\n      renderer: this._renderer,\n      seriesGroup: this._seriesGroup,\n      labelsGroup: this._seriesLabelGroup,\n      argumentAxis: this._argumentAxis,\n      valueAxis: this._valueAxis\n    }, {\n      widgetType: \"chart\",\n      type: \"line\"\n    });\n  },\n  _updateSeries: function () {\n    var singleSeries = this._series;\n\n    this._prepareDataSource();\n\n    var seriesOptions = this._prepareSeriesOptions();\n\n    singleSeries.updateOptions(seriesOptions);\n    var groupsData = {\n      groups: [{\n        series: [singleSeries]\n      }]\n    };\n    groupsData.argumentOptions = {\n      type: \"bar\" === seriesOptions.type ? \"discrete\" : void 0\n    };\n    this._simpleDataSource = validateData(this._simpleDataSource, groupsData, this._incidentOccurred, {\n      checkTypeForAllData: false,\n      convertToAxisDataType: true,\n      sortingMethod: true\n    })[singleSeries.getArgumentField()];\n    seriesOptions.customizePoint = this._getCustomizeFunction();\n    singleSeries.updateData(this._simpleDataSource);\n    singleSeries.createPoints();\n    this._groupsDataCategories = groupsData.categories;\n  },\n  _optionChangesMap: {\n    dataSource: \"DATA_SOURCE\"\n  },\n  _optionChangesOrder: [\"DATA_SOURCE\"],\n  _change_DATA_SOURCE: function () {\n    this._updateDataSource();\n  },\n  _prepareDataSource: function () {\n    var options = this._allOptions;\n    var argField = options.argumentField;\n    var valField = options.valueField;\n    var dataSource = this._dataSourceItems() || [];\n    var data = parseNumericDataSource(dataSource, argField, valField, this.option(\"ignoreEmptyPoints\"));\n\n    if (\"winloss\" === options.type) {\n      this._winlossDataSource = data;\n      this._simpleDataSource = parseWinlossDataSource(data, argField, valField, options.winlossThreshold);\n    } else {\n      this._simpleDataSource = data;\n    }\n  },\n  _prepareSeriesOptions: function () {\n    var options = this._allOptions;\n    var type = \"winloss\" === options.type ? \"bar\" : options.type;\n    return {\n      visible: true,\n      argumentField: options.argumentField,\n      valueField: options.valueField,\n      color: options.lineColor,\n      width: options.lineWidth,\n      widgetType: \"chart\",\n      type: type,\n      opacity: -1 !== type.indexOf(\"area\") ? this._allOptions.areaOpacity : void 0,\n      point: {\n        size: options.pointSize,\n        symbol: options.pointSymbol,\n        border: {\n          visible: true,\n          width: DEFAULT_POINT_BORDER\n        },\n        color: options.pointColor,\n        visible: false,\n        hoverStyle: {\n          border: {}\n        },\n        selectionStyle: {\n          border: {}\n        }\n      },\n      border: {\n        color: options.lineColor,\n        width: options.lineWidth,\n        visible: \"bar\" !== type\n      }\n    };\n  },\n  _getCustomizeFunction: function () {\n    var options = this._allOptions;\n    var dataSource = this._winlossDataSource || this._simpleDataSource;\n\n    var drawnPointIndexes = this._getExtremumPointsIndexes(dataSource);\n\n    var customizeFunction;\n\n    if (\"winloss\" === options.type || \"bar\" === options.type) {\n      customizeFunction = createBarCustomizeFunction(drawnPointIndexes, options, this._winlossDataSource);\n    } else {\n      customizeFunction = createLineCustomizeFunction(drawnPointIndexes, options);\n    }\n\n    return customizeFunction;\n  },\n  _getExtremumPointsIndexes: function (data) {\n    var options = this._allOptions;\n    var lastIndex = data.length - 1;\n    var indexes = {};\n    this._minMaxIndexes = findMinMax(data, options.valueField);\n\n    if (options.showFirstLast) {\n      indexes.first = 0;\n      indexes.last = lastIndex;\n    }\n\n    if (options.showMinMax) {\n      indexes.min = this._minMaxIndexes.minIndexes;\n      indexes.max = this._minMaxIndexes.maxIndexes;\n    }\n\n    return indexes;\n  },\n  _getStick: function () {\n    return {\n      stick: \"bar\" !== this._series.type\n    };\n  },\n  _updateRange: function () {\n    var series = this._series;\n    var type = series.type;\n    var isBarType = \"bar\" === type;\n    var isWinlossType = \"winloss\" === type;\n    var rangeData = series.getRangeData();\n    var minValue = this._allOptions.minValue;\n\n    var hasMinY = _isDefined(minValue) && _isFinite(minValue);\n\n    var maxValue = this._allOptions.maxValue;\n\n    var hasMaxY = _isDefined(maxValue) && _isFinite(maxValue);\n\n    var argCoef;\n    var valCoef = .15 * (rangeData.val.max - rangeData.val.min);\n\n    if (isBarType || isWinlossType || \"area\" === type) {\n      if (0 !== rangeData.val.min) {\n        rangeData.val.min -= valCoef;\n      }\n\n      if (0 !== rangeData.val.max) {\n        rangeData.val.max += valCoef;\n      }\n    } else {\n      rangeData.val.min -= valCoef;\n      rangeData.val.max += valCoef;\n    }\n\n    if (hasMinY || hasMaxY) {\n      if (hasMinY && hasMaxY) {\n        rangeData.val.minVisible = _min(minValue, maxValue);\n        rangeData.val.maxVisible = _max(minValue, maxValue);\n      } else {\n        rangeData.val.minVisible = hasMinY ? _Number(minValue) : void 0;\n        rangeData.val.maxVisible = hasMaxY ? _Number(maxValue) : void 0;\n      }\n\n      if (isWinlossType) {\n        rangeData.val.minVisible = hasMinY ? _max(rangeData.val.minVisible, -1) : void 0;\n        rangeData.val.maxVisible = hasMaxY ? _min(rangeData.val.maxVisible, 1) : void 0;\n      }\n    }\n\n    if (series.getPoints().length > 1) {\n      if (isBarType) {\n        argCoef = .1 * (rangeData.arg.max - rangeData.arg.min);\n        rangeData.arg.min = rangeData.arg.min - argCoef;\n        rangeData.arg.max = rangeData.arg.max + argCoef;\n      }\n    }\n\n    rangeData.arg.categories = this._groupsDataCategories;\n    this._ranges = rangeData;\n  },\n  _getBarWidth: function (pointsCount) {\n    var canvas = this._canvas;\n    var intervalWidth = pointsCount * DEFAULT_BAR_INTERVAL;\n    var rangeWidth = canvas.width - canvas.left - canvas.right - intervalWidth;\n\n    var width = _round(rangeWidth / pointsCount);\n\n    if (width < MIN_BAR_WIDTH) {\n      width = MIN_BAR_WIDTH;\n    }\n\n    if (width > MAX_BAR_WIDTH) {\n      width = MAX_BAR_WIDTH;\n    }\n\n    return width;\n  },\n  _correctPoints: function () {\n    var seriesType = this._allOptions.type;\n\n    var seriesPoints = this._series.getPoints();\n\n    var pointsLength = seriesPoints.length;\n    var barWidth;\n    var i;\n\n    if (\"bar\" === seriesType || \"winloss\" === seriesType) {\n      barWidth = this._getBarWidth(pointsLength);\n\n      for (i = 0; i < pointsLength; i++) {\n        seriesPoints[i].correctCoordinates({\n          width: barWidth,\n          offset: 0\n        });\n      }\n    }\n  },\n  _drawSeries: function () {\n    if (this._simpleDataSource.length > 0) {\n      this._correctPoints();\n\n      this._series.draw();\n\n      this._seriesGroup.append(this._renderer.root);\n    }\n  },\n  _isTooltipEnabled: function () {\n    return !!this._simpleDataSource.length;\n  },\n  _getTooltipData: function () {\n    var options = this._allOptions;\n    var dataSource = this._winlossDataSource || this._simpleDataSource;\n    var tooltip = this._tooltip;\n\n    if (0 === dataSource.length) {\n      return {};\n    }\n\n    var minMax = this._minMaxIndexes;\n    var valueField = options.valueField;\n    var first = dataSource[0][valueField];\n    var last = dataSource[dataSource.length - 1][valueField];\n    var min = _isDefined(minMax.minIndexes[0]) ? dataSource[minMax.minIndexes[0]][valueField] : first;\n    var max = _isDefined(minMax.maxIndexes[0]) ? dataSource[minMax.maxIndexes[0]][valueField] : first;\n    var formattedFirst = tooltip.formatValue(first);\n    var formattedLast = tooltip.formatValue(last);\n    var formattedMin = tooltip.formatValue(min);\n    var formattedMax = tooltip.formatValue(max);\n    var customizeObject = {\n      firstValue: formattedFirst,\n      lastValue: formattedLast,\n      minValue: formattedMin,\n      maxValue: formattedMax,\n      originalFirstValue: first,\n      originalLastValue: last,\n      originalMinValue: min,\n      originalMaxValue: max,\n      valueText: [\"Start:\", formattedFirst, \"End:\", formattedLast, \"Min:\", formattedMin, \"Max:\", formattedMax]\n    };\n\n    if (\"winloss\" === options.type) {\n      customizeObject.originalThresholdValue = options.winlossThreshold;\n      customizeObject.thresholdValue = tooltip.formatValue(options.winlossThreshold);\n    }\n\n    return customizeObject;\n  }\n});\n\n_map([\"lineColor\", \"lineWidth\", \"areaOpacity\", \"minColor\", \"maxColor\", \"barPositiveColor\", \"barNegativeColor\", \"winColor\", \"lessColor\", \"firstLastColor\", \"pointSymbol\", \"pointColor\", \"pointSize\", \"type\", \"argumentField\", \"valueField\", \"winlossThreshold\", \"showFirstLast\", \"showMinMax\", \"ignoreEmptyPoints\", \"minValue\", \"maxValue\"], function (name) {\n  dxSparkline.prototype._optionChangesMap[name] = \"OPTIONS\";\n});\n\nimport componentRegistrator from \"../../core/component_registrator\";\ncomponentRegistrator(\"dxSparkline\", dxSparkline);\nexport default dxSparkline;\nimport { plugin } from \"../core/data_source\";\ndxSparkline.addPlugin(plugin);","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/viz/sparklines/sparkline.js"],"names":["BaseSparkline","validateData","Series","MIN_BAR_WIDTH","MAX_BAR_WIDTH","DEFAULT_BAR_INTERVAL","DEFAULT_CANVAS_WIDTH","DEFAULT_CANVAS_HEIGHT","DEFAULT_POINT_BORDER","ALLOWED_TYPES","line","spline","stepline","area","steparea","splinearea","bar","winloss","_math","Math","_abs","abs","_round","round","_max","max","_min","min","_isFinite","isFinite","map","_map","normalizeEnum","_normalizeEnum","isDefined","_isDefined","_Number","Number","_String","String","findMinMax","data","valField","firstItem","firstValue","minIndexes","maxIndexes","dataLength","length","value","i","push","parseNumericDataSource","argField","ignoreEmptyPoints","dataItem","index","item","isDataNumber","parseWinlossDataSource","target","selectPointColor","color","options","pointIndexes","first","last","firstLastColor","indexOf","minColor","maxColor","createLineCustomizeFunction","visible","border","createBarCustomizeFunction","winlossData","isWinloss","type","winlossThreshold","valueField","positiveColor","winColor","barPositiveColor","negativeColor","lossColor","barNegativeColor","dxSparkline","inherit","_rootClassPrefix","_rootClass","_themeSection","_defaultSize","width","height","_initCore","callBase","_createSeries","_initialChanges","_dataSourceChangedHandler","_requestChange","_updateWidgetElements","_updateSeries","_disposeWidgetElements","_series","dispose","_seriesGroup","_seriesLabelGroup","_cleanWidgetElements","remove","clear","removeGraphicElements","removePointElements","removeBordersGroup","_drawWidgetElements","_dataIsLoaded","_drawSeries","_drawn","_getCorrectCanvas","_allOptions","canvas","_canvas","halfPointSize","pointSize","ceil","showFirstLast","showMinMax","left","right","top","bottom","_prepareOptions","_createHtmlElements","_renderer","g","attr","class","renderer","seriesGroup","labelsGroup","argumentAxis","_argumentAxis","valueAxis","_valueAxis","widgetType","singleSeries","_prepareDataSource","seriesOptions","_prepareSeriesOptions","updateOptions","groupsData","groups","series","argumentOptions","_simpleDataSource","_incidentOccurred","checkTypeForAllData","convertToAxisDataType","sortingMethod","getArgumentField","customizePoint","_getCustomizeFunction","updateData","createPoints","_groupsDataCategories","categories","_optionChangesMap","dataSource","_optionChangesOrder","_change_DATA_SOURCE","_updateDataSource","argumentField","_dataSourceItems","option","_winlossDataSource","lineColor","lineWidth","opacity","areaOpacity","point","size","symbol","pointSymbol","pointColor","hoverStyle","selectionStyle","drawnPointIndexes","_getExtremumPointsIndexes","customizeFunction","lastIndex","indexes","_minMaxIndexes","_getStick","stick","_updateRange","isBarType","isWinlossType","rangeData","getRangeData","minValue","hasMinY","maxValue","hasMaxY","argCoef","valCoef","val","minVisible","maxVisible","getPoints","arg","_ranges","_getBarWidth","pointsCount","intervalWidth","rangeWidth","_correctPoints","seriesType","seriesPoints","pointsLength","barWidth","correctCoordinates","offset","draw","append","root","_isTooltipEnabled","_getTooltipData","tooltip","_tooltip","minMax","formattedFirst","formatValue","formattedLast","formattedMin","formattedMax","customizeObject","lastValue","originalFirstValue","originalLastValue","originalMinValue","originalMaxValue","valueText","originalThresholdValue","thresholdValue","name","prototype","componentRegistrator","plugin","addPlugin"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/viz/sparklines/sparkline.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseSparkline from \"./base_sparkline\";\r\nimport {\r\n    validateData\r\n} from \"../components/data_validator\";\r\nimport {\r\n    Series\r\n} from \"../series/base_series\";\r\nvar MIN_BAR_WIDTH = 1;\r\nvar MAX_BAR_WIDTH = 50;\r\nvar DEFAULT_BAR_INTERVAL = 4;\r\nvar DEFAULT_CANVAS_WIDTH = 250;\r\nvar DEFAULT_CANVAS_HEIGHT = 30;\r\nvar DEFAULT_POINT_BORDER = 2;\r\nvar ALLOWED_TYPES = {\r\n    line: true,\r\n    spline: true,\r\n    stepline: true,\r\n    area: true,\r\n    steparea: true,\r\n    splinearea: true,\r\n    bar: true,\r\n    winloss: true\r\n};\r\nvar _math = Math;\r\nvar _abs = _math.abs;\r\nvar _round = _math.round;\r\nvar _max = _math.max;\r\nvar _min = _math.min;\r\nvar _isFinite = isFinite;\r\nimport {\r\n    map as _map,\r\n    normalizeEnum as _normalizeEnum\r\n} from \"../core/utils\";\r\nimport {\r\n    isDefined as _isDefined\r\n} from \"../../core/utils/type\";\r\nvar _Number = Number;\r\nvar _String = String;\r\n\r\nfunction findMinMax(data, valField) {\r\n    var firstItem = data[0] || {};\r\n    var firstValue = firstItem[valField] || 0;\r\n    var min = firstValue;\r\n    var max = firstValue;\r\n    var minIndexes = [0];\r\n    var maxIndexes = [0];\r\n    var dataLength = data.length;\r\n    var value;\r\n    var i;\r\n    for (i = 1; i < dataLength; i++) {\r\n        value = data[i][valField];\r\n        if (value < min) {\r\n            min = value;\r\n            minIndexes = [i]\r\n        } else if (value === min) {\r\n            minIndexes.push(i)\r\n        }\r\n        if (value > max) {\r\n            max = value;\r\n            maxIndexes = [i]\r\n        } else if (value === max) {\r\n            maxIndexes.push(i)\r\n        }\r\n    }\r\n    if (max === min) {\r\n        minIndexes = maxIndexes = []\r\n    }\r\n    return {\r\n        minIndexes: minIndexes,\r\n        maxIndexes: maxIndexes\r\n    }\r\n}\r\n\r\nfunction parseNumericDataSource(data, argField, valField, ignoreEmptyPoints) {\r\n    return _map(data, (function(dataItem, index) {\r\n        var item = null;\r\n        var isDataNumber;\r\n        var value;\r\n        if (void 0 !== dataItem) {\r\n            item = {};\r\n            isDataNumber = _isFinite(dataItem);\r\n            item[argField] = isDataNumber ? _String(index) : dataItem[argField];\r\n            value = isDataNumber ? dataItem : dataItem[valField];\r\n            item[valField] = null === value ? ignoreEmptyPoints ? void 0 : value : _Number(value);\r\n            item = void 0 !== item[argField] && void 0 !== item[valField] ? item : null\r\n        }\r\n        return item\r\n    }))\r\n}\r\n\r\nfunction parseWinlossDataSource(data, argField, valField, target) {\r\n    return _map(data, (function(dataItem) {\r\n        var item = {};\r\n        item[argField] = dataItem[argField];\r\n        if (_abs(dataItem[valField] - target) < 1e-4) {\r\n            item[valField] = 0\r\n        } else if (dataItem[valField] > target) {\r\n            item[valField] = 1\r\n        } else {\r\n            item[valField] = -1\r\n        }\r\n        return item\r\n    }))\r\n}\r\n\r\nfunction selectPointColor(color, options, index, pointIndexes) {\r\n    if (index === pointIndexes.first || index === pointIndexes.last) {\r\n        color = options.firstLastColor\r\n    }\r\n    if ((pointIndexes.min || []).indexOf(index) >= 0) {\r\n        color = options.minColor\r\n    }\r\n    if ((pointIndexes.max || []).indexOf(index) >= 0) {\r\n        color = options.maxColor\r\n    }\r\n    return color\r\n}\r\n\r\nfunction createLineCustomizeFunction(pointIndexes, options) {\r\n    return function() {\r\n        var color = selectPointColor(void 0, options, this.index, pointIndexes);\r\n        return color ? {\r\n            visible: true,\r\n            border: {\r\n                color: color\r\n            }\r\n        } : {}\r\n    }\r\n}\r\n\r\nfunction createBarCustomizeFunction(pointIndexes, options, winlossData) {\r\n    return function() {\r\n        var index = this.index;\r\n        var isWinloss = \"winloss\" === options.type;\r\n        var target = isWinloss ? options.winlossThreshold : 0;\r\n        var value = isWinloss ? winlossData[index][options.valueField] : this.value;\r\n        var positiveColor = isWinloss ? options.winColor : options.barPositiveColor;\r\n        var negativeColor = isWinloss ? options.lossColor : options.barNegativeColor;\r\n        return {\r\n            color: selectPointColor(value >= target ? positiveColor : negativeColor, options, index, pointIndexes)\r\n        }\r\n    }\r\n}\r\nvar dxSparkline = BaseSparkline.inherit({\r\n    _rootClassPrefix: \"dxsl\",\r\n    _rootClass: \"dxsl-sparkline\",\r\n    _themeSection: \"sparkline\",\r\n    _defaultSize: {\r\n        width: DEFAULT_CANVAS_WIDTH,\r\n        height: DEFAULT_CANVAS_HEIGHT\r\n    },\r\n    _initCore: function() {\r\n        this.callBase();\r\n        this._createSeries()\r\n    },\r\n    _initialChanges: [\"DATA_SOURCE\"],\r\n    _dataSourceChangedHandler: function() {\r\n        this._requestChange([\"UPDATE\"])\r\n    },\r\n    _updateWidgetElements: function() {\r\n        this._updateSeries();\r\n        this.callBase()\r\n    },\r\n    _disposeWidgetElements: function() {\r\n        this._series && this._series.dispose();\r\n        this._series = this._seriesGroup = this._seriesLabelGroup = null\r\n    },\r\n    _cleanWidgetElements: function() {\r\n        this._seriesGroup.remove();\r\n        this._seriesLabelGroup.remove();\r\n        this._seriesGroup.clear();\r\n        this._seriesLabelGroup.clear();\r\n        this._series.removeGraphicElements();\r\n        this._series.removePointElements();\r\n        this._series.removeBordersGroup()\r\n    },\r\n    _drawWidgetElements: function() {\r\n        if (this._dataIsLoaded()) {\r\n            this._drawSeries();\r\n            this._drawn()\r\n        }\r\n    },\r\n    _getCorrectCanvas: function() {\r\n        var options = this._allOptions;\r\n        var canvas = this._canvas;\r\n        var halfPointSize = options.pointSize && Math.ceil(options.pointSize / 2) + DEFAULT_POINT_BORDER;\r\n        var type = options.type;\r\n        if (\"bar\" !== type && \"winloss\" !== type && (options.showFirstLast || options.showMinMax)) {\r\n            return {\r\n                width: canvas.width,\r\n                height: canvas.height,\r\n                left: canvas.left + halfPointSize,\r\n                right: canvas.right + halfPointSize,\r\n                top: canvas.top + halfPointSize,\r\n                bottom: canvas.bottom + halfPointSize\r\n            }\r\n        }\r\n        return canvas\r\n    },\r\n    _prepareOptions: function() {\r\n        this._allOptions = this.callBase();\r\n        this._allOptions.type = _normalizeEnum(this._allOptions.type);\r\n        if (!ALLOWED_TYPES[this._allOptions.type]) {\r\n            this._allOptions.type = \"line\"\r\n        }\r\n    },\r\n    _createHtmlElements: function() {\r\n        this._seriesGroup = this._renderer.g().attr({\r\n            class: \"dxsl-series\"\r\n        });\r\n        this._seriesLabelGroup = this._renderer.g().attr({\r\n            class: \"dxsl-series-labels\"\r\n        })\r\n    },\r\n    _createSeries: function() {\r\n        this._series = new Series({\r\n            renderer: this._renderer,\r\n            seriesGroup: this._seriesGroup,\r\n            labelsGroup: this._seriesLabelGroup,\r\n            argumentAxis: this._argumentAxis,\r\n            valueAxis: this._valueAxis\r\n        }, {\r\n            widgetType: \"chart\",\r\n            type: \"line\"\r\n        })\r\n    },\r\n    _updateSeries: function() {\r\n        var singleSeries = this._series;\r\n        this._prepareDataSource();\r\n        var seriesOptions = this._prepareSeriesOptions();\r\n        singleSeries.updateOptions(seriesOptions);\r\n        var groupsData = {\r\n            groups: [{\r\n                series: [singleSeries]\r\n            }]\r\n        };\r\n        groupsData.argumentOptions = {\r\n            type: \"bar\" === seriesOptions.type ? \"discrete\" : void 0\r\n        };\r\n        this._simpleDataSource = validateData(this._simpleDataSource, groupsData, this._incidentOccurred, {\r\n            checkTypeForAllData: false,\r\n            convertToAxisDataType: true,\r\n            sortingMethod: true\r\n        })[singleSeries.getArgumentField()];\r\n        seriesOptions.customizePoint = this._getCustomizeFunction();\r\n        singleSeries.updateData(this._simpleDataSource);\r\n        singleSeries.createPoints();\r\n        this._groupsDataCategories = groupsData.categories\r\n    },\r\n    _optionChangesMap: {\r\n        dataSource: \"DATA_SOURCE\"\r\n    },\r\n    _optionChangesOrder: [\"DATA_SOURCE\"],\r\n    _change_DATA_SOURCE: function() {\r\n        this._updateDataSource()\r\n    },\r\n    _prepareDataSource: function() {\r\n        var options = this._allOptions;\r\n        var argField = options.argumentField;\r\n        var valField = options.valueField;\r\n        var dataSource = this._dataSourceItems() || [];\r\n        var data = parseNumericDataSource(dataSource, argField, valField, this.option(\"ignoreEmptyPoints\"));\r\n        if (\"winloss\" === options.type) {\r\n            this._winlossDataSource = data;\r\n            this._simpleDataSource = parseWinlossDataSource(data, argField, valField, options.winlossThreshold)\r\n        } else {\r\n            this._simpleDataSource = data\r\n        }\r\n    },\r\n    _prepareSeriesOptions: function() {\r\n        var options = this._allOptions;\r\n        var type = \"winloss\" === options.type ? \"bar\" : options.type;\r\n        return {\r\n            visible: true,\r\n            argumentField: options.argumentField,\r\n            valueField: options.valueField,\r\n            color: options.lineColor,\r\n            width: options.lineWidth,\r\n            widgetType: \"chart\",\r\n            type: type,\r\n            opacity: -1 !== type.indexOf(\"area\") ? this._allOptions.areaOpacity : void 0,\r\n            point: {\r\n                size: options.pointSize,\r\n                symbol: options.pointSymbol,\r\n                border: {\r\n                    visible: true,\r\n                    width: DEFAULT_POINT_BORDER\r\n                },\r\n                color: options.pointColor,\r\n                visible: false,\r\n                hoverStyle: {\r\n                    border: {}\r\n                },\r\n                selectionStyle: {\r\n                    border: {}\r\n                }\r\n            },\r\n            border: {\r\n                color: options.lineColor,\r\n                width: options.lineWidth,\r\n                visible: \"bar\" !== type\r\n            }\r\n        }\r\n    },\r\n    _getCustomizeFunction: function() {\r\n        var options = this._allOptions;\r\n        var dataSource = this._winlossDataSource || this._simpleDataSource;\r\n        var drawnPointIndexes = this._getExtremumPointsIndexes(dataSource);\r\n        var customizeFunction;\r\n        if (\"winloss\" === options.type || \"bar\" === options.type) {\r\n            customizeFunction = createBarCustomizeFunction(drawnPointIndexes, options, this._winlossDataSource)\r\n        } else {\r\n            customizeFunction = createLineCustomizeFunction(drawnPointIndexes, options)\r\n        }\r\n        return customizeFunction\r\n    },\r\n    _getExtremumPointsIndexes: function(data) {\r\n        var options = this._allOptions;\r\n        var lastIndex = data.length - 1;\r\n        var indexes = {};\r\n        this._minMaxIndexes = findMinMax(data, options.valueField);\r\n        if (options.showFirstLast) {\r\n            indexes.first = 0;\r\n            indexes.last = lastIndex\r\n        }\r\n        if (options.showMinMax) {\r\n            indexes.min = this._minMaxIndexes.minIndexes;\r\n            indexes.max = this._minMaxIndexes.maxIndexes\r\n        }\r\n        return indexes\r\n    },\r\n    _getStick: function() {\r\n        return {\r\n            stick: \"bar\" !== this._series.type\r\n        }\r\n    },\r\n    _updateRange: function() {\r\n        var series = this._series;\r\n        var type = series.type;\r\n        var isBarType = \"bar\" === type;\r\n        var isWinlossType = \"winloss\" === type;\r\n        var rangeData = series.getRangeData();\r\n        var minValue = this._allOptions.minValue;\r\n        var hasMinY = _isDefined(minValue) && _isFinite(minValue);\r\n        var maxValue = this._allOptions.maxValue;\r\n        var hasMaxY = _isDefined(maxValue) && _isFinite(maxValue);\r\n        var argCoef;\r\n        var valCoef = .15 * (rangeData.val.max - rangeData.val.min);\r\n        if (isBarType || isWinlossType || \"area\" === type) {\r\n            if (0 !== rangeData.val.min) {\r\n                rangeData.val.min -= valCoef\r\n            }\r\n            if (0 !== rangeData.val.max) {\r\n                rangeData.val.max += valCoef\r\n            }\r\n        } else {\r\n            rangeData.val.min -= valCoef;\r\n            rangeData.val.max += valCoef\r\n        }\r\n        if (hasMinY || hasMaxY) {\r\n            if (hasMinY && hasMaxY) {\r\n                rangeData.val.minVisible = _min(minValue, maxValue);\r\n                rangeData.val.maxVisible = _max(minValue, maxValue)\r\n            } else {\r\n                rangeData.val.minVisible = hasMinY ? _Number(minValue) : void 0;\r\n                rangeData.val.maxVisible = hasMaxY ? _Number(maxValue) : void 0\r\n            }\r\n            if (isWinlossType) {\r\n                rangeData.val.minVisible = hasMinY ? _max(rangeData.val.minVisible, -1) : void 0;\r\n                rangeData.val.maxVisible = hasMaxY ? _min(rangeData.val.maxVisible, 1) : void 0\r\n            }\r\n        }\r\n        if (series.getPoints().length > 1) {\r\n            if (isBarType) {\r\n                argCoef = .1 * (rangeData.arg.max - rangeData.arg.min);\r\n                rangeData.arg.min = rangeData.arg.min - argCoef;\r\n                rangeData.arg.max = rangeData.arg.max + argCoef\r\n            }\r\n        }\r\n        rangeData.arg.categories = this._groupsDataCategories;\r\n        this._ranges = rangeData\r\n    },\r\n    _getBarWidth: function(pointsCount) {\r\n        var canvas = this._canvas;\r\n        var intervalWidth = pointsCount * DEFAULT_BAR_INTERVAL;\r\n        var rangeWidth = canvas.width - canvas.left - canvas.right - intervalWidth;\r\n        var width = _round(rangeWidth / pointsCount);\r\n        if (width < MIN_BAR_WIDTH) {\r\n            width = MIN_BAR_WIDTH\r\n        }\r\n        if (width > MAX_BAR_WIDTH) {\r\n            width = MAX_BAR_WIDTH\r\n        }\r\n        return width\r\n    },\r\n    _correctPoints: function() {\r\n        var seriesType = this._allOptions.type;\r\n        var seriesPoints = this._series.getPoints();\r\n        var pointsLength = seriesPoints.length;\r\n        var barWidth;\r\n        var i;\r\n        if (\"bar\" === seriesType || \"winloss\" === seriesType) {\r\n            barWidth = this._getBarWidth(pointsLength);\r\n            for (i = 0; i < pointsLength; i++) {\r\n                seriesPoints[i].correctCoordinates({\r\n                    width: barWidth,\r\n                    offset: 0\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _drawSeries: function() {\r\n        if (this._simpleDataSource.length > 0) {\r\n            this._correctPoints();\r\n            this._series.draw();\r\n            this._seriesGroup.append(this._renderer.root)\r\n        }\r\n    },\r\n    _isTooltipEnabled: function() {\r\n        return !!this._simpleDataSource.length\r\n    },\r\n    _getTooltipData: function() {\r\n        var options = this._allOptions;\r\n        var dataSource = this._winlossDataSource || this._simpleDataSource;\r\n        var tooltip = this._tooltip;\r\n        if (0 === dataSource.length) {\r\n            return {}\r\n        }\r\n        var minMax = this._minMaxIndexes;\r\n        var valueField = options.valueField;\r\n        var first = dataSource[0][valueField];\r\n        var last = dataSource[dataSource.length - 1][valueField];\r\n        var min = _isDefined(minMax.minIndexes[0]) ? dataSource[minMax.minIndexes[0]][valueField] : first;\r\n        var max = _isDefined(minMax.maxIndexes[0]) ? dataSource[minMax.maxIndexes[0]][valueField] : first;\r\n        var formattedFirst = tooltip.formatValue(first);\r\n        var formattedLast = tooltip.formatValue(last);\r\n        var formattedMin = tooltip.formatValue(min);\r\n        var formattedMax = tooltip.formatValue(max);\r\n        var customizeObject = {\r\n            firstValue: formattedFirst,\r\n            lastValue: formattedLast,\r\n            minValue: formattedMin,\r\n            maxValue: formattedMax,\r\n            originalFirstValue: first,\r\n            originalLastValue: last,\r\n            originalMinValue: min,\r\n            originalMaxValue: max,\r\n            valueText: [\"Start:\", formattedFirst, \"End:\", formattedLast, \"Min:\", formattedMin, \"Max:\", formattedMax]\r\n        };\r\n        if (\"winloss\" === options.type) {\r\n            customizeObject.originalThresholdValue = options.winlossThreshold;\r\n            customizeObject.thresholdValue = tooltip.formatValue(options.winlossThreshold)\r\n        }\r\n        return customizeObject\r\n    }\r\n});\r\n_map([\"lineColor\", \"lineWidth\", \"areaOpacity\", \"minColor\", \"maxColor\", \"barPositiveColor\", \"barNegativeColor\", \"winColor\", \"lessColor\", \"firstLastColor\", \"pointSymbol\", \"pointColor\", \"pointSize\", \"type\", \"argumentField\", \"valueField\", \"winlossThreshold\", \"showFirstLast\", \"showMinMax\", \"ignoreEmptyPoints\", \"minValue\", \"maxValue\"], (function(name) {\r\n    dxSparkline.prototype._optionChangesMap[name] = \"OPTIONS\"\r\n}));\r\nimport componentRegistrator from \"../../core/component_registrator\";\r\ncomponentRegistrator(\"dxSparkline\", dxSparkline);\r\nexport default dxSparkline;\r\nimport {\r\n    plugin\r\n} from \"../core/data_source\";\r\ndxSparkline.addPlugin(plugin);\r\n"]},"metadata":{},"sourceType":"module"}