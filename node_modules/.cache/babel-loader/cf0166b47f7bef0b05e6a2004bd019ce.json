{"ast":null,"code":"/**\n* DevExpress Analytics (widgets\\expressioneditor\\tools\\_functions.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.insertInFunctionDisplay = exports.resetFunctionDisplay = exports.functionDisplay = void 0;\n\nvar _utils_1 = require(\"../../../serializer/_utils\");\n\nvar _internal_1 = require(\"../../../serializer/_internal\");\n\nvar defaultFunctionDisplay = [{\n  display: 'Aggregate',\n  localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Aggregate',\n  category: 'Aggregate',\n  items: {\n    Avg: [{\n      paramCount: 1,\n      text: '[].Avg()',\n      displayName: 'Avg()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AvgAggregate'\n    }],\n    Count: [{\n      paramCount: 1,\n      text: '[].Count()',\n      displayName: 'Count()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_CountAggregate'\n    }],\n    Exists: [{\n      paramCount: 1,\n      text: '[].Exists()',\n      displayName: 'Exists()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ExistsAggregate'\n    }],\n    Max: [{\n      paramCount: 1,\n      text: '[].Max()',\n      displayName: 'Max()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_MaxAggregate'\n    }],\n    Min: [{\n      paramCount: 1,\n      text: '[].Min()',\n      displayName: 'Min()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_MinAggregate'\n    }],\n    Single: [{\n      paramCount: 1,\n      text: '[].Single()',\n      displayName: 'Single()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_SingleAggregate'\n    }],\n    Sum: [{\n      paramCount: 1,\n      text: '[].Sum()',\n      displayName: 'Sum()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_SumAggregate'\n    }]\n  }\n}, {\n  display: 'Date-Time',\n  localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_DateTime',\n  items: {\n    LocalDateTimeThisYear: [{\n      paramCount: 0,\n      text: 'LocalDateTimeThisYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisYear'\n    }],\n    LocalDateTimeThisMonth: [{\n      paramCount: 0,\n      text: 'LocalDateTimeThisMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisMonth'\n    }],\n    LocalDateTimeLastMonth: [{\n      paramCount: 0,\n      text: 'LocalDateTimeLastMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastMonth'\n    }],\n    LocalDateTimeLastWeek: [{\n      paramCount: 0,\n      text: 'LocalDateTimeLastWeek()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastWeek'\n    }],\n    LocalDateTimeLastYear: [{\n      paramCount: 0,\n      text: 'LocalDateTimeLastYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastYear'\n    }],\n    LocalDateTimeThisWeek: [{\n      paramCount: 0,\n      text: 'LocalDateTimeThisWeek()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisWeek'\n    }],\n    LocalDateTimeYesterday: [{\n      paramCount: 0,\n      text: 'LocalDateTimeYesterday()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeYesterday'\n    }],\n    LocalDateTimeToday: [{\n      paramCount: 0,\n      text: 'LocalDateTimeToday()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeToday'\n    }],\n    LocalDateTimeNow: [{\n      paramCount: 0,\n      text: 'LocalDateTimeNow()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNow'\n    }],\n    LocalDateTimeTomorrow: [{\n      paramCount: 0,\n      text: 'LocalDateTimeTomorrow()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTomorrow'\n    }],\n    LocalDateTimeDayAfterTomorrow: [{\n      paramCount: 0,\n      text: 'LocalDateTimeDayAfterTomorrow()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeDayAfterTomorrow'\n    }],\n    LocalDateTimeNextWeek: [{\n      paramCount: 0,\n      text: 'LocalDateTimeNextWeek()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextWeek'\n    }],\n    LocalDateTimeTwoMonthsAway: [{\n      paramCount: 0,\n      text: 'LocalDateTimeTwoMonthsAway()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoMonthsAway'\n    }],\n    LocalDateTimeTwoYearsAway: [{\n      paramCount: 0,\n      text: 'LocalDateTimeTwoYearsAway()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoYearsAway'\n    }],\n    LocalDateTimeTwoWeeksAway: [{\n      paramCount: 0,\n      text: 'LocalDateTimeTwoWeeksAway()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoWeeksAway'\n    }],\n    LocalDateTimeNextMonth: [{\n      paramCount: 0,\n      text: 'LocalDateTimeNextMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextMonth'\n    }],\n    LocalDateTimeNextYear: [{\n      paramCount: 0,\n      text: 'LocalDateTimeNextYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextYear'\n    }],\n    LocalDateTimeYearBeforeToday: [{\n      paramCount: 0,\n      text: 'LocalDateTimeYearBeforeToday()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeYearBeforeToday'\n    }],\n    InDateRange: [{\n      paramCount: 3,\n      text: 'InDateRange(, , )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_InDateRange'\n    }],\n    IsOutlookIntervalBeyondThisYear: null,\n    IsOutlookIntervalNextWeek: null,\n    IsOutlookIntervalTomorrow: null,\n    IsOutlookIntervalToday: null,\n    IsOutlookIntervalYesterday: null,\n    IsOutlookIntervalLastWeek: null,\n    IsOutlookIntervalPriorThisYear: null,\n    IsLastMonth: [{\n      paramCount: 1,\n      text: 'IsLastMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsLastMonth'\n    }],\n    IsLastYear: [{\n      paramCount: 1,\n      text: 'IsLastYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsLastYear'\n    }],\n    IsNextMonth: [{\n      paramCount: 1,\n      text: 'IsNextMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsNextMonth'\n    }],\n    IsNextYear: [{\n      paramCount: 1,\n      text: 'IsNextYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsNextYear'\n    }],\n    IsThisWeek: [{\n      paramCount: 1,\n      text: 'IsThisWeek()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsThisWeek'\n    }],\n    IsThisMonth: [{\n      paramCount: 1,\n      text: 'IsThisMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsThisMonth'\n    }],\n    IsThisYear: [{\n      paramCount: 1,\n      text: 'IsThisYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsThisYear'\n    }],\n    IsJanuary: [{\n      paramCount: 1,\n      text: 'IsJanuary()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsJanuary'\n    }],\n    IsFebruary: [{\n      paramCount: 1,\n      text: 'IsFebruary()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsFebruary'\n    }],\n    IsMarch: [{\n      paramCount: 1,\n      text: 'IsMarch()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsMarch'\n    }],\n    IsApril: [{\n      paramCount: 1,\n      text: 'IsApril()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsApril'\n    }],\n    IsMay: [{\n      paramCount: 1,\n      text: 'IsMay()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsMay'\n    }],\n    IsJune: [{\n      paramCount: 1,\n      text: 'IsJune()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsJune'\n    }],\n    IsJuly: [{\n      paramCount: 1,\n      text: 'IsJuly()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsJuly'\n    }],\n    IsAugust: [{\n      paramCount: 1,\n      text: 'IsAugust()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsAugust'\n    }],\n    IsSeptember: [{\n      paramCount: 1,\n      text: 'IsSeptember()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsSeptember'\n    }],\n    IsOctober: [{\n      paramCount: 1,\n      text: 'IsOctober()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsOctober'\n    }],\n    IsNovember: [{\n      paramCount: 1,\n      text: 'IsNovember()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsNovember'\n    }],\n    IsDecember: [{\n      paramCount: 1,\n      text: 'IsDecember()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsDecember'\n    }],\n    IsSameDay: [{\n      paramCount: 2,\n      text: 'IsSameDay(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsSameDay'\n    }],\n    IsYearToDate: [{\n      paramCount: 1,\n      text: 'IsYearToDate()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsYearToDate'\n    }],\n    DateDiffTick: [{\n      paramCount: 2,\n      text: 'DateDiffTick(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffTick'\n    }],\n    DateDiffSecond: [{\n      paramCount: 2,\n      text: 'DateDiffSecond(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffSecond'\n    }],\n    DateDiffMilliSecond: [{\n      paramCount: 2,\n      text: 'DateDiffMilliSecond(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMilliSecond'\n    }],\n    DateDiffMinute: [{\n      paramCount: 2,\n      text: 'DateDiffMinute(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMinute'\n    }],\n    DateDiffHour: [{\n      paramCount: 2,\n      text: 'DateDiffHour(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffHour'\n    }],\n    DateDiffDay: [{\n      paramCount: 2,\n      text: 'DateDiffDay(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffDay'\n    }],\n    DateDiffMonth: [{\n      paramCount: 2,\n      text: 'DateDiffMonth(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMonth'\n    }],\n    DateDiffYear: [{\n      paramCount: 2,\n      text: 'DateDiffYear(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffYear'\n    }],\n    GetDate: [{\n      paramCount: 1,\n      text: 'GetDate()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetDate'\n    }],\n    GetMilliSecond: [{\n      paramCount: 1,\n      text: 'GetMilliSecond()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetMilliSecond'\n    }],\n    GetSecond: [{\n      paramCount: 1,\n      text: 'GetSecond()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetSecond'\n    }],\n    GetMinute: [{\n      paramCount: 1,\n      text: 'GetMinute()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetMinute'\n    }],\n    GetHour: [{\n      paramCount: 1,\n      text: 'GetHour()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetHour'\n    }],\n    GetDay: [{\n      paramCount: 1,\n      text: 'GetDay()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetDay'\n    }],\n    GetMonth: [{\n      paramCount: 1,\n      text: 'GetMonth()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetMonth'\n    }],\n    GetYear: [{\n      paramCount: 1,\n      text: 'GetYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetYear'\n    }],\n    GetDayOfWeek: [{\n      paramCount: 1,\n      text: 'GetDayOfWeek()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetDayOfWeek'\n    }],\n    GetDayOfYear: [{\n      paramCount: 1,\n      text: 'GetDayOfYear()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetDayOfYear'\n    }],\n    GetTimeOfDay: [{\n      paramCount: 1,\n      text: 'GetTimeOfDay()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_GetTimeOfDay'\n    }],\n    Now: [{\n      paramCount: 0,\n      text: 'Now()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Now'\n    }],\n    UtcNow: [{\n      paramCount: 0,\n      text: 'UtcNow()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_UtcNow'\n    }],\n    Today: [{\n      paramCount: 0,\n      text: 'Today()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Today'\n    }],\n    AddTimeSpan: [{\n      paramCount: 2,\n      text: 'AddTimeSpan(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddTimeSpan'\n    }],\n    AddTicks: [{\n      paramCount: 2,\n      text: 'AddTicks(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddTicks'\n    }],\n    AddMilliSeconds: [{\n      paramCount: 2,\n      text: 'AddMilliSeconds(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddMilliSeconds'\n    }],\n    AddSeconds: [{\n      paramCount: 2,\n      text: 'AddSeconds(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddSeconds'\n    }],\n    AddMinutes: [{\n      paramCount: 2,\n      text: 'AddMinutes(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddMinutes'\n    }],\n    AddHours: [{\n      paramCount: 2,\n      text: 'AddHours(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddHours'\n    }],\n    AddDays: [{\n      paramCount: 2,\n      text: 'AddDays(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddDays'\n    }],\n    AddMonths: [{\n      paramCount: 2,\n      text: 'AddMonths(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddMonths'\n    }],\n    AddYears: [{\n      paramCount: 2,\n      text: 'AddYears(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_AddYears'\n    }]\n  }\n}, {\n  display: 'Logical',\n  localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Logical',\n  items: {\n    Iif: [{\n      paramCount: 3,\n      text: 'Iif(, , )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Iif'\n    }],\n    InRange: [{\n      paramCount: 3,\n      text: 'InRange(, , )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_InRange'\n    }],\n    IsNull: [{\n      paramCount: 1,\n      text: 'IsNull()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsNull'\n    }],\n    IsNullOrEmpty: [{\n      paramCount: 1,\n      text: 'IsNullOrEmpty()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_IsNullOrEmpty'\n    }]\n  }\n}, {\n  display: 'Math',\n  localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Math',\n  items: {\n    Abs: [{\n      paramCount: 1,\n      text: 'Abs()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Abs'\n    }],\n    Sqr: [{\n      paramCount: 1,\n      text: 'Sqr()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Sqr'\n    }],\n    Cos: [{\n      paramCount: 1,\n      text: 'Cos()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Cos'\n    }],\n    Sin: [{\n      paramCount: 1,\n      text: 'Sin()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Sin'\n    }],\n    Atn: [{\n      paramCount: 1,\n      text: 'Atn()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Atn'\n    }],\n    Exp: [{\n      paramCount: 1,\n      text: 'Exp()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Exp'\n    }],\n    Log: [{\n      paramCount: 1,\n      text: 'Log()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Log'\n    }, {\n      paramCount: 2,\n      text: 'Log(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Log_2'\n    }],\n    Rnd: [{\n      paramCount: 0,\n      text: 'Rnd()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Rnd'\n    }],\n    Tan: [{\n      paramCount: 1,\n      text: 'Tan()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Tan'\n    }],\n    Power: [{\n      paramCount: 2,\n      text: 'Power(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Power'\n    }],\n    Sign: [{\n      paramCount: 1,\n      text: 'Sign()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Sign'\n    }],\n    Round: [{\n      paramCount: 1,\n      text: 'Round()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Round'\n    }, {\n      paramCount: 2,\n      text: 'Round(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Round_2'\n    }],\n    Ceiling: [{\n      paramCount: 1,\n      text: 'Ceiling()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Ceiling'\n    }],\n    Floor: [{\n      paramCount: 1,\n      text: 'Floor()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Floor'\n    }],\n    Max: [{\n      paramCount: 2,\n      text: 'Max(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Max'\n    }],\n    Min: [{\n      paramCount: 2,\n      text: 'Min(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Min'\n    }],\n    Acos: [{\n      paramCount: 1,\n      text: 'Acos()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Acos'\n    }],\n    Asin: [{\n      paramCount: 1,\n      text: 'Asin()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Asin'\n    }],\n    Atn2: [{\n      paramCount: 2,\n      text: 'Atn2(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Atn2'\n    }],\n    BigMul: [{\n      paramCount: 2,\n      text: 'BigMul(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_BigMul'\n    }],\n    Cosh: [{\n      paramCount: 1,\n      text: 'Cosh()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Cosh'\n    }],\n    Log10: [{\n      paramCount: 1,\n      text: 'Log10()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Log10'\n    }],\n    Sinh: [{\n      paramCount: 1,\n      text: 'Sinh()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Sinh'\n    }],\n    Tanh: [{\n      paramCount: 1,\n      text: 'Tanh()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Tanh'\n    }],\n    ToInt: [{\n      paramCount: 1,\n      text: 'ToInt()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ToInt'\n    }],\n    ToLong: [{\n      paramCount: 1,\n      text: 'ToLong()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ToLong'\n    }],\n    ToFloat: [{\n      paramCount: 1,\n      text: 'ToFloat()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ToFloat'\n    }],\n    ToDouble: [{\n      paramCount: 1,\n      text: 'ToDouble()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ToDouble'\n    }],\n    ToDecimal: [{\n      paramCount: 1,\n      text: 'ToDecimal()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ToDecimal'\n    }]\n  }\n}, {\n  display: 'String',\n  localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Text',\n  items: {\n    Trim: [{\n      paramCount: 1,\n      text: 'Trim()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Trim'\n    }],\n    Len: [{\n      paramCount: 1,\n      text: 'Len()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Len'\n    }],\n    Substring: [{\n      paramCount: 3,\n      text: \"Substring('', , )\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Substring_3'\n    }, {\n      paramCount: 2,\n      text: \"Substring('', )\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Substring'\n    }],\n    Upper: [{\n      paramCount: 1,\n      text: 'Upper()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Upper'\n    }],\n    Lower: [{\n      paramCount: 1,\n      text: 'Lower()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Lower'\n    }],\n    Concat: [{\n      paramCount: Infinity,\n      text: 'Concat(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Concat'\n    }],\n    Ascii: [{\n      paramCount: 1,\n      text: \"Ascii('')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Ascii'\n    }],\n    Char: [{\n      paramCount: 1,\n      text: 'Char()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Char'\n    }],\n    ToStr: [{\n      paramCount: 1,\n      text: 'ToStr()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_ToStr'\n    }],\n    Replace: [{\n      paramCount: 3,\n      text: \"Replace('','', '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Replace'\n    }],\n    Reverse: [{\n      paramCount: 1,\n      text: \"Reverse('')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Reverse'\n    }],\n    Insert: [{\n      paramCount: 3,\n      text: \"Insert('', , '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Insert'\n    }],\n    CharIndex: [{\n      paramCount: 2,\n      text: \"CharIndex('','')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_CharIndex'\n    }, {\n      paramCount: 3,\n      text: \"CharIndex('','', )\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_CharIndex_3'\n    }],\n    Remove: [{\n      paramCount: 2,\n      text: \"Remove('', )\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Remove'\n    }, {\n      paramCount: 3,\n      text: \"Remove('', , )\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Remove_3'\n    }],\n    PadLeft: [{\n      paramCount: 2,\n      text: 'PadLeft(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_PadLeft'\n    }, {\n      paramCount: 3,\n      text: \"PadLeft(, , '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_PadLeft_3'\n    }],\n    PadRight: [{\n      paramCount: 2,\n      text: 'PadRight(, )',\n      descriptionStringId: 'ExpressionEditorStringId.Function_PadRight'\n    }, {\n      paramCount: 3,\n      text: \"PadRight(, , '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_PadRight_3'\n    }],\n    StartsWith: [{\n      paramCount: 2,\n      text: \"StartsWith('', '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_StartsWith'\n    }],\n    EndsWith: [{\n      paramCount: 2,\n      text: \"EndsWith('', '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_EndsWith'\n    }],\n    Contains: [{\n      paramCount: 0,\n      text: \"Contains('', '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Contains'\n    }],\n    Join: [{\n      paramCount: 1,\n      text: 'Join()',\n      descriptionStringId: 'ExpressionEditorStringId.Function_Join'\n    }, {\n      paramCount: 2,\n      text: \"Join(, '')\",\n      descriptionStringId: 'ExpressionEditorStringId.Function_Join_2'\n    }]\n  }\n}];\nexports.functionDisplay = _internal_1.createGlobalModuleVariableFunc(defaultFunctionDisplay);\n\nvar resetFunctionDisplay = function () {\n  return exports.functionDisplay(defaultFunctionDisplay);\n};\n\nexports.resetFunctionDisplay = resetFunctionDisplay;\n\nfunction insertInFunctionDisplay(addins) {\n  var functions = [];\n\n  if (Array.isArray(addins)) {\n    functions = __spreadArray([], exports.functionDisplay());\n    addins.forEach(function (addin) {\n      var func = functions.filter(function (x) {\n        return x.display === addin.display;\n      })[0];\n\n      if (!!func) {\n        func.items = __assign(__assign({}, func.items), addin.items);\n      } else {\n        functions.push(addin);\n      }\n    });\n  } else {\n    exports.functionDisplay().forEach(function (cat) {\n      var ext = addins[cat.display];\n\n      var items = _utils_1.extend({}, cat.items, ext);\n\n      if (!Object.keys(items).length) return;\n      functions.push(ext ? {\n        display: cat.display,\n        category: cat.category,\n        localizationId: cat.localizationId,\n        items: items\n      } : cat);\n    });\n  }\n\n  return functions;\n}\n\nexports.insertInFunctionDisplay = insertInFunctionDisplay;","map":{"version":3,"sources":["/Users/kevinrabari/Desktop/Georgian College Work/1005_ Mobile Web Application/Assignment3/node_modules/@devexpress/analytics-core/widgets/expressioneditor/tools/_functions.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","il","j","defineProperty","exports","value","insertInFunctionDisplay","resetFunctionDisplay","functionDisplay","_utils_1","require","_internal_1","defaultFunctionDisplay","display","localizationId","category","items","Avg","paramCount","text","displayName","descriptionStringId","Count","Exists","Max","Min","Single","Sum","LocalDateTimeThisYear","LocalDateTimeThisMonth","LocalDateTimeLastMonth","LocalDateTimeLastWeek","LocalDateTimeLastYear","LocalDateTimeThisWeek","LocalDateTimeYesterday","LocalDateTimeToday","LocalDateTimeNow","LocalDateTimeTomorrow","LocalDateTimeDayAfterTomorrow","LocalDateTimeNextWeek","LocalDateTimeTwoMonthsAway","LocalDateTimeTwoYearsAway","LocalDateTimeTwoWeeksAway","LocalDateTimeNextMonth","LocalDateTimeNextYear","LocalDateTimeYearBeforeToday","InDateRange","IsOutlookIntervalBeyondThisYear","IsOutlookIntervalNextWeek","IsOutlookIntervalTomorrow","IsOutlookIntervalToday","IsOutlookIntervalYesterday","IsOutlookIntervalLastWeek","IsOutlookIntervalPriorThisYear","IsLastMonth","IsLastYear","IsNextMonth","IsNextYear","IsThisWeek","IsThisMonth","IsThisYear","IsJanuary","IsFebruary","IsMarch","IsApril","IsMay","IsJune","IsJuly","IsAugust","IsSeptember","IsOctober","IsNovember","IsDecember","IsSameDay","IsYearToDate","DateDiffTick","DateDiffSecond","DateDiffMilliSecond","DateDiffMinute","DateDiffHour","DateDiffDay","DateDiffMonth","DateDiffYear","GetDate","GetMilliSecond","GetSecond","GetMinute","GetHour","GetDay","GetMonth","GetYear","GetDayOfWeek","GetDayOfYear","GetTimeOfDay","Now","UtcNow","Today","AddTimeSpan","AddTicks","AddMilliSeconds","AddSeconds","AddMinutes","AddHours","AddDays","AddMonths","AddYears","Iif","InRange","IsNull","IsNullOrEmpty","Abs","Sqr","Cos","Sin","Atn","Exp","Log","Rnd","Tan","Power","Sign","Round","Ceiling","Floor","Acos","Asin","Atn2","BigMul","Cosh","Log10","Sinh","Tanh","ToInt","ToLong","ToFloat","ToDouble","ToDecimal","Trim","Len","Substring","Upper","Lower","Concat","Infinity","Ascii","Char","ToStr","Replace","Reverse","Insert","CharIndex","Remove","PadLeft","PadRight","StartsWith","EndsWith","Contains","Join","createGlobalModuleVariableFunc","addins","functions","Array","isArray","forEach","addin","func","filter","x","push","cat","ext","extend","keys"],"mappings":"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","sourcesContent":["/**\n* DevExpress Analytics (widgets\\expressioneditor\\tools\\_functions.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insertInFunctionDisplay = exports.resetFunctionDisplay = exports.functionDisplay = void 0;\nvar _utils_1 = require(\"../../../serializer/_utils\");\nvar _internal_1 = require(\"../../../serializer/_internal\");\nvar defaultFunctionDisplay = [\n    {\n        display: 'Aggregate',\n        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Aggregate',\n        category: 'Aggregate',\n        items: {\n            Avg: [{ paramCount: 1, text: '[].Avg()', displayName: 'Avg()', descriptionStringId: 'ExpressionEditorStringId.Function_AvgAggregate' }],\n            Count: [{ paramCount: 1, text: '[].Count()', displayName: 'Count()', descriptionStringId: 'ExpressionEditorStringId.Function_CountAggregate' }],\n            Exists: [{ paramCount: 1, text: '[].Exists()', displayName: 'Exists()', descriptionStringId: 'ExpressionEditorStringId.Function_ExistsAggregate' }],\n            Max: [{ paramCount: 1, text: '[].Max()', displayName: 'Max()', descriptionStringId: 'ExpressionEditorStringId.Function_MaxAggregate' }],\n            Min: [{ paramCount: 1, text: '[].Min()', displayName: 'Min()', descriptionStringId: 'ExpressionEditorStringId.Function_MinAggregate' }],\n            Single: [{ paramCount: 1, text: '[].Single()', displayName: 'Single()', descriptionStringId: 'ExpressionEditorStringId.Function_SingleAggregate' }],\n            Sum: [{ paramCount: 1, text: '[].Sum()', displayName: 'Sum()', descriptionStringId: 'ExpressionEditorStringId.Function_SumAggregate' }],\n        }\n    }, {\n        display: 'Date-Time',\n        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_DateTime',\n        items: {\n            LocalDateTimeThisYear: [{ paramCount: 0, text: 'LocalDateTimeThisYear()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisYear' }],\n            LocalDateTimeThisMonth: [{ paramCount: 0, text: 'LocalDateTimeThisMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisMonth' }],\n            LocalDateTimeLastMonth: [{ paramCount: 0, text: 'LocalDateTimeLastMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastMonth' }],\n            LocalDateTimeLastWeek: [{ paramCount: 0, text: 'LocalDateTimeLastWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastWeek' }],\n            LocalDateTimeLastYear: [{ paramCount: 0, text: 'LocalDateTimeLastYear()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastYear' }],\n            LocalDateTimeThisWeek: [{ paramCount: 0, text: 'LocalDateTimeThisWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisWeek' }],\n            LocalDateTimeYesterday: [{ paramCount: 0, text: 'LocalDateTimeYesterday()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeYesterday' }],\n            LocalDateTimeToday: [{ paramCount: 0, text: 'LocalDateTimeToday()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeToday' }],\n            LocalDateTimeNow: [{ paramCount: 0, text: 'LocalDateTimeNow()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNow' }],\n            LocalDateTimeTomorrow: [{ paramCount: 0, text: 'LocalDateTimeTomorrow()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTomorrow' }],\n            LocalDateTimeDayAfterTomorrow: [{ paramCount: 0, text: 'LocalDateTimeDayAfterTomorrow()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeDayAfterTomorrow' }],\n            LocalDateTimeNextWeek: [{ paramCount: 0, text: 'LocalDateTimeNextWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextWeek' }],\n            LocalDateTimeTwoMonthsAway: [{ paramCount: 0, text: 'LocalDateTimeTwoMonthsAway()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoMonthsAway' }],\n            LocalDateTimeTwoYearsAway: [{ paramCount: 0, text: 'LocalDateTimeTwoYearsAway()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoYearsAway' }],\n            LocalDateTimeTwoWeeksAway: [{ paramCount: 0, text: 'LocalDateTimeTwoWeeksAway()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoWeeksAway' }],\n            LocalDateTimeNextMonth: [{ paramCount: 0, text: 'LocalDateTimeNextMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextMonth' }],\n            LocalDateTimeNextYear: [{ paramCount: 0, text: 'LocalDateTimeNextYear()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextYear' }],\n            LocalDateTimeYearBeforeToday: [{ paramCount: 0, text: 'LocalDateTimeYearBeforeToday()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeYearBeforeToday' }],\n            InDateRange: [{ paramCount: 3, text: 'InDateRange(, , )', descriptionStringId: 'ExpressionEditorStringId.Function_InDateRange' }],\n            IsOutlookIntervalBeyondThisYear: null,\n            IsOutlookIntervalNextWeek: null,\n            IsOutlookIntervalTomorrow: null,\n            IsOutlookIntervalToday: null,\n            IsOutlookIntervalYesterday: null,\n            IsOutlookIntervalLastWeek: null,\n            IsOutlookIntervalPriorThisYear: null,\n            IsLastMonth: [{ paramCount: 1, text: 'IsLastMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_IsLastMonth' }],\n            IsLastYear: [{ paramCount: 1, text: 'IsLastYear()', descriptionStringId: 'ExpressionEditorStringId.Function_IsLastYear' }],\n            IsNextMonth: [{ paramCount: 1, text: 'IsNextMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNextMonth' }],\n            IsNextYear: [{ paramCount: 1, text: 'IsNextYear()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNextYear' }],\n            IsThisWeek: [{ paramCount: 1, text: 'IsThisWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_IsThisWeek' }],\n            IsThisMonth: [{ paramCount: 1, text: 'IsThisMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_IsThisMonth' }],\n            IsThisYear: [{ paramCount: 1, text: 'IsThisYear()', descriptionStringId: 'ExpressionEditorStringId.Function_IsThisYear' }],\n            IsJanuary: [{ paramCount: 1, text: 'IsJanuary()', descriptionStringId: 'ExpressionEditorStringId.Function_IsJanuary' }],\n            IsFebruary: [{ paramCount: 1, text: 'IsFebruary()', descriptionStringId: 'ExpressionEditorStringId.Function_IsFebruary' }],\n            IsMarch: [{ paramCount: 1, text: 'IsMarch()', descriptionStringId: 'ExpressionEditorStringId.Function_IsMarch' }],\n            IsApril: [{ paramCount: 1, text: 'IsApril()', descriptionStringId: 'ExpressionEditorStringId.Function_IsApril' }],\n            IsMay: [{ paramCount: 1, text: 'IsMay()', descriptionStringId: 'ExpressionEditorStringId.Function_IsMay' }],\n            IsJune: [{ paramCount: 1, text: 'IsJune()', descriptionStringId: 'ExpressionEditorStringId.Function_IsJune' }],\n            IsJuly: [{ paramCount: 1, text: 'IsJuly()', descriptionStringId: 'ExpressionEditorStringId.Function_IsJuly' }],\n            IsAugust: [{ paramCount: 1, text: 'IsAugust()', descriptionStringId: 'ExpressionEditorStringId.Function_IsAugust' }],\n            IsSeptember: [{ paramCount: 1, text: 'IsSeptember()', descriptionStringId: 'ExpressionEditorStringId.Function_IsSeptember' }],\n            IsOctober: [{ paramCount: 1, text: 'IsOctober()', descriptionStringId: 'ExpressionEditorStringId.Function_IsOctober' }],\n            IsNovember: [{ paramCount: 1, text: 'IsNovember()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNovember' }],\n            IsDecember: [{ paramCount: 1, text: 'IsDecember()', descriptionStringId: 'ExpressionEditorStringId.Function_IsDecember' }],\n            IsSameDay: [{ paramCount: 2, text: 'IsSameDay(, )', descriptionStringId: 'ExpressionEditorStringId.Function_IsSameDay' }],\n            IsYearToDate: [{ paramCount: 1, text: 'IsYearToDate()', descriptionStringId: 'ExpressionEditorStringId.Function_IsYearToDate' }],\n            DateDiffTick: [{ paramCount: 2, text: 'DateDiffTick(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffTick' }],\n            DateDiffSecond: [{ paramCount: 2, text: 'DateDiffSecond(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffSecond' }],\n            DateDiffMilliSecond: [{ paramCount: 2, text: 'DateDiffMilliSecond(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMilliSecond' }],\n            DateDiffMinute: [{ paramCount: 2, text: 'DateDiffMinute(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMinute' }],\n            DateDiffHour: [{ paramCount: 2, text: 'DateDiffHour(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffHour' }],\n            DateDiffDay: [{ paramCount: 2, text: 'DateDiffDay(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffDay' }],\n            DateDiffMonth: [{ paramCount: 2, text: 'DateDiffMonth(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMonth' }],\n            DateDiffYear: [{ paramCount: 2, text: 'DateDiffYear(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffYear' }],\n            GetDate: [{ paramCount: 1, text: 'GetDate()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDate' }],\n            GetMilliSecond: [{ paramCount: 1, text: 'GetMilliSecond()', descriptionStringId: 'ExpressionEditorStringId.Function_GetMilliSecond' }],\n            GetSecond: [{ paramCount: 1, text: 'GetSecond()', descriptionStringId: 'ExpressionEditorStringId.Function_GetSecond' }],\n            GetMinute: [{ paramCount: 1, text: 'GetMinute()', descriptionStringId: 'ExpressionEditorStringId.Function_GetMinute' }],\n            GetHour: [{ paramCount: 1, text: 'GetHour()', descriptionStringId: 'ExpressionEditorStringId.Function_GetHour' }],\n            GetDay: [{ paramCount: 1, text: 'GetDay()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDay' }],\n            GetMonth: [{ paramCount: 1, text: 'GetMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_GetMonth' }],\n            GetYear: [{ paramCount: 1, text: 'GetYear()', descriptionStringId: 'ExpressionEditorStringId.Function_GetYear' }],\n            GetDayOfWeek: [{ paramCount: 1, text: 'GetDayOfWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDayOfWeek' }],\n            GetDayOfYear: [{ paramCount: 1, text: 'GetDayOfYear()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDayOfYear' }],\n            GetTimeOfDay: [{ paramCount: 1, text: 'GetTimeOfDay()', descriptionStringId: 'ExpressionEditorStringId.Function_GetTimeOfDay' }],\n            Now: [{ paramCount: 0, text: 'Now()', descriptionStringId: 'ExpressionEditorStringId.Function_Now' }],\n            UtcNow: [{ paramCount: 0, text: 'UtcNow()', descriptionStringId: 'ExpressionEditorStringId.Function_UtcNow' }],\n            Today: [{ paramCount: 0, text: 'Today()', descriptionStringId: 'ExpressionEditorStringId.Function_Today' }],\n            AddTimeSpan: [{ paramCount: 2, text: 'AddTimeSpan(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddTimeSpan' }],\n            AddTicks: [{ paramCount: 2, text: 'AddTicks(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddTicks' }],\n            AddMilliSeconds: [{ paramCount: 2, text: 'AddMilliSeconds(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddMilliSeconds' }],\n            AddSeconds: [{ paramCount: 2, text: 'AddSeconds(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddSeconds' }],\n            AddMinutes: [{ paramCount: 2, text: 'AddMinutes(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddMinutes' }],\n            AddHours: [{ paramCount: 2, text: 'AddHours(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddHours' }],\n            AddDays: [{ paramCount: 2, text: 'AddDays(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddDays' }],\n            AddMonths: [{ paramCount: 2, text: 'AddMonths(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddMonths' }],\n            AddYears: [{ paramCount: 2, text: 'AddYears(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddYears' }],\n        },\n    }, {\n        display: 'Logical',\n        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Logical',\n        items: {\n            Iif: [{ paramCount: 3, text: 'Iif(, , )', descriptionStringId: 'ExpressionEditorStringId.Function_Iif' }],\n            InRange: [{ paramCount: 3, text: 'InRange(, , )', descriptionStringId: 'ExpressionEditorStringId.Function_InRange' }],\n            IsNull: [{ paramCount: 1, text: 'IsNull()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNull' }],\n            IsNullOrEmpty: [{ paramCount: 1, text: 'IsNullOrEmpty()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNullOrEmpty' }],\n        }\n    }, {\n        display: 'Math',\n        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Math',\n        items: {\n            Abs: [{ paramCount: 1, text: 'Abs()', descriptionStringId: 'ExpressionEditorStringId.Function_Abs' }],\n            Sqr: [{ paramCount: 1, text: 'Sqr()', descriptionStringId: 'ExpressionEditorStringId.Function_Sqr' }],\n            Cos: [{ paramCount: 1, text: 'Cos()', descriptionStringId: 'ExpressionEditorStringId.Function_Cos' }],\n            Sin: [{ paramCount: 1, text: 'Sin()', descriptionStringId: 'ExpressionEditorStringId.Function_Sin' }],\n            Atn: [{ paramCount: 1, text: 'Atn()', descriptionStringId: 'ExpressionEditorStringId.Function_Atn' }],\n            Exp: [{ paramCount: 1, text: 'Exp()', descriptionStringId: 'ExpressionEditorStringId.Function_Exp' }],\n            Log: [\n                { paramCount: 1, text: 'Log()', descriptionStringId: 'ExpressionEditorStringId.Function_Log' },\n                { paramCount: 2, text: 'Log(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Log_2' },\n            ],\n            Rnd: [{ paramCount: 0, text: 'Rnd()', descriptionStringId: 'ExpressionEditorStringId.Function_Rnd' }],\n            Tan: [{ paramCount: 1, text: 'Tan()', descriptionStringId: 'ExpressionEditorStringId.Function_Tan' }],\n            Power: [{ paramCount: 2, text: 'Power(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Power' }],\n            Sign: [{ paramCount: 1, text: 'Sign()', descriptionStringId: 'ExpressionEditorStringId.Function_Sign' }],\n            Round: [\n                { paramCount: 1, text: 'Round()', descriptionStringId: 'ExpressionEditorStringId.Function_Round' },\n                { paramCount: 2, text: 'Round(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Round_2' },\n            ],\n            Ceiling: [{ paramCount: 1, text: 'Ceiling()', descriptionStringId: 'ExpressionEditorStringId.Function_Ceiling' }],\n            Floor: [{ paramCount: 1, text: 'Floor()', descriptionStringId: 'ExpressionEditorStringId.Function_Floor' }],\n            Max: [{ paramCount: 2, text: 'Max(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Max' }],\n            Min: [{ paramCount: 2, text: 'Min(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Min' }],\n            Acos: [{ paramCount: 1, text: 'Acos()', descriptionStringId: 'ExpressionEditorStringId.Function_Acos' }],\n            Asin: [{ paramCount: 1, text: 'Asin()', descriptionStringId: 'ExpressionEditorStringId.Function_Asin' }],\n            Atn2: [{ paramCount: 2, text: 'Atn2(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Atn2' }],\n            BigMul: [{ paramCount: 2, text: 'BigMul(, )', descriptionStringId: 'ExpressionEditorStringId.Function_BigMul' }],\n            Cosh: [{ paramCount: 1, text: 'Cosh()', descriptionStringId: 'ExpressionEditorStringId.Function_Cosh' }],\n            Log10: [{ paramCount: 1, text: 'Log10()', descriptionStringId: 'ExpressionEditorStringId.Function_Log10' }],\n            Sinh: [{ paramCount: 1, text: 'Sinh()', descriptionStringId: 'ExpressionEditorStringId.Function_Sinh' }],\n            Tanh: [{ paramCount: 1, text: 'Tanh()', descriptionStringId: 'ExpressionEditorStringId.Function_Tanh' }],\n            ToInt: [{ paramCount: 1, text: 'ToInt()', descriptionStringId: 'ExpressionEditorStringId.Function_ToInt' }],\n            ToLong: [{ paramCount: 1, text: 'ToLong()', descriptionStringId: 'ExpressionEditorStringId.Function_ToLong' }],\n            ToFloat: [{ paramCount: 1, text: 'ToFloat()', descriptionStringId: 'ExpressionEditorStringId.Function_ToFloat' }],\n            ToDouble: [{ paramCount: 1, text: 'ToDouble()', descriptionStringId: 'ExpressionEditorStringId.Function_ToDouble' }],\n            ToDecimal: [{ paramCount: 1, text: 'ToDecimal()', descriptionStringId: 'ExpressionEditorStringId.Function_ToDecimal' }],\n        }\n    }, {\n        display: 'String',\n        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Text',\n        items: {\n            Trim: [{ paramCount: 1, text: 'Trim()', descriptionStringId: 'ExpressionEditorStringId.Function_Trim' }],\n            Len: [{ paramCount: 1, text: 'Len()', descriptionStringId: 'ExpressionEditorStringId.Function_Len' }],\n            Substring: [\n                { paramCount: 3, text: \"Substring('', , )\", descriptionStringId: 'ExpressionEditorStringId.Function_Substring_3' },\n                { paramCount: 2, text: \"Substring('', )\", descriptionStringId: 'ExpressionEditorStringId.Function_Substring' }\n            ],\n            Upper: [{ paramCount: 1, text: 'Upper()', descriptionStringId: 'ExpressionEditorStringId.Function_Upper' }],\n            Lower: [{ paramCount: 1, text: 'Lower()', descriptionStringId: 'ExpressionEditorStringId.Function_Lower' }],\n            Concat: [{ paramCount: Infinity, text: 'Concat(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Concat' }],\n            Ascii: [{ paramCount: 1, text: \"Ascii('')\", descriptionStringId: 'ExpressionEditorStringId.Function_Ascii' }],\n            Char: [{ paramCount: 1, text: 'Char()', descriptionStringId: 'ExpressionEditorStringId.Function_Char' }],\n            ToStr: [{ paramCount: 1, text: 'ToStr()', descriptionStringId: 'ExpressionEditorStringId.Function_ToStr' }],\n            Replace: [{ paramCount: 3, text: \"Replace('','', '')\", descriptionStringId: 'ExpressionEditorStringId.Function_Replace' }],\n            Reverse: [{ paramCount: 1, text: \"Reverse('')\", descriptionStringId: 'ExpressionEditorStringId.Function_Reverse' }],\n            Insert: [{ paramCount: 3, text: \"Insert('', , '')\", descriptionStringId: 'ExpressionEditorStringId.Function_Insert' }],\n            CharIndex: [\n                { paramCount: 2, text: \"CharIndex('','')\", descriptionStringId: 'ExpressionEditorStringId.Function_CharIndex' },\n                { paramCount: 3, text: \"CharIndex('','', )\", descriptionStringId: 'ExpressionEditorStringId.Function_CharIndex_3' }\n            ],\n            Remove: [\n                { paramCount: 2, text: \"Remove('', )\", descriptionStringId: 'ExpressionEditorStringId.Function_Remove' },\n                { paramCount: 3, text: \"Remove('', , )\", descriptionStringId: 'ExpressionEditorStringId.Function_Remove_3' }\n            ],\n            PadLeft: [\n                { paramCount: 2, text: 'PadLeft(, )', descriptionStringId: 'ExpressionEditorStringId.Function_PadLeft' },\n                { paramCount: 3, text: \"PadLeft(, , '')\", descriptionStringId: 'ExpressionEditorStringId.Function_PadLeft_3' }\n            ],\n            PadRight: [\n                { paramCount: 2, text: 'PadRight(, )', descriptionStringId: 'ExpressionEditorStringId.Function_PadRight' },\n                { paramCount: 3, text: \"PadRight(, , '')\", descriptionStringId: 'ExpressionEditorStringId.Function_PadRight_3' }\n            ],\n            StartsWith: [{ paramCount: 2, text: \"StartsWith('', '')\", descriptionStringId: 'ExpressionEditorStringId.Function_StartsWith' }],\n            EndsWith: [{ paramCount: 2, text: \"EndsWith('', '')\", descriptionStringId: 'ExpressionEditorStringId.Function_EndsWith' }],\n            Contains: [{ paramCount: 0, text: \"Contains('', '')\", descriptionStringId: 'ExpressionEditorStringId.Function_Contains' }],\n            Join: [\n                { paramCount: 1, text: 'Join()', descriptionStringId: 'ExpressionEditorStringId.Function_Join' },\n                { paramCount: 2, text: \"Join(, '')\", descriptionStringId: 'ExpressionEditorStringId.Function_Join_2' }\n            ],\n        }\n    }\n];\nexports.functionDisplay = _internal_1.createGlobalModuleVariableFunc(defaultFunctionDisplay);\nvar resetFunctionDisplay = function () { return exports.functionDisplay(defaultFunctionDisplay); };\nexports.resetFunctionDisplay = resetFunctionDisplay;\nfunction insertInFunctionDisplay(addins) {\n    var functions = [];\n    if (Array.isArray(addins)) {\n        functions = __spreadArray([], exports.functionDisplay());\n        addins.forEach(function (addin) {\n            var func = functions.filter(function (x) { return x.display === addin.display; })[0];\n            if (!!func) {\n                func.items = __assign(__assign({}, func.items), addin.items);\n            }\n            else {\n                functions.push(addin);\n            }\n        });\n    }\n    else {\n        exports.functionDisplay().forEach(function (cat) {\n            var ext = addins[cat.display];\n            var items = _utils_1.extend({}, cat.items, ext);\n            if (!Object.keys(items).length)\n                return;\n            functions.push(ext ? {\n                display: cat.display, category: cat.category, localizationId: cat.localizationId,\n                items: items\n            } : cat);\n        });\n    }\n    return functions;\n}\nexports.insertInFunctionDisplay = insertInFunctionDisplay;\n"]},"metadata":{},"sourceType":"script"}