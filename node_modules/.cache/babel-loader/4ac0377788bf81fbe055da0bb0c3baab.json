{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.selection.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport treeListCore from \"./ui.tree_list.core\";\nimport { noop, equalByValue } from \"../../core/utils/common\";\nimport { selectionModule } from \"../grid_core/ui.grid_core.selection\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined } from \"../../core/utils/type\";\nvar TREELIST_SELECT_ALL_CLASS = \"dx-treelist-select-all\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar originalRowClick = selectionModule.extenders.views.rowsView._rowClick;\nvar originalHandleDataChanged = selectionModule.extenders.controllers.data._handleDataChanged;\n\nvar nodeExists = function (array, currentKey) {\n  return !!array.filter(function (key) {\n    return key === currentKey;\n  }).length;\n};\n\ntreeListCore.registerModule(\"selection\", extend(true, {}, selectionModule, {\n  defaultOptions: function () {\n    return extend(true, selectionModule.defaultOptions(), {\n      selection: {\n        showCheckBoxesMode: \"always\",\n        recursive: false\n      }\n    });\n  },\n  extenders: {\n    controllers: {\n      data: {\n        _handleDataChanged: function (e) {\n          var selectionController = this.getController(\"selection\");\n          var isRecursiveSelection = selectionController.isRecursiveSelection();\n\n          if (isRecursiveSelection && (!e || \"updateSelectionState\" !== e.changeType)) {\n            selectionController.updateSelectionState({\n              selectedItemKeys: this.option(\"selectedRowKeys\")\n            });\n          }\n\n          originalHandleDataChanged.apply(this, arguments);\n        },\n        loadDescendants: function () {\n          var that = this;\n          var d = that.callBase.apply(that, arguments);\n          var selectionController = that.getController(\"selection\");\n          var isRecursiveSelection = selectionController.isRecursiveSelection();\n\n          if (isRecursiveSelection) {\n            d.done(function () {\n              selectionController.updateSelectionState({\n                selectedItemKeys: that.option(\"selectedRowKeys\")\n              });\n            });\n          }\n\n          return d;\n        }\n      },\n      selection: {\n        init: function () {\n          this.callBase.apply(this, arguments);\n          this._selectionStateByKey = {};\n        },\n        _getSelectionConfig: function () {\n          var config = this.callBase.apply(this, arguments);\n          var plainItems = config.plainItems;\n\n          config.plainItems = all => {\n            if (all) {\n              return this._dataController.getCachedStoreData() || [];\n            }\n\n            return plainItems.apply(this, arguments).map(item => item.data);\n          };\n\n          config.isItemSelected = item => {\n            var key = this._dataController.keyOf(item);\n\n            return this.isRowSelected(key);\n          };\n\n          config.isSelectableItem = () => true;\n\n          config.getItemData = item => item;\n\n          config.allowLoadByRange = () => false;\n\n          return config;\n        },\n        renderSelectCheckBoxContainer: function ($container, model) {\n          var rowsView = this.component.getView(\"rowsView\");\n          $container.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n          var $checkbox = rowsView._renderSelectCheckBox($container, {\n            value: model.row.isSelected,\n            row: model.row,\n            column: model.column\n          });\n\n          rowsView._attachCheckBoxClickEvent($checkbox);\n        },\n        _updateSelectColumn: noop,\n        _getSelectAllNodeKeys: function () {\n          var component = this.component;\n          var root = component.getRootNode();\n          var cache = {};\n          var keys = [];\n          var isRecursiveSelection = this.isRecursiveSelection();\n          root && treeListCore.foreachNodes(root.children, function (node) {\n            if (void 0 !== node.key && (node.visible || isRecursiveSelection)) {\n              keys.push(node.key);\n            }\n\n            if (!node.visible) {\n              return true;\n            }\n\n            return isRecursiveSelection ? false : component.isRowExpanded(node.key, cache);\n          });\n          return keys;\n        },\n        isSelectAll: function () {\n          var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n          if (0 === selectedRowKeys.length) {\n            return false;\n          }\n\n          var component = this.component;\n\n          var visibleKeys = this._getSelectAllNodeKeys();\n\n          var isRecursiveSelection = this.isRecursiveSelection();\n          var hasIndeterminateState = false;\n          var selectedVisibleKeys = visibleKeys.filter(function (key) {\n            var isRowSelected = component.isRowSelected(key, isRecursiveSelection);\n\n            if (void 0 === isRowSelected) {\n              hasIndeterminateState = true;\n            }\n\n            return isRowSelected;\n          });\n\n          if (!selectedVisibleKeys.length) {\n            return hasIndeterminateState ? void 0 : false;\n          } else if (selectedVisibleKeys.length === visibleKeys.length) {\n            return true;\n          }\n        },\n        selectAll: function () {\n          var visibleKeys = this._getSelectAllNodeKeys().filter(key => !this.isRowSelected(key));\n\n          this.focusedItemIndex(-1);\n          return this.selectRows(visibleKeys, true);\n        },\n        deselectAll: function () {\n          var visibleKeys = this._getSelectAllNodeKeys();\n\n          this.focusedItemIndex(-1);\n          return this.deselectRows(visibleKeys);\n        },\n        selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n          var that = this;\n          var selectedRowKeys = that.option(\"selectedRowKeys\");\n          var isRecursiveSelection = this.isRecursiveSelection();\n\n          var normalizedArgs = isRecursiveSelection && that._normalizeSelectionArgs({\n            keys: isDefined(value) ? value : []\n          }, preserve, !isDeselect);\n\n          if (normalizedArgs && !equalByValue(normalizedArgs.selectedRowKeys, selectedRowKeys)) {\n            that._isSelectionNormalizing = true;\n            return this.callBase(normalizedArgs.selectedRowKeys, false, false, false).always(function () {\n              that._isSelectionNormalizing = false;\n            }).done(function (items) {\n              normalizedArgs.selectedRowsData = items;\n\n              that._fireSelectionChanged(normalizedArgs);\n            });\n          }\n\n          return this.callBase(value, preserve, isDeselect, isSelectAll);\n        },\n        changeItemSelection: function (itemIndex, keyboardKeys) {\n          var isRecursiveSelection = this.isRecursiveSelection();\n\n          if (isRecursiveSelection && !keyboardKeys.shift) {\n            var key = this._dataController.getKeyByRowIndex(itemIndex);\n\n            return this.selectedItemKeys(key, true, this.isRowSelected(key)).done(() => {\n              this.isRowSelected(key) && this.callBase(itemIndex, keyboardKeys, true);\n            });\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateParentSelectionState: function (node, isSelected) {\n          var that = this;\n          var state = isSelected;\n          var parentNode = node.parent;\n\n          if (parentNode) {\n            if (parentNode.children.length > 1) {\n              if (false === isSelected) {\n                var hasSelectedState = parentNode.children.some(function (childNode, index, children) {\n                  return that._selectionStateByKey[childNode.key];\n                });\n                state = hasSelectedState ? void 0 : false;\n              } else if (true === isSelected) {\n                var hasNonSelectedState = parentNode.children.some(function (childNode) {\n                  return !that._selectionStateByKey[childNode.key];\n                });\n                state = hasNonSelectedState ? void 0 : true;\n              }\n            }\n\n            this._selectionStateByKey[parentNode.key] = state;\n\n            if (parentNode.parent && parentNode.parent.level >= 0) {\n              this._updateParentSelectionState(parentNode, state);\n            }\n          }\n        },\n        _updateChildrenSelectionState: function (node, isSelected) {\n          var that = this;\n          var children = node.children;\n          children && children.forEach(function (childNode) {\n            that._selectionStateByKey[childNode.key] = isSelected;\n\n            if (childNode.children.length > 0) {\n              that._updateChildrenSelectionState(childNode, isSelected);\n            }\n          });\n        },\n        _updateSelectionStateCore: function (keys, isSelected) {\n          var dataController = this._dataController;\n\n          for (var i = 0; i < keys.length; i++) {\n            this._selectionStateByKey[keys[i]] = isSelected;\n            var node = dataController.getNodeByKey(keys[i]);\n\n            if (node) {\n              this._updateParentSelectionState(node, isSelected);\n\n              this._updateChildrenSelectionState(node, isSelected);\n            }\n          }\n        },\n        _getSelectedParentKeys: function (key, selectedItemKeys, useCash) {\n          var selectedParentNode;\n\n          var node = this._dataController.getNodeByKey(key);\n\n          var parentNode = node && node.parent;\n          var result = [];\n\n          while (parentNode && parentNode.level >= 0) {\n            result.unshift(parentNode.key);\n            var isSelected = useCash ? !nodeExists(selectedItemKeys, parentNode.key) && this.isRowSelected(parentNode.key) : selectedItemKeys.indexOf(parentNode.key) >= 0;\n\n            if (isSelected) {\n              selectedParentNode = parentNode;\n              result = this._getSelectedParentKeys(selectedParentNode.key, selectedItemKeys, useCash).concat(result);\n              break;\n            } else if (useCash) {\n              break;\n            }\n\n            parentNode = parentNode.parent;\n          }\n\n          return selectedParentNode && result || [];\n        },\n        _getSelectedChildKeys: function (key, keysToIgnore) {\n          var childKeys = [];\n\n          var node = this._dataController.getNodeByKey(key);\n\n          node && treeListCore.foreachNodes(node.children, childNode => {\n            var ignoreKeyIndex = keysToIgnore.indexOf(childNode.key);\n\n            if (ignoreKeyIndex < 0) {\n              childKeys.push(childNode.key);\n            }\n\n            return ignoreKeyIndex > 0 || ignoreKeyIndex < 0 && void 0 === this._selectionStateByKey[childNode.key];\n          });\n          return childKeys;\n        },\n        _normalizeParentKeys: function (key, args) {\n          var keysToIgnore = [key];\n\n          var parentNodeKeys = this._getSelectedParentKeys(key, args.selectedRowKeys);\n\n          if (parentNodeKeys.length) {\n            keysToIgnore = keysToIgnore.concat(parentNodeKeys);\n            keysToIgnore.forEach(function (key) {\n              var index = args.selectedRowKeys.indexOf(key);\n\n              if (index >= 0) {\n                args.selectedRowKeys.splice(index, 1);\n              }\n            });\n\n            var childKeys = this._getSelectedChildKeys(parentNodeKeys[0], keysToIgnore);\n\n            args.selectedRowKeys = args.selectedRowKeys.concat(childKeys);\n          }\n        },\n        _normalizeChildrenKeys: function (key, args) {\n          var node = this._dataController.getNodeByKey(key);\n\n          node && node.children.forEach(childNode => {\n            var index = args.selectedRowKeys.indexOf(childNode.key);\n\n            if (index >= 0) {\n              args.selectedRowKeys.splice(index, 1);\n            }\n\n            this._normalizeChildrenKeys(childNode.key, args);\n          });\n        },\n        _normalizeSelectedRowKeysCore: function (keys, args, preserve, isSelect) {\n          var that = this;\n          keys.forEach(function (key) {\n            if (preserve && that.isRowSelected(key) === isSelect) {\n              return;\n            }\n\n            that._normalizeChildrenKeys(key, args);\n\n            var index = args.selectedRowKeys.indexOf(key);\n\n            if (isSelect) {\n              if (index < 0) {\n                args.selectedRowKeys.push(key);\n              }\n\n              args.currentSelectedRowKeys.push(key);\n            } else {\n              if (index >= 0) {\n                args.selectedRowKeys.splice(index, 1);\n              }\n\n              args.currentDeselectedRowKeys.push(key);\n\n              that._normalizeParentKeys(key, args);\n            }\n          });\n        },\n        _normalizeSelectionArgs: function (args, preserve, isSelect) {\n          var result;\n          var keys = Array.isArray(args.keys) ? args.keys : [args.keys];\n          var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n          if (keys.length) {\n            result = {\n              currentSelectedRowKeys: [],\n              currentDeselectedRowKeys: [],\n              selectedRowKeys: preserve ? selectedRowKeys.slice(0) : []\n            };\n\n            this._normalizeSelectedRowKeysCore(keys, result, preserve, isSelect);\n          }\n\n          return result;\n        },\n        _updateSelectedItems: function (args) {\n          this.updateSelectionState(args);\n          this.callBase(args);\n        },\n        _fireSelectionChanged: function () {\n          if (!this._isSelectionNormalizing) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isModeLeavesOnly: function (mode) {\n          return \"leavesOnly\" === mode;\n        },\n        _removeDuplicatedKeys: function (keys) {\n          var result = [];\n          var processedKeys = {};\n          keys.forEach(key => {\n            if (!processedKeys[key]) {\n              processedKeys[key] = true;\n              result.push(key);\n            }\n          });\n          return result;\n        },\n\n        _getAllChildKeys(key) {\n          var childKeys = [];\n\n          var node = this._dataController.getNodeByKey(key);\n\n          node && treeListCore.foreachNodes(node.children, function (childNode) {\n            childKeys.push(childNode.key);\n          }, true);\n          return childKeys;\n        },\n\n        _getAllSelectedRowKeys: function (keys) {\n          var result = [];\n          keys.forEach(key => {\n            var parentKeys = this._getSelectedParentKeys(key, [], true);\n\n            var childKeys = this._getAllChildKeys(key);\n\n            result.push.apply(result, parentKeys.concat([key], childKeys));\n          });\n          result = this._removeDuplicatedKeys(result);\n          return result;\n        },\n        _getParentSelectedRowKeys: function (keys) {\n          var that = this;\n          var result = [];\n          keys.forEach(key => {\n            var parentKeys = that._getSelectedParentKeys(key, keys);\n\n            !parentKeys.length && result.push(key);\n          });\n          return result;\n        },\n        _getLeafSelectedRowKeys: function (keys) {\n          var result = [];\n          var dataController = this._dataController;\n          keys.forEach(function (key) {\n            var node = dataController.getNodeByKey(key);\n            node && !node.hasChildren && result.push(key);\n          });\n          return result;\n        },\n        isRecursiveSelection: function () {\n          var selectionMode = this.option(\"selection.mode\");\n          var isRecursive = this.option(\"selection.recursive\");\n          return \"multiple\" === selectionMode && isRecursive;\n        },\n        updateSelectionState: function (options) {\n          var removedItemKeys = options.removedItemKeys || [];\n          var selectedItemKeys = options.selectedItemKeys || [];\n\n          if (this.isRecursiveSelection()) {\n            this._updateSelectionStateCore(removedItemKeys, false);\n\n            this._updateSelectionStateCore(selectedItemKeys, true);\n          }\n        },\n        isRowSelected: function (key, isRecursiveSelection) {\n          var _isRecursiveSelection;\n\n          var result = this.callBase.apply(this, arguments);\n          isRecursiveSelection = null !== (_isRecursiveSelection = isRecursiveSelection) && void 0 !== _isRecursiveSelection ? _isRecursiveSelection : this.isRecursiveSelection();\n\n          if (!result && isRecursiveSelection) {\n            if (key in this._selectionStateByKey) {\n              return this._selectionStateByKey[key];\n            }\n\n            return false;\n          }\n\n          return result;\n        },\n\n        getSelectedRowKeys(mode) {\n          if (!this._dataController) {\n            return [];\n          }\n\n          var selectedRowKeys = this.callBase.apply(this, arguments);\n\n          if (mode) {\n            if (this.isRecursiveSelection()) {\n              selectedRowKeys = this._getAllSelectedRowKeys(selectedRowKeys);\n            }\n\n            if (\"all\" !== mode) {\n              if (\"excludeRecursive\" === mode) {\n                selectedRowKeys = this._getParentSelectedRowKeys(selectedRowKeys);\n              } else if (this._isModeLeavesOnly(mode)) {\n                selectedRowKeys = this._getLeafSelectedRowKeys(selectedRowKeys);\n              }\n            }\n          }\n\n          return selectedRowKeys;\n        },\n\n        getSelectedRowsData: function (mode) {\n          var dataController = this._dataController;\n          var selectedKeys = this.getSelectedRowKeys(mode) || [];\n          var selectedRowsData = [];\n          selectedKeys.forEach(function (key) {\n            var node = dataController.getNodeByKey(key);\n            node && selectedRowsData.push(node.data);\n          });\n          return selectedRowsData;\n        },\n        refresh: function () {\n          this._selectionStateByKey = {};\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        _processTemplate: function (template, options) {\n          var that = this;\n          var resultTemplate;\n          var renderingTemplate = this.callBase(template, options);\n\n          var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();\n\n          if (renderingTemplate && \"header\" === options.rowType && options.column.index === firstDataColumnIndex) {\n            resultTemplate = {\n              render: function (options) {\n                if (\"multiple\" === that.option(\"selection.mode\")) {\n                  that.renderSelectAll(options.container, options.model);\n                }\n\n                renderingTemplate.render(options);\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n\n          return resultTemplate;\n        },\n        renderSelectAll: function ($cell, options) {\n          $cell.addClass(TREELIST_SELECT_ALL_CLASS);\n\n          this._renderSelectAllCheckBox($cell);\n        },\n        _isSortableElement: function ($target) {\n          return this.callBase($target) && !$target.closest(\".\" + SELECT_CHECKBOX_CLASS).length;\n        }\n      },\n      rowsView: {\n        _renderIcons: function ($iconContainer, options) {\n          this.callBase.apply(this, arguments);\n\n          if (!options.row.isNewRow && \"multiple\" === this.option(\"selection.mode\")) {\n            this.getController(\"selection\").renderSelectCheckBoxContainer($iconContainer, options);\n          }\n\n          return $iconContainer;\n        },\n        _rowClick: function (e) {\n          var $targetElement = $(e.event.target);\n\n          if (this.isExpandIcon($targetElement)) {\n            this.callBase.apply(this, arguments);\n          } else {\n            originalRowClick.apply(this, arguments);\n          }\n        }\n      }\n    }\n  }\n}));","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/tree_list/ui.tree_list.selection.js"],"names":["$","treeListCore","noop","equalByValue","selectionModule","extend","isDefined","TREELIST_SELECT_ALL_CLASS","CELL_FOCUS_DISABLED_CLASS","SELECT_CHECKBOX_CLASS","originalRowClick","extenders","views","rowsView","_rowClick","originalHandleDataChanged","controllers","data","_handleDataChanged","nodeExists","array","currentKey","filter","key","length","registerModule","defaultOptions","selection","showCheckBoxesMode","recursive","e","selectionController","getController","isRecursiveSelection","changeType","updateSelectionState","selectedItemKeys","option","apply","arguments","loadDescendants","that","d","callBase","done","init","_selectionStateByKey","_getSelectionConfig","config","plainItems","all","_dataController","getCachedStoreData","map","item","isItemSelected","keyOf","isRowSelected","isSelectableItem","getItemData","allowLoadByRange","renderSelectCheckBoxContainer","$container","model","component","getView","addClass","$checkbox","_renderSelectCheckBox","value","row","isSelected","column","_attachCheckBoxClickEvent","_updateSelectColumn","_getSelectAllNodeKeys","root","getRootNode","cache","keys","foreachNodes","children","node","visible","push","isRowExpanded","isSelectAll","selectedRowKeys","visibleKeys","hasIndeterminateState","selectedVisibleKeys","selectAll","focusedItemIndex","selectRows","deselectAll","deselectRows","preserve","isDeselect","normalizedArgs","_normalizeSelectionArgs","_isSelectionNormalizing","always","items","selectedRowsData","_fireSelectionChanged","changeItemSelection","itemIndex","keyboardKeys","shift","getKeyByRowIndex","_updateParentSelectionState","state","parentNode","parent","hasSelectedState","some","childNode","index","hasNonSelectedState","level","_updateChildrenSelectionState","forEach","_updateSelectionStateCore","dataController","i","getNodeByKey","_getSelectedParentKeys","useCash","selectedParentNode","result","unshift","indexOf","concat","_getSelectedChildKeys","keysToIgnore","childKeys","ignoreKeyIndex","_normalizeParentKeys","args","parentNodeKeys","splice","_normalizeChildrenKeys","_normalizeSelectedRowKeysCore","isSelect","currentSelectedRowKeys","currentDeselectedRowKeys","Array","isArray","slice","_updateSelectedItems","_isModeLeavesOnly","mode","_removeDuplicatedKeys","processedKeys","_getAllChildKeys","_getAllSelectedRowKeys","parentKeys","_getParentSelectedRowKeys","_getLeafSelectedRowKeys","hasChildren","selectionMode","isRecursive","options","removedItemKeys","_isRecursiveSelection","getSelectedRowKeys","getSelectedRowsData","selectedKeys","refresh","columnHeadersView","_processTemplate","template","resultTemplate","renderingTemplate","firstDataColumnIndex","_columnsController","getFirstDataColumnIndex","rowType","render","renderSelectAll","container","$cell","_renderSelectAllCheckBox","_isSortableElement","$target","closest","_renderIcons","$iconContainer","isNewRow","$targetElement","event","target","isExpandIcon"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/tree_list/ui.tree_list.selection.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport treeListCore from \"./ui.tree_list.core\";\r\nimport {\r\n    noop,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    selectionModule\r\n} from \"../grid_core/ui.grid_core.selection\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar TREELIST_SELECT_ALL_CLASS = \"dx-treelist-select-all\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar originalRowClick = selectionModule.extenders.views.rowsView._rowClick;\r\nvar originalHandleDataChanged = selectionModule.extenders.controllers.data._handleDataChanged;\r\nvar nodeExists = function(array, currentKey) {\r\n    return !!array.filter((function(key) {\r\n        return key === currentKey\r\n    })).length\r\n};\r\ntreeListCore.registerModule(\"selection\", extend(true, {}, selectionModule, {\r\n    defaultOptions: function() {\r\n        return extend(true, selectionModule.defaultOptions(), {\r\n            selection: {\r\n                showCheckBoxesMode: \"always\",\r\n                recursive: false\r\n            }\r\n        })\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                _handleDataChanged: function(e) {\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isRecursiveSelection = selectionController.isRecursiveSelection();\r\n                    if (isRecursiveSelection && (!e || \"updateSelectionState\" !== e.changeType)) {\r\n                        selectionController.updateSelectionState({\r\n                            selectedItemKeys: this.option(\"selectedRowKeys\")\r\n                        })\r\n                    }\r\n                    originalHandleDataChanged.apply(this, arguments)\r\n                },\r\n                loadDescendants: function() {\r\n                    var that = this;\r\n                    var d = that.callBase.apply(that, arguments);\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var isRecursiveSelection = selectionController.isRecursiveSelection();\r\n                    if (isRecursiveSelection) {\r\n                        d.done((function() {\r\n                            selectionController.updateSelectionState({\r\n                                selectedItemKeys: that.option(\"selectedRowKeys\")\r\n                            })\r\n                        }))\r\n                    }\r\n                    return d\r\n                }\r\n            },\r\n            selection: {\r\n                init: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._selectionStateByKey = {}\r\n                },\r\n                _getSelectionConfig: function() {\r\n                    var config = this.callBase.apply(this, arguments);\r\n                    var plainItems = config.plainItems;\r\n                    config.plainItems = all => {\r\n                        if (all) {\r\n                            return this._dataController.getCachedStoreData() || []\r\n                        }\r\n                        return plainItems.apply(this, arguments).map(item => item.data)\r\n                    };\r\n                    config.isItemSelected = item => {\r\n                        var key = this._dataController.keyOf(item);\r\n                        return this.isRowSelected(key)\r\n                    };\r\n                    config.isSelectableItem = () => true;\r\n                    config.getItemData = item => item;\r\n                    config.allowLoadByRange = () => false;\r\n                    return config\r\n                },\r\n                renderSelectCheckBoxContainer: function($container, model) {\r\n                    var rowsView = this.component.getView(\"rowsView\");\r\n                    $container.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                    var $checkbox = rowsView._renderSelectCheckBox($container, {\r\n                        value: model.row.isSelected,\r\n                        row: model.row,\r\n                        column: model.column\r\n                    });\r\n                    rowsView._attachCheckBoxClickEvent($checkbox)\r\n                },\r\n                _updateSelectColumn: noop,\r\n                _getSelectAllNodeKeys: function() {\r\n                    var component = this.component;\r\n                    var root = component.getRootNode();\r\n                    var cache = {};\r\n                    var keys = [];\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    root && treeListCore.foreachNodes(root.children, (function(node) {\r\n                        if (void 0 !== node.key && (node.visible || isRecursiveSelection)) {\r\n                            keys.push(node.key)\r\n                        }\r\n                        if (!node.visible) {\r\n                            return true\r\n                        }\r\n                        return isRecursiveSelection ? false : component.isRowExpanded(node.key, cache)\r\n                    }));\r\n                    return keys\r\n                },\r\n                isSelectAll: function() {\r\n                    var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n                    if (0 === selectedRowKeys.length) {\r\n                        return false\r\n                    }\r\n                    var component = this.component;\r\n                    var visibleKeys = this._getSelectAllNodeKeys();\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    var hasIndeterminateState = false;\r\n                    var selectedVisibleKeys = visibleKeys.filter((function(key) {\r\n                        var isRowSelected = component.isRowSelected(key, isRecursiveSelection);\r\n                        if (void 0 === isRowSelected) {\r\n                            hasIndeterminateState = true\r\n                        }\r\n                        return isRowSelected\r\n                    }));\r\n                    if (!selectedVisibleKeys.length) {\r\n                        return hasIndeterminateState ? void 0 : false\r\n                    } else if (selectedVisibleKeys.length === visibleKeys.length) {\r\n                        return true\r\n                    }\r\n                },\r\n                selectAll: function() {\r\n                    var visibleKeys = this._getSelectAllNodeKeys().filter(key => !this.isRowSelected(key));\r\n                    this.focusedItemIndex(-1);\r\n                    return this.selectRows(visibleKeys, true)\r\n                },\r\n                deselectAll: function() {\r\n                    var visibleKeys = this._getSelectAllNodeKeys();\r\n                    this.focusedItemIndex(-1);\r\n                    return this.deselectRows(visibleKeys)\r\n                },\r\n                selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {\r\n                    var that = this;\r\n                    var selectedRowKeys = that.option(\"selectedRowKeys\");\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    var normalizedArgs = isRecursiveSelection && that._normalizeSelectionArgs({\r\n                        keys: isDefined(value) ? value : []\r\n                    }, preserve, !isDeselect);\r\n                    if (normalizedArgs && !equalByValue(normalizedArgs.selectedRowKeys, selectedRowKeys)) {\r\n                        that._isSelectionNormalizing = true;\r\n                        return this.callBase(normalizedArgs.selectedRowKeys, false, false, false).always((function() {\r\n                            that._isSelectionNormalizing = false\r\n                        })).done((function(items) {\r\n                            normalizedArgs.selectedRowsData = items;\r\n                            that._fireSelectionChanged(normalizedArgs)\r\n                        }))\r\n                    }\r\n                    return this.callBase(value, preserve, isDeselect, isSelectAll)\r\n                },\r\n                changeItemSelection: function(itemIndex, keyboardKeys) {\r\n                    var isRecursiveSelection = this.isRecursiveSelection();\r\n                    if (isRecursiveSelection && !keyboardKeys.shift) {\r\n                        var key = this._dataController.getKeyByRowIndex(itemIndex);\r\n                        return this.selectedItemKeys(key, true, this.isRowSelected(key)).done(() => {\r\n                            this.isRowSelected(key) && this.callBase(itemIndex, keyboardKeys, true)\r\n                        })\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateParentSelectionState: function(node, isSelected) {\r\n                    var that = this;\r\n                    var state = isSelected;\r\n                    var parentNode = node.parent;\r\n                    if (parentNode) {\r\n                        if (parentNode.children.length > 1) {\r\n                            if (false === isSelected) {\r\n                                var hasSelectedState = parentNode.children.some((function(childNode, index, children) {\r\n                                    return that._selectionStateByKey[childNode.key]\r\n                                }));\r\n                                state = hasSelectedState ? void 0 : false\r\n                            } else if (true === isSelected) {\r\n                                var hasNonSelectedState = parentNode.children.some((function(childNode) {\r\n                                    return !that._selectionStateByKey[childNode.key]\r\n                                }));\r\n                                state = hasNonSelectedState ? void 0 : true\r\n                            }\r\n                        }\r\n                        this._selectionStateByKey[parentNode.key] = state;\r\n                        if (parentNode.parent && parentNode.parent.level >= 0) {\r\n                            this._updateParentSelectionState(parentNode, state)\r\n                        }\r\n                    }\r\n                },\r\n                _updateChildrenSelectionState: function(node, isSelected) {\r\n                    var that = this;\r\n                    var children = node.children;\r\n                    children && children.forEach((function(childNode) {\r\n                        that._selectionStateByKey[childNode.key] = isSelected;\r\n                        if (childNode.children.length > 0) {\r\n                            that._updateChildrenSelectionState(childNode, isSelected)\r\n                        }\r\n                    }))\r\n                },\r\n                _updateSelectionStateCore: function(keys, isSelected) {\r\n                    var dataController = this._dataController;\r\n                    for (var i = 0; i < keys.length; i++) {\r\n                        this._selectionStateByKey[keys[i]] = isSelected;\r\n                        var node = dataController.getNodeByKey(keys[i]);\r\n                        if (node) {\r\n                            this._updateParentSelectionState(node, isSelected);\r\n                            this._updateChildrenSelectionState(node, isSelected)\r\n                        }\r\n                    }\r\n                },\r\n                _getSelectedParentKeys: function(key, selectedItemKeys, useCash) {\r\n                    var selectedParentNode;\r\n                    var node = this._dataController.getNodeByKey(key);\r\n                    var parentNode = node && node.parent;\r\n                    var result = [];\r\n                    while (parentNode && parentNode.level >= 0) {\r\n                        result.unshift(parentNode.key);\r\n                        var isSelected = useCash ? !nodeExists(selectedItemKeys, parentNode.key) && this.isRowSelected(parentNode.key) : selectedItemKeys.indexOf(parentNode.key) >= 0;\r\n                        if (isSelected) {\r\n                            selectedParentNode = parentNode;\r\n                            result = this._getSelectedParentKeys(selectedParentNode.key, selectedItemKeys, useCash).concat(result);\r\n                            break\r\n                        } else if (useCash) {\r\n                            break\r\n                        }\r\n                        parentNode = parentNode.parent\r\n                    }\r\n                    return selectedParentNode && result || []\r\n                },\r\n                _getSelectedChildKeys: function(key, keysToIgnore) {\r\n                    var childKeys = [];\r\n                    var node = this._dataController.getNodeByKey(key);\r\n                    node && treeListCore.foreachNodes(node.children, childNode => {\r\n                        var ignoreKeyIndex = keysToIgnore.indexOf(childNode.key);\r\n                        if (ignoreKeyIndex < 0) {\r\n                            childKeys.push(childNode.key)\r\n                        }\r\n                        return ignoreKeyIndex > 0 || ignoreKeyIndex < 0 && void 0 === this._selectionStateByKey[childNode.key]\r\n                    });\r\n                    return childKeys\r\n                },\r\n                _normalizeParentKeys: function(key, args) {\r\n                    var keysToIgnore = [key];\r\n                    var parentNodeKeys = this._getSelectedParentKeys(key, args.selectedRowKeys);\r\n                    if (parentNodeKeys.length) {\r\n                        keysToIgnore = keysToIgnore.concat(parentNodeKeys);\r\n                        keysToIgnore.forEach((function(key) {\r\n                            var index = args.selectedRowKeys.indexOf(key);\r\n                            if (index >= 0) {\r\n                                args.selectedRowKeys.splice(index, 1)\r\n                            }\r\n                        }));\r\n                        var childKeys = this._getSelectedChildKeys(parentNodeKeys[0], keysToIgnore);\r\n                        args.selectedRowKeys = args.selectedRowKeys.concat(childKeys)\r\n                    }\r\n                },\r\n                _normalizeChildrenKeys: function(key, args) {\r\n                    var node = this._dataController.getNodeByKey(key);\r\n                    node && node.children.forEach(childNode => {\r\n                        var index = args.selectedRowKeys.indexOf(childNode.key);\r\n                        if (index >= 0) {\r\n                            args.selectedRowKeys.splice(index, 1)\r\n                        }\r\n                        this._normalizeChildrenKeys(childNode.key, args)\r\n                    })\r\n                },\r\n                _normalizeSelectedRowKeysCore: function(keys, args, preserve, isSelect) {\r\n                    var that = this;\r\n                    keys.forEach((function(key) {\r\n                        if (preserve && that.isRowSelected(key) === isSelect) {\r\n                            return\r\n                        }\r\n                        that._normalizeChildrenKeys(key, args);\r\n                        var index = args.selectedRowKeys.indexOf(key);\r\n                        if (isSelect) {\r\n                            if (index < 0) {\r\n                                args.selectedRowKeys.push(key)\r\n                            }\r\n                            args.currentSelectedRowKeys.push(key)\r\n                        } else {\r\n                            if (index >= 0) {\r\n                                args.selectedRowKeys.splice(index, 1)\r\n                            }\r\n                            args.currentDeselectedRowKeys.push(key);\r\n                            that._normalizeParentKeys(key, args)\r\n                        }\r\n                    }))\r\n                },\r\n                _normalizeSelectionArgs: function(args, preserve, isSelect) {\r\n                    var result;\r\n                    var keys = Array.isArray(args.keys) ? args.keys : [args.keys];\r\n                    var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n                    if (keys.length) {\r\n                        result = {\r\n                            currentSelectedRowKeys: [],\r\n                            currentDeselectedRowKeys: [],\r\n                            selectedRowKeys: preserve ? selectedRowKeys.slice(0) : []\r\n                        };\r\n                        this._normalizeSelectedRowKeysCore(keys, result, preserve, isSelect)\r\n                    }\r\n                    return result\r\n                },\r\n                _updateSelectedItems: function(args) {\r\n                    this.updateSelectionState(args);\r\n                    this.callBase(args)\r\n                },\r\n                _fireSelectionChanged: function() {\r\n                    if (!this._isSelectionNormalizing) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isModeLeavesOnly: function(mode) {\r\n                    return \"leavesOnly\" === mode\r\n                },\r\n                _removeDuplicatedKeys: function(keys) {\r\n                    var result = [];\r\n                    var processedKeys = {};\r\n                    keys.forEach(key => {\r\n                        if (!processedKeys[key]) {\r\n                            processedKeys[key] = true;\r\n                            result.push(key)\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                _getAllChildKeys(key) {\r\n                    var childKeys = [];\r\n                    var node = this._dataController.getNodeByKey(key);\r\n                    node && treeListCore.foreachNodes(node.children, (function(childNode) {\r\n                        childKeys.push(childNode.key)\r\n                    }), true);\r\n                    return childKeys\r\n                },\r\n                _getAllSelectedRowKeys: function(keys) {\r\n                    var result = [];\r\n                    keys.forEach(key => {\r\n                        var parentKeys = this._getSelectedParentKeys(key, [], true);\r\n                        var childKeys = this._getAllChildKeys(key);\r\n                        result.push.apply(result, parentKeys.concat([key], childKeys))\r\n                    });\r\n                    result = this._removeDuplicatedKeys(result);\r\n                    return result\r\n                },\r\n                _getParentSelectedRowKeys: function(keys) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    keys.forEach(key => {\r\n                        var parentKeys = that._getSelectedParentKeys(key, keys);\r\n                        !parentKeys.length && result.push(key)\r\n                    });\r\n                    return result\r\n                },\r\n                _getLeafSelectedRowKeys: function(keys) {\r\n                    var result = [];\r\n                    var dataController = this._dataController;\r\n                    keys.forEach((function(key) {\r\n                        var node = dataController.getNodeByKey(key);\r\n                        node && !node.hasChildren && result.push(key)\r\n                    }));\r\n                    return result\r\n                },\r\n                isRecursiveSelection: function() {\r\n                    var selectionMode = this.option(\"selection.mode\");\r\n                    var isRecursive = this.option(\"selection.recursive\");\r\n                    return \"multiple\" === selectionMode && isRecursive\r\n                },\r\n                updateSelectionState: function(options) {\r\n                    var removedItemKeys = options.removedItemKeys || [];\r\n                    var selectedItemKeys = options.selectedItemKeys || [];\r\n                    if (this.isRecursiveSelection()) {\r\n                        this._updateSelectionStateCore(removedItemKeys, false);\r\n                        this._updateSelectionStateCore(selectedItemKeys, true)\r\n                    }\r\n                },\r\n                isRowSelected: function(key, isRecursiveSelection) {\r\n                    var _isRecursiveSelection;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    isRecursiveSelection = null !== (_isRecursiveSelection = isRecursiveSelection) && void 0 !== _isRecursiveSelection ? _isRecursiveSelection : this.isRecursiveSelection();\r\n                    if (!result && isRecursiveSelection) {\r\n                        if (key in this._selectionStateByKey) {\r\n                            return this._selectionStateByKey[key]\r\n                        }\r\n                        return false\r\n                    }\r\n                    return result\r\n                },\r\n                getSelectedRowKeys(mode) {\r\n                    if (!this._dataController) {\r\n                        return []\r\n                    }\r\n                    var selectedRowKeys = this.callBase.apply(this, arguments);\r\n                    if (mode) {\r\n                        if (this.isRecursiveSelection()) {\r\n                            selectedRowKeys = this._getAllSelectedRowKeys(selectedRowKeys)\r\n                        }\r\n                        if (\"all\" !== mode) {\r\n                            if (\"excludeRecursive\" === mode) {\r\n                                selectedRowKeys = this._getParentSelectedRowKeys(selectedRowKeys)\r\n                            } else if (this._isModeLeavesOnly(mode)) {\r\n                                selectedRowKeys = this._getLeafSelectedRowKeys(selectedRowKeys)\r\n                            }\r\n                        }\r\n                    }\r\n                    return selectedRowKeys\r\n                },\r\n                getSelectedRowsData: function(mode) {\r\n                    var dataController = this._dataController;\r\n                    var selectedKeys = this.getSelectedRowKeys(mode) || [];\r\n                    var selectedRowsData = [];\r\n                    selectedKeys.forEach((function(key) {\r\n                        var node = dataController.getNodeByKey(key);\r\n                        node && selectedRowsData.push(node.data)\r\n                    }));\r\n                    return selectedRowsData\r\n                },\r\n                refresh: function() {\r\n                    this._selectionStateByKey = {};\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                _processTemplate: function(template, options) {\r\n                    var that = this;\r\n                    var resultTemplate;\r\n                    var renderingTemplate = this.callBase(template, options);\r\n                    var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();\r\n                    if (renderingTemplate && \"header\" === options.rowType && options.column.index === firstDataColumnIndex) {\r\n                        resultTemplate = {\r\n                            render: function(options) {\r\n                                if (\"multiple\" === that.option(\"selection.mode\")) {\r\n                                    that.renderSelectAll(options.container, options.model)\r\n                                }\r\n                                renderingTemplate.render(options)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        resultTemplate = renderingTemplate\r\n                    }\r\n                    return resultTemplate\r\n                },\r\n                renderSelectAll: function($cell, options) {\r\n                    $cell.addClass(TREELIST_SELECT_ALL_CLASS);\r\n                    this._renderSelectAllCheckBox($cell)\r\n                },\r\n                _isSortableElement: function($target) {\r\n                    return this.callBase($target) && !$target.closest(\".\" + SELECT_CHECKBOX_CLASS).length\r\n                }\r\n            },\r\n            rowsView: {\r\n                _renderIcons: function($iconContainer, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (!options.row.isNewRow && \"multiple\" === this.option(\"selection.mode\")) {\r\n                        this.getController(\"selection\").renderSelectCheckBoxContainer($iconContainer, options)\r\n                    }\r\n                    return $iconContainer\r\n                },\r\n                _rowClick: function(e) {\r\n                    var $targetElement = $(e.event.target);\r\n                    if (this.isExpandIcon($targetElement)) {\r\n                        this.callBase.apply(this, arguments)\r\n                    } else {\r\n                        originalRowClick.apply(this, arguments)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));\r\n"]},"metadata":{},"sourceType":"module"}