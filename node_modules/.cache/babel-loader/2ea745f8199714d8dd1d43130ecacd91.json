{"ast":null,"code":"/**\n* DevExpress Analytics (core\\utils\\controlsFactory.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ControlsFactory = void 0;\n\nvar $ = require(\"jquery\");\n\nvar _localization_1 = require(\"../../property-grid/localization/_localization\");\n\nvar _utils_1 = require(\"../../serializer/_utils\");\n\nvar elementViewModel_1 = require(\"../elements/elementViewModel\");\n\nvar _getNameHelpers_1 = require(\"../internal/_getNameHelpers\");\n\nvar ControlsFactory = function () {\n  function ControlsFactory() {\n    this.controlsMap = {};\n  }\n\n  ControlsFactory.prototype.getControlInfo = function (controlType) {\n    var info = this.controlsMap[controlType] || null;\n    return info;\n  };\n\n  ControlsFactory.prototype.getControlType = function (model) {\n    var controlType = _getNameHelpers_1.getTypeNameFromFullName(model['@ControlType'] || '');\n\n    return this.controlsMap[controlType] ? controlType : 'Unknown';\n  };\n\n  ControlsFactory.prototype.createControl = function (model, parent, serializer) {\n    var controlType = this.getControlType(model);\n    return new (this.controlsMap[controlType] && this.controlsMap[controlType].type || elementViewModel_1.ElementViewModel)(model, parent, serializer);\n  };\n\n  ControlsFactory.prototype.registerControl = function (typeName, metadata) {\n    if (metadata.isToolboxItem !== undefined) {\n      metadata.nonToolboxItem = !metadata.isToolboxItem;\n    }\n\n    Object.defineProperty(metadata, 'isToolboxItem', {\n      get: function () {\n        return !metadata.nonToolboxItem;\n      },\n      set: function (newVal) {\n        metadata.nonToolboxItem = !newVal;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    this.controlsMap[typeName] = metadata;\n    this.controlsMap[typeName].info = _utils_1.extend(true, [], metadata.info);\n  };\n\n  ControlsFactory.prototype._getPropertyInfoByDisplayName = function (info, path, position) {\n    return info.filter(function (x) {\n      return _localization_1.getLocalization(x.displayName, x.localizationId) === path[position];\n    })[0];\n  };\n\n  ControlsFactory.prototype._getPropertyInfoByName = function (info, path, position) {\n    return info.filter(function (x) {\n      return x.propertyName === path[position] || x.modelName === '@' + path[position] || x.modelName === path[position];\n    })[0];\n  };\n\n  ControlsFactory.prototype._getPropertyInfo = function (info, path, position) {\n    var propertyInfo = this._getPropertyInfoByDisplayName(info, path, position) || this._getPropertyInfoByName(info, path, position);\n\n    if (position === path.length - 1) {\n      return propertyInfo || null;\n    } else {\n      if (propertyInfo.info) {\n        return this._getPropertyInfo(propertyInfo.info, path, position + 1);\n      } else if (propertyInfo.from) {\n        var object = null;\n\n        try {\n          object = propertyInfo.from({});\n        } catch (e) {\n          return null;\n        }\n\n        var newInfo = object.getInfo && object.getInfo();\n\n        if (newInfo) {\n          return this._getPropertyInfo(newInfo, path, position + 1);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  ControlsFactory.prototype.getPropertyInfo = function (controlType, path) {\n    var properties = path;\n\n    if (!$.isArray(path)) {\n      properties = path.split('.');\n    }\n\n    return this._getPropertyInfo(this.controlsMap[controlType].info, properties, 0);\n  };\n\n  return ControlsFactory;\n}();\n\nexports.ControlsFactory = ControlsFactory;","map":{"version":3,"sources":["/Users/kevinrabari/Desktop/Georgian College Work/1005_ Mobile Web Application/Assignment3/node_modules/@devexpress/analytics-core/core/utils/controlsFactory.js"],"names":["Object","defineProperty","exports","value","ControlsFactory","$","require","_localization_1","_utils_1","elementViewModel_1","_getNameHelpers_1","controlsMap","prototype","getControlInfo","controlType","info","getControlType","model","getTypeNameFromFullName","createControl","parent","serializer","type","ElementViewModel","registerControl","typeName","metadata","isToolboxItem","undefined","nonToolboxItem","get","set","newVal","enumerable","configurable","extend","_getPropertyInfoByDisplayName","path","position","filter","x","getLocalization","displayName","localizationId","_getPropertyInfoByName","propertyName","modelName","_getPropertyInfo","propertyInfo","length","from","object","e","newInfo","getInfo","getPropertyInfo","properties","isArray","split"],"mappings":"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","sourcesContent":["/**\n* DevExpress Analytics (core\\utils\\controlsFactory.js)\n* Version:  22.1.3\n* Build date: Jun 14, 2022\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\n*/\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ControlsFactory = void 0;\nvar $ = require(\"jquery\");\nvar _localization_1 = require(\"../../property-grid/localization/_localization\");\nvar _utils_1 = require(\"../../serializer/_utils\");\nvar elementViewModel_1 = require(\"../elements/elementViewModel\");\nvar _getNameHelpers_1 = require(\"../internal/_getNameHelpers\");\nvar ControlsFactory = (function () {\n    function ControlsFactory() {\n        this.controlsMap = {};\n    }\n    ControlsFactory.prototype.getControlInfo = function (controlType) {\n        var info = this.controlsMap[controlType] || null;\n        return info;\n    };\n    ControlsFactory.prototype.getControlType = function (model) {\n        var controlType = _getNameHelpers_1.getTypeNameFromFullName(model['@ControlType'] || '');\n        return this.controlsMap[controlType] ? controlType : 'Unknown';\n    };\n    ControlsFactory.prototype.createControl = function (model, parent, serializer) {\n        var controlType = this.getControlType(model);\n        return new (this.controlsMap[controlType] && this.controlsMap[controlType].type || elementViewModel_1.ElementViewModel)(model, parent, serializer);\n    };\n    ControlsFactory.prototype.registerControl = function (typeName, metadata) {\n        if (metadata.isToolboxItem !== undefined) {\n            metadata.nonToolboxItem = !metadata.isToolboxItem;\n        }\n        Object.defineProperty(metadata, 'isToolboxItem', {\n            get: function () {\n                return !metadata.nonToolboxItem;\n            },\n            set: function (newVal) {\n                metadata.nonToolboxItem = !newVal;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        this.controlsMap[typeName] = metadata;\n        this.controlsMap[typeName].info = _utils_1.extend(true, [], metadata.info);\n    };\n    ControlsFactory.prototype._getPropertyInfoByDisplayName = function (info, path, position) {\n        return info.filter(function (x) { return _localization_1.getLocalization(x.displayName, x.localizationId) === path[position]; })[0];\n    };\n    ControlsFactory.prototype._getPropertyInfoByName = function (info, path, position) {\n        return info.filter(function (x) { return x.propertyName === path[position] || x.modelName === '@' + path[position] || x.modelName === path[position]; })[0];\n    };\n    ControlsFactory.prototype._getPropertyInfo = function (info, path, position) {\n        var propertyInfo = this._getPropertyInfoByDisplayName(info, path, position) || this._getPropertyInfoByName(info, path, position);\n        if (position === path.length - 1) {\n            return propertyInfo || null;\n        }\n        else {\n            if (propertyInfo.info) {\n                return this._getPropertyInfo(propertyInfo.info, path, position + 1);\n            }\n            else if (propertyInfo.from) {\n                var object = null;\n                try {\n                    object = propertyInfo.from({});\n                }\n                catch (e) {\n                    return null;\n                }\n                var newInfo = object.getInfo && object.getInfo();\n                if (newInfo) {\n                    return this._getPropertyInfo(newInfo, path, position + 1);\n                }\n            }\n        }\n        return null;\n    };\n    ControlsFactory.prototype.getPropertyInfo = function (controlType, path) {\n        var properties = path;\n        if (!$.isArray(path)) {\n            properties = path.split('.');\n        }\n        return this._getPropertyInfo(this.controlsMap[controlType].info, properties, 0);\n    };\n    return ControlsFactory;\n}());\nexports.ControlsFactory = ControlsFactory;\n"]},"metadata":{},"sourceType":"script"}