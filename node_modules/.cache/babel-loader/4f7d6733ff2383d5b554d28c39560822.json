{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_options-manager.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventManager = exports.mergeOptions = exports.OptionsManager = exports.isEventName = exports.getOptionNameByEvent = exports.getEventName = void 0;\n\nvar data_1 = require(\"devextreme/core/utils/data\");\n\nvar getEventName = function (actionName) {\n  return actionName.charAt(2).toLowerCase() + actionName.substr(3);\n};\n\nexports.getEventName = getEventName;\n\nvar getOptionNameByEvent = function (eventName) {\n  return 'on' + eventName.charAt(0).toUpperCase() + eventName.substr(1);\n};\n\nexports.getOptionNameByEvent = getOptionNameByEvent;\n\nvar isEventName = function (actionName) {\n  return actionName && actionName.length && actionName.indexOf('on') === 0 && actionName.charAt(2).toUpperCase() === actionName.charAt(2);\n};\n\nexports.isEventName = isEventName;\n\nvar OptionsManager = function () {\n  function OptionsManager() {\n    this._internalEvents = new EventManager();\n    this._cachedSetters = {};\n  }\n\n  OptionsManager.prototype.initialize = function (_config) {\n    this._config = _config;\n    this._dashboardControl = _config.dashboardControl;\n\n    if (_config.eventsHolder) {\n      _config.eventsHolder.on = this._internalEvents.on;\n      _config.eventsHolder.off = this._internalEvents.off;\n    }\n  };\n\n  OptionsManager.prototype.getDefaultOptions = function () {\n    return this._config.defaultOptions;\n  };\n\n  OptionsManager.prototype.getInitialOptions = function () {\n    var res = {};\n\n    this._merge(res, this._config.defaultOptions);\n\n    this._merge(res, this._config.initOptions);\n\n    return res;\n  };\n\n  OptionsManager.prototype.dispose = function () {\n    this._internalEvents.dispose();\n  };\n\n  OptionsManager.prototype.optionChanged = function (args) {\n    return this._config.optionChanged(args);\n  };\n\n  OptionsManager.prototype.raiseEvent = function (eventName, eventArgs) {\n    var optionName = \"extensions.\" + this._config.alias + \".\" + exports.getOptionNameByEvent(eventName);\n\n    var delegateFromOptions = this._dashboardControl.option(optionName);\n\n    if (typeof delegateFromOptions === 'function') {\n      delegateFromOptions.call(this._dashboardControl, eventArgs);\n    }\n\n    this._internalEvents.raise(eventName, eventArgs);\n  };\n\n  OptionsManager.prototype.get = function (optionName) {\n    return this._dashboardControl.option(\"extensions.\" + this._config.alias + \".\" + optionName);\n  };\n\n  OptionsManager.prototype.set = function (optionName, value) {\n    return this._set(optionName, value, false);\n  };\n\n  OptionsManager.prototype.silent = function (optionName, value) {\n    return this._set(optionName, value, true);\n  };\n\n  OptionsManager.prototype._set = function (optionName, value, silent) {\n    var name = \"extensions.\" + this._config.alias + \".\" + optionName;\n    return silent ? this._dashboardControl._silent(name, value) : this._dashboardControl.option(name, value);\n  };\n\n  OptionsManager.prototype._merge = function (target, source) {\n    exports.mergeOptions(target, source, this._cachedSetters);\n  };\n\n  return OptionsManager;\n}();\n\nexports.OptionsManager = OptionsManager;\n\nvar mergeOptions = function (target, source, externalCache) {\n  if (externalCache === void 0) {\n    externalCache = {};\n  }\n\n  for (var name in source) {\n    var setter = externalCache[name];\n    if (setter === undefined) setter = externalCache[name] = data_1.compileSetter(name);\n    setter(target, source[name], {\n      functionsAsIs: true,\n      merge: true,\n      unwrapObservables: false\n    });\n  }\n};\n\nexports.mergeOptions = mergeOptions;\n\nvar EventManager = function () {\n  function EventManager() {\n    var _this = this;\n\n    this._handlers = [];\n\n    this.on = function (eventName, eventHandler) {\n      if (!_this._handlers.filter(function (handler) {\n        return handler.eventName === eventName && handler.event === eventHandler;\n      })[0]) {\n        _this._handlers.push({\n          eventName: eventName,\n          event: eventHandler\n        });\n      }\n    };\n\n    this.off = function (eventName, eventHandler) {\n      var eventInfo = _this._handlers.filter(function (handler) {\n        return handler.eventName === eventName && handler.event === eventHandler;\n      })[0];\n\n      var index = _this._handlers.indexOf(eventInfo);\n\n      if (index !== -1) {\n        _this._handlers.splice(index, 1);\n      }\n    };\n  }\n\n  EventManager.prototype.dispose = function () {\n    this._handlers = [];\n  };\n\n  EventManager.prototype.raise = function (eventName, eventArgs) {\n    this._handlers.filter(function (handler) {\n      return handler.eventName === eventName;\n    }).forEach(function (handler) {\n      return handler.event(eventArgs);\n    });\n  };\n\n  return EventManager;\n}();\n\nexports.EventManager = EventManager;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/common/internal/_options-manager.js"],"names":["Object","defineProperty","exports","value","EventManager","mergeOptions","OptionsManager","isEventName","getOptionNameByEvent","getEventName","data_1","require","actionName","charAt","toLowerCase","substr","eventName","toUpperCase","length","indexOf","_internalEvents","_cachedSetters","prototype","initialize","_config","_dashboardControl","dashboardControl","eventsHolder","on","off","getDefaultOptions","defaultOptions","getInitialOptions","res","_merge","initOptions","dispose","optionChanged","args","raiseEvent","eventArgs","optionName","alias","delegateFromOptions","option","call","raise","get","set","_set","silent","name","_silent","target","source","externalCache","setter","undefined","compileSetter","functionsAsIs","merge","unwrapObservables","_this","_handlers","eventHandler","filter","handler","event","push","eventInfo","index","splice","forEach"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_options-manager.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventManager = exports.mergeOptions = exports.OptionsManager = exports.isEventName = exports.getOptionNameByEvent = exports.getEventName = void 0;\nvar data_1 = require(\"devextreme/core/utils/data\");\nvar getEventName = function (actionName) {\n    return actionName.charAt(2).toLowerCase() + actionName.substr(3);\n};\nexports.getEventName = getEventName;\nvar getOptionNameByEvent = function (eventName) {\n    return 'on' + eventName.charAt(0).toUpperCase() + eventName.substr(1);\n};\nexports.getOptionNameByEvent = getOptionNameByEvent;\nvar isEventName = function (actionName) {\n    return actionName && actionName.length && actionName.indexOf('on') === 0 && actionName.charAt(2).toUpperCase() === actionName.charAt(2);\n};\nexports.isEventName = isEventName;\nvar OptionsManager = (function () {\n    function OptionsManager() {\n        this._internalEvents = new EventManager();\n        this._cachedSetters = {};\n    }\n    OptionsManager.prototype.initialize = function (_config) {\n        this._config = _config;\n        this._dashboardControl = _config.dashboardControl;\n        if (_config.eventsHolder) {\n            _config.eventsHolder.on = this._internalEvents.on;\n            _config.eventsHolder.off = this._internalEvents.off;\n        }\n    };\n    OptionsManager.prototype.getDefaultOptions = function () {\n        return this._config.defaultOptions;\n    };\n    OptionsManager.prototype.getInitialOptions = function () {\n        var res = {};\n        this._merge(res, this._config.defaultOptions);\n        this._merge(res, this._config.initOptions);\n        return res;\n    };\n    OptionsManager.prototype.dispose = function () {\n        this._internalEvents.dispose();\n    };\n    OptionsManager.prototype.optionChanged = function (args) {\n        return this._config.optionChanged(args);\n    };\n    OptionsManager.prototype.raiseEvent = function (eventName, eventArgs) {\n        var optionName = \"extensions.\" + this._config.alias + \".\" + exports.getOptionNameByEvent(eventName);\n        var delegateFromOptions = this._dashboardControl.option(optionName);\n        if (typeof delegateFromOptions === 'function') {\n            delegateFromOptions.call(this._dashboardControl, eventArgs);\n        }\n        this._internalEvents.raise(eventName, eventArgs);\n    };\n    OptionsManager.prototype.get = function (optionName) {\n        return this._dashboardControl.option(\"extensions.\" + this._config.alias + \".\" + optionName);\n    };\n    OptionsManager.prototype.set = function (optionName, value) {\n        return this._set(optionName, value, false);\n    };\n    OptionsManager.prototype.silent = function (optionName, value) {\n        return this._set(optionName, value, true);\n    };\n    OptionsManager.prototype._set = function (optionName, value, silent) {\n        var name = \"extensions.\" + this._config.alias + \".\" + optionName;\n        return silent ? this._dashboardControl._silent(name, value) : this._dashboardControl.option(name, value);\n    };\n    OptionsManager.prototype._merge = function (target, source) {\n        exports.mergeOptions(target, source, this._cachedSetters);\n    };\n    return OptionsManager;\n}());\nexports.OptionsManager = OptionsManager;\nvar mergeOptions = function (target, source, externalCache) {\n    if (externalCache === void 0) { externalCache = {}; }\n    for (var name in source) {\n        var setter = externalCache[name];\n        if (setter === undefined)\n            setter = externalCache[name] = data_1.compileSetter(name);\n        setter(target, source[name], {\n            functionsAsIs: true,\n            merge: true,\n            unwrapObservables: false\n        });\n    }\n};\nexports.mergeOptions = mergeOptions;\nvar EventManager = (function () {\n    function EventManager() {\n        var _this = this;\n        this._handlers = [];\n        this.on = function (eventName, eventHandler) {\n            if (!_this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0]) {\n                _this._handlers.push({\n                    eventName: eventName,\n                    event: eventHandler\n                });\n            }\n        };\n        this.off = function (eventName, eventHandler) {\n            var eventInfo = _this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0];\n            var index = _this._handlers.indexOf(eventInfo);\n            if (index !== -1) {\n                _this._handlers.splice(index, 1);\n            }\n        };\n    }\n    EventManager.prototype.dispose = function () {\n        this._handlers = [];\n    };\n    EventManager.prototype.raise = function (eventName, eventArgs) {\n        this._handlers\n            .filter(function (handler) { return handler.eventName === eventName; })\n            .forEach(function (handler) { return handler.event(eventArgs); });\n    };\n    return EventManager;\n}());\nexports.EventManager = EventManager;\n"]},"metadata":{},"sourceType":"script"}