{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_grid-data-controller.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gridDataController = void 0;\n\nvar $ = require(\"jquery\");\n\nvar item_data_axis_names_1 = require(\"../item-data/item-data-axis-names\");\n\nvar _grid_bar_calculator_1 = require(\"../_grid-bar-calculator\");\n\nvar _utils_1 = require(\"../_utils\");\n\nvar _data_controller_base_1 = require(\"./_data-controller-base\");\n\nvar GridColumnType = {\n  Dimension: 'Dimension',\n  Measure: 'Measure',\n  Delta: 'Delta',\n  Sparkline: 'Sparkline',\n  Hyperlink: 'Hyperlink'\n};\n\nvar gridDataController = function (_super) {\n  __extends(gridDataController, _super);\n\n  function gridDataController(options) {\n    var _this = _super.call(this, options) || this;\n\n    var pushColumn = function (columnName, columnViewModel) {\n      _this._columnRepository[columnName] = {\n        columnName: columnName,\n        column: columnViewModel,\n        barCalculator: columnViewModel.BarViewModel ? new _grid_bar_calculator_1.GridBarCalculator(columnViewModel.BarViewModel.AlwaysShowZeroLevel) : null\n      };\n\n      if (_this.viewModel.SelectionDataMembers && _this.viewModel.SelectionDataMembers.indexOf(columnName) !== -1) {\n        _this._selectionMembers.push(columnName);\n      }\n    };\n\n    _this._columnRepository = {};\n    _this._selectionMembers = [];\n\n    if (!!_this.multiData) {\n      if (!!_this.viewModel.HasDimensionColumns) {\n        _this._axisColumnPoints = _this.multiData.getAxis(_this.viewModel.ColumnAxisName).getPoints();\n      }\n\n      if (!!_this.viewModel.SparklineAxisName) {\n        _this._axisSparklinePoints = _this.multiData.getAxis(_this.viewModel.SparklineAxisName).getPoints();\n      }\n\n      (_this.viewModel.Columns || []).forEach(function (columnViewModel) {\n        pushColumn(columnViewModel.DataId, columnViewModel);\n        if (!!_this._columnRepository[columnViewModel.DataId].barCalculator) _this.initializeColumnBarCalculator(_this._columnRepository[columnViewModel.DataId]);\n      });\n    }\n\n    return _this;\n  }\n\n  gridDataController.prototype.getDataSource = function () {\n    var that = this,\n        list = [],\n        listItem,\n        hasColumns = (that.viewModel.Columns || []).length > 0,\n        axisPointsCount = !!that._axisColumnPoints ? that._axisColumnPoints.length : +hasColumns;\n\n    for (var rowIndex = 0; rowIndex < axisPointsCount; rowIndex++) {\n      listItem = {\n        index: rowIndex\n      };\n      Object.keys(that._columnRepository).forEach(function (columnName) {\n        var columnInfo = that._columnRepository[columnName];\n\n        var valueItem = that._getValueItem(columnInfo, rowIndex);\n\n        listItem[columnName] = valueItem.getValue();\n\n        if (columnInfo.column.ColumnType === GridColumnType.Hyperlink && !!columnInfo.column.DataAttributeId) {\n          listItem[columnName + '_' + columnInfo.column.DataAttributeId] = valueItem.getUriValue();\n        }\n      });\n      list.push(listItem);\n    }\n\n    return list;\n  };\n\n  gridDataController.prototype.initializeColumnBarCalculator = function (barColumn) {\n    var columnValues = [];\n    var axisPointsCount = !!this._axisColumnPoints ? this._axisColumnPoints.length : 1;\n\n    for (var rowIndex = 0; rowIndex < axisPointsCount; rowIndex++) columnValues.push(this._getMeasureCellValue(barColumn.columnName, rowIndex).getValue());\n\n    barColumn.barCalculator.initialize(Math.min.apply(Math, columnValues), Math.max.apply(Math, columnValues));\n  };\n\n  gridDataController.prototype.getValueItem = function (columnName, rowIndex) {\n    return this._getValueItem(this._columnRepository[columnName], rowIndex);\n  };\n\n  gridDataController.prototype._getValueItem = function (columnInfo, rowIndex) {\n    var that = this;\n    var columnName = columnInfo.columnName;\n\n    switch (columnInfo.column.ColumnType) {\n      case GridColumnType.Measure:\n        if (columnInfo.column.DisplayMode === 'Bar') {\n          return this._getBarCellValue(columnName, rowIndex, columnInfo.barCalculator);\n        } else {\n          return this._getMeasureCellValue(columnName, rowIndex);\n        }\n\n      case GridColumnType.Delta:\n        return that._getDeltaValue(columnName, rowIndex, columnInfo.column.DisplayMode === 'Bar' ? columnInfo.barCalculator : null, columnInfo.column.DeltaValueType, columnInfo.column.IgnoreDeltaColor);\n\n      case GridColumnType.Sparkline:\n        return that._getSparklineCellValues(columnName, rowIndex, columnInfo.column.SparklineOptions);\n\n      case GridColumnType.Hyperlink:\n        return that._getCellValue(columnName, columnInfo.column.DataAttributeId, rowIndex);\n\n      case GridColumnType.Dimension:\n        return that._getCellValue(columnName, null, rowIndex);\n    }\n  };\n\n  gridDataController.prototype.getSelectionValues = function (values) {\n    var that = this,\n        point,\n        resultPoint,\n        result = [],\n        selectionMembers = that._selectionMembers,\n        fit,\n        columns = that.viewModel.Columns,\n        visibleDimensions = columns.map(function (column) {\n      return column.DataId;\n    });\n    if (values.length > selectionMembers.length) values = values.slice(-selectionMembers.length);\n    $.each(that._axisColumnPoints, function (index, axisPoint) {\n      fit = false;\n      $.each(selectionMembers, function (memberIndex, member) {\n        point = that._findAxisPoint(member, axisPoint);\n\n        if (point && values.length > memberIndex) {\n          if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[memberIndex], true)) {\n            fit = false;\n            return false;\n          }\n\n          resultPoint = point;\n        }\n\n        fit = true;\n      });\n\n      if (fit && resultPoint) {\n        result = resultPoint._selectPath(function (point) {\n          var index = visibleDimensions.indexOf(point.getDimension().id);\n          if (index === -1 || columns[index].DisplayMode != 'Image') return point.getUniqueValue();else return;\n        });\n        return;\n      }\n    });\n    return result;\n  };\n\n  gridDataController.prototype.getSelectedRowKeys = function (valuesSet) {\n    var that = this,\n        keys = [],\n        selectionMembers = that._selectionMembers,\n        checkAxisPoint = function (axisPoint, values) {\n      var point;\n\n      for (var i = 0; i < values.length; i++) {\n        point = that._findAxisPoint(selectionMembers[i], axisPoint);\n        if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[i], true)) return false;\n      }\n\n      return true;\n    };\n\n    $.each(that._axisColumnPoints, function (index, axisPoint) {\n      $.each(valuesSet, function (_, values) {\n        if (values.length > selectionMembers.length) values = values.slice(-selectionMembers.length);\n\n        if (checkAxisPoint(axisPoint, values)) {\n          keys.push(index);\n          return;\n        }\n      });\n    });\n    return keys;\n  };\n\n  gridDataController.prototype.getDimensionValues = function (rowIndex) {\n    var columnAxisPoint = this._getColumnAxisPoint(rowIndex);\n\n    return columnAxisPoint ? columnAxisPoint.getUniquePath() : [];\n  };\n\n  gridDataController.prototype.getTotalValue = function (measureId) {\n    return this.multiData.getMeasureValue(measureId).getDisplayText();\n  };\n\n  gridDataController.prototype._getBarCellValue = function (columnName, rowIndex, barCalculator) {\n    var that = this,\n        item = this.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));\n    barCalculator.addValue(rowIndex, item);\n    return {\n      getValue: function () {\n        return item.getValue();\n      },\n      getData: function () {\n        return that._getBarData(barCalculator, item, rowIndex);\n      },\n      getStyleSettingsInfo: function () {\n        return that._getStyleSettingsInfo(columnName, rowIndex);\n      }\n    };\n  };\n\n  gridDataController.prototype._getBarData = function (barCalculator, item, rowIndex) {\n    return {\n      zeroValue: barCalculator.getZeroPosition(),\n      normalizedValue: barCalculator.getNormalizedValue(rowIndex || 0),\n      text: item.getDisplayText()\n    };\n  };\n\n  gridDataController.prototype._getMeasureCellValue = function (columnName, rowIndex) {\n    var that = this,\n        item = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex)),\n        value = item.getValue();\n    return {\n      getValue: function () {\n        return value;\n      },\n      getData: function () {\n        return {\n          value: item.getValue(),\n          displayText: item.getDisplayText()\n        };\n      },\n      getStyleSettingsInfo: function () {\n        return that._getStyleSettingsInfo(columnName, rowIndex);\n      }\n    };\n  };\n\n  gridDataController.prototype._getCellValue = function (columnName, uriColumnName, rowIndex) {\n    var that = this,\n        item = undefined,\n        uriItem = !!uriColumnName ? that.multiData.getMeasureValueByAxisPoints(uriColumnName, that._getPointArray(rowIndex)) : null,\n        obtainItem = function () {\n      if (item === undefined) {\n        item = that._findAxisPoint(columnName, that._getColumnAxisPoint(rowIndex)) || {\n          getValue: function () {\n            return undefined;\n          },\n          getUniqueValue: function () {\n            return undefined;\n          },\n          getDisplayText: function () {\n            return '';\n          }\n        };\n      }\n\n      return item;\n    };\n\n    var cellValue = {\n      getValue: function () {\n        return obtainItem().getValue();\n      },\n      getUniqueValue: function () {\n        return obtainItem().getUniqueValue();\n      },\n      getData: function () {\n        return {\n          value: obtainItem().getValue(),\n          displayText: obtainItem().getDisplayText()\n        };\n      },\n      getStyleSettingsInfo: function () {\n        return that._getStyleSettingsInfo(columnName, rowIndex);\n      }\n    };\n\n    cellValue.getUriValue = function () {\n      return !!uriItem ? uriItem.getValue() : obtainItem().getDisplayText();\n    };\n\n    return cellValue;\n  };\n\n  gridDataController.prototype._getStyleSettingsInfo = function (columnName, rowIndex) {\n    var that = this,\n        rules = [],\n        cellInfo = {\n      rowIndex: rowIndex\n    };\n\n    if (that.cfModel) {\n      rules = $.grep(that.cfModel.RuleModels, function (rule) {\n        return rule.ApplyToRow || rule.ApplyToDataId === columnName;\n      });\n    }\n\n    return that._getStyleSettingsInfoCore(cellInfo, rules, that.viewModel.ColumnAxisName, item_data_axis_names_1.itemDataAxisNames.defaultAxis);\n  };\n\n  gridDataController.prototype._getStyleIndexes = function (rule, cellInfo, points) {\n    var that = this,\n        axisPoint,\n        currentStyleIndexes,\n        styleIndexes = [];\n    axisPoint = cellInfo.rowIndex !== undefined ? that._getAxisPoint(cellInfo.rowIndex, rule.CalcByDataId) : undefined;\n    if (axisPoint) points.push(axisPoint);\n    currentStyleIndexes = that._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);\n\n    if (currentStyleIndexes) {\n      styleIndexes = styleIndexes.concat(currentStyleIndexes);\n    }\n\n    return styleIndexes;\n  };\n\n  gridDataController.prototype._getAxisPoint = function (rowIndex, columnInfo) {\n    var axisPoint = rowIndex !== undefined && !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined,\n        correctAxisPoint = axisPoint ? this._findAxisPoint(columnInfo, axisPoint) : undefined;\n    return correctAxisPoint || axisPoint;\n  };\n\n  gridDataController.prototype._getDeltaValue = function (columnName, rowIndex, barCalculator, deltaType, useDefaultColor) {\n    var that = this,\n        deltaValue = null,\n        deltaValueItem = null,\n        measureValue = null,\n        deltaDesriptor = that.multiData.getDeltaById(columnName),\n        measureItem,\n        idBarDisplayMode = !!barCalculator,\n        getStyleSettingsInfo = function (columnName, rowIndex) {\n      return that._getStyleSettingsInfo(columnName, rowIndex);\n    };\n\n    if (deltaDesriptor) {\n      deltaValue = that.multiData.getDeltaValueByAxisPoints(columnName, that._getPointArray(rowIndex));\n      deltaValueItem = that._getDeltaValueItem(deltaValue, deltaType);\n      if (idBarDisplayMode) barCalculator.addValue(rowIndex, deltaValueItem);\n      return {\n        getValue: function () {\n          return deltaValueItem.getValue();\n        },\n        getData: function () {\n          if (idBarDisplayMode) {\n            return that._getBarData(barCalculator, deltaValueItem, rowIndex);\n          } else {\n            return {\n              type: that._convertIndicatorType(deltaValue.getIndicatorType().getValue()),\n              hasPositiveMeaning: deltaValue.getIsGood().getValue(),\n              text: {\n                value: deltaValueItem.getDisplayText(),\n                useDefaultColor: useDefaultColor\n              }\n            };\n          }\n        },\n        getStyleSettingsInfo: function () {\n          return that._getStyleSettingsInfo(columnName, rowIndex);\n        }\n      };\n    } else {\n      measureItem = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));\n      if (idBarDisplayMode) barCalculator.addValue(rowIndex, measureItem);\n      return {\n        getValue: function () {\n          return measureItem.getValue();\n        },\n        getData: function () {\n          if (idBarDisplayMode) {\n            return that._getBarData(barCalculator, measureItem, rowIndex);\n          } else {\n            return {\n              type: null,\n              hasPositiveMeaning: null,\n              text: {\n                value: measureItem.getDisplayText(),\n                useDefaultColor: null\n              }\n            };\n          }\n        },\n        getStyleSettingsInfo: function () {\n          return that._getStyleSettingsInfo(columnName, rowIndex);\n        }\n      };\n    }\n  };\n\n  gridDataController.prototype._getDeltaValueItem = function (deltaValue, deltaValueType) {\n    switch (deltaValueType) {\n      case 'ActualValue':\n        return deltaValue.getActualValue();\n\n      case 'AbsoluteVariation':\n        return deltaValue.getAbsoluteVariation();\n\n      case 'PercentVariation':\n        return deltaValue.getPercentVariation();\n\n      case 'PercentOfTarget':\n        return deltaValue.getPercentOfTarget();\n\n      case 'TargetValue':\n        return deltaValue.getTargetValue();\n    }\n  };\n\n  gridDataController.prototype._getSparklineCellValues = function (columnName, rowIndex, sparklineOptions) {\n    var that = this,\n        measureDescriptor = that.multiData.getMeasureById(columnName),\n        axisPoint = that._getPointArray(rowIndex),\n        getValues = function (getter) {\n      var result = [];\n\n      if (!!that._axisSparklinePoints) {\n        $.each(that._axisSparklinePoints, function (_, sparklinePoint) {\n          result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint.concat(sparklinePoint))));\n        });\n      } else {\n        result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint)));\n      }\n\n      return result;\n    },\n        values = getValues(function (item) {\n      var value = item.getValue();\n      return value || 0;\n    });\n\n    return {\n      getValue: function () {\n        return values;\n      },\n      getData: function () {\n        var valuesItems = getValues(function (item) {\n          return item;\n        }),\n            startValue = valuesItems[0].getValue(),\n            endValue = valuesItems[valuesItems.length - 1].getValue();\n        return {\n          sparkline: that._generateSparklineOptions(values, sparklineOptions, measureDescriptor.format),\n          startText: startValue ? valuesItems[0].getDisplayText() : measureDescriptor.format(0),\n          endText: endValue ? valuesItems[valuesItems.length - 1].getDisplayText() : measureDescriptor.format(0)\n        };\n      },\n      getStyleSettingsInfo: function () {\n        return that._getStyleSettingsInfo(columnName, rowIndex);\n      }\n    };\n  };\n\n  gridDataController.prototype._getColumnAxisPoint = function (rowIndex) {\n    return !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined;\n  };\n\n  gridDataController.prototype._getPointArray = function (rowIndex) {\n    var point = this._getColumnAxisPoint(rowIndex),\n        array = [];\n\n    if (point) array.push(point);\n    return array;\n  };\n\n  return gridDataController;\n}(_data_controller_base_1.dataControllerBase);\n\nexports.gridDataController = gridDataController;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/data/data-controllers/_grid-data-controller.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","gridDataController","$","require","item_data_axis_names_1","_grid_bar_calculator_1","_utils_1","_data_controller_base_1","GridColumnType","Dimension","Measure","Delta","Sparkline","Hyperlink","_super","options","_this","pushColumn","columnName","columnViewModel","_columnRepository","column","barCalculator","BarViewModel","GridBarCalculator","AlwaysShowZeroLevel","viewModel","SelectionDataMembers","indexOf","_selectionMembers","push","multiData","HasDimensionColumns","_axisColumnPoints","getAxis","ColumnAxisName","getPoints","SparklineAxisName","_axisSparklinePoints","Columns","forEach","DataId","initializeColumnBarCalculator","getDataSource","that","list","listItem","hasColumns","length","axisPointsCount","rowIndex","index","keys","columnInfo","valueItem","_getValueItem","getValue","ColumnType","DataAttributeId","getUriValue","barColumn","columnValues","_getMeasureCellValue","initialize","Math","min","apply","max","getValueItem","DisplayMode","_getBarCellValue","_getDeltaValue","DeltaValueType","IgnoreDeltaColor","_getSparklineCellValues","SparklineOptions","_getCellValue","getSelectionValues","values","point","resultPoint","result","selectionMembers","fit","columns","visibleDimensions","map","slice","each","axisPoint","memberIndex","member","_findAxisPoint","checkValuesAreEqual","getUniqueValue","_selectPath","getDimension","id","getSelectedRowKeys","valuesSet","checkAxisPoint","i","_","getDimensionValues","columnAxisPoint","_getColumnAxisPoint","getUniquePath","getTotalValue","measureId","getMeasureValue","getDisplayText","item","getMeasureValueByAxisPoints","_getPointArray","addValue","getData","_getBarData","getStyleSettingsInfo","_getStyleSettingsInfo","zeroValue","getZeroPosition","normalizedValue","getNormalizedValue","text","displayText","uriColumnName","undefined","uriItem","obtainItem","cellValue","rules","cellInfo","cfModel","grep","RuleModels","rule","ApplyToRow","ApplyToDataId","_getStyleSettingsInfoCore","itemDataAxisNames","defaultAxis","_getStyleIndexes","points","currentStyleIndexes","styleIndexes","_getAxisPoint","CalcByDataId","_getMeasureValueByAxisPoints","FormatConditionMeasureId","concat","correctAxisPoint","deltaType","useDefaultColor","deltaValue","deltaValueItem","measureValue","deltaDesriptor","getDeltaById","measureItem","idBarDisplayMode","getDeltaValueByAxisPoints","_getDeltaValueItem","type","_convertIndicatorType","getIndicatorType","hasPositiveMeaning","getIsGood","deltaValueType","getActualValue","getAbsoluteVariation","getPercentVariation","getPercentOfTarget","getTargetValue","sparklineOptions","measureDescriptor","getMeasureById","getValues","getter","sparklinePoint","valuesItems","startValue","endValue","sparkline","_generateSparklineOptions","format","startText","endText","array","dataControllerBase"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_grid-data-controller.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gridDataController = void 0;\nvar $ = require(\"jquery\");\nvar item_data_axis_names_1 = require(\"../item-data/item-data-axis-names\");\nvar _grid_bar_calculator_1 = require(\"../_grid-bar-calculator\");\nvar _utils_1 = require(\"../_utils\");\nvar _data_controller_base_1 = require(\"./_data-controller-base\");\nvar GridColumnType = {\n    Dimension: 'Dimension',\n    Measure: 'Measure',\n    Delta: 'Delta',\n    Sparkline: 'Sparkline',\n    Hyperlink: 'Hyperlink'\n};\nvar gridDataController = (function (_super) {\n    __extends(gridDataController, _super);\n    function gridDataController(options) {\n        var _this = _super.call(this, options) || this;\n        var pushColumn = function (columnName, columnViewModel) {\n            _this._columnRepository[columnName] = {\n                columnName: columnName,\n                column: columnViewModel,\n                barCalculator: columnViewModel.BarViewModel ? new _grid_bar_calculator_1.GridBarCalculator(columnViewModel.BarViewModel.AlwaysShowZeroLevel) : null\n            };\n            if (_this.viewModel.SelectionDataMembers && _this.viewModel.SelectionDataMembers.indexOf(columnName) !== -1) {\n                _this._selectionMembers.push(columnName);\n            }\n        };\n        _this._columnRepository = {};\n        _this._selectionMembers = [];\n        if (!!_this.multiData) {\n            if (!!_this.viewModel.HasDimensionColumns) {\n                _this._axisColumnPoints = _this.multiData.getAxis(_this.viewModel.ColumnAxisName).getPoints();\n            }\n            if (!!_this.viewModel.SparklineAxisName) {\n                _this._axisSparklinePoints = _this.multiData.getAxis(_this.viewModel.SparklineAxisName).getPoints();\n            }\n            (_this.viewModel.Columns || []).forEach(function (columnViewModel) {\n                pushColumn(columnViewModel.DataId, columnViewModel);\n                if (!!_this._columnRepository[columnViewModel.DataId].barCalculator)\n                    _this.initializeColumnBarCalculator(_this._columnRepository[columnViewModel.DataId]);\n            });\n        }\n        return _this;\n    }\n    gridDataController.prototype.getDataSource = function () {\n        var that = this, list = [], listItem, hasColumns = (that.viewModel.Columns || []).length > 0, axisPointsCount = !!that._axisColumnPoints ? that._axisColumnPoints.length : +hasColumns;\n        for (var rowIndex = 0; rowIndex < axisPointsCount; rowIndex++) {\n            listItem = { index: rowIndex };\n            Object.keys(that._columnRepository).forEach(function (columnName) {\n                var columnInfo = that._columnRepository[columnName];\n                var valueItem = that._getValueItem(columnInfo, rowIndex);\n                listItem[columnName] = valueItem.getValue();\n                if (columnInfo.column.ColumnType === GridColumnType.Hyperlink && !!columnInfo.column.DataAttributeId) {\n                    listItem[columnName + '_' + columnInfo.column.DataAttributeId] = valueItem.getUriValue();\n                }\n            });\n            list.push(listItem);\n        }\n        return list;\n    };\n    gridDataController.prototype.initializeColumnBarCalculator = function (barColumn) {\n        var columnValues = [];\n        var axisPointsCount = !!this._axisColumnPoints ? this._axisColumnPoints.length : 1;\n        for (var rowIndex = 0; rowIndex < axisPointsCount; rowIndex++)\n            columnValues.push(this._getMeasureCellValue(barColumn.columnName, rowIndex).getValue());\n        barColumn.barCalculator.initialize(Math.min.apply(Math, columnValues), Math.max.apply(Math, columnValues));\n    };\n    gridDataController.prototype.getValueItem = function (columnName, rowIndex) {\n        return this._getValueItem(this._columnRepository[columnName], rowIndex);\n    };\n    gridDataController.prototype._getValueItem = function (columnInfo, rowIndex) {\n        var that = this;\n        var columnName = columnInfo.columnName;\n        switch (columnInfo.column.ColumnType) {\n            case GridColumnType.Measure:\n                if (columnInfo.column.DisplayMode === 'Bar') {\n                    return this._getBarCellValue(columnName, rowIndex, columnInfo.barCalculator);\n                }\n                else {\n                    return this._getMeasureCellValue(columnName, rowIndex);\n                }\n            case GridColumnType.Delta:\n                return that._getDeltaValue(columnName, rowIndex, columnInfo.column.DisplayMode === 'Bar' ? columnInfo.barCalculator : null, columnInfo.column.DeltaValueType, columnInfo.column.IgnoreDeltaColor);\n            case GridColumnType.Sparkline:\n                return that._getSparklineCellValues(columnName, rowIndex, columnInfo.column.SparklineOptions);\n            case GridColumnType.Hyperlink:\n                return that._getCellValue(columnName, columnInfo.column.DataAttributeId, rowIndex);\n            case GridColumnType.Dimension:\n                return that._getCellValue(columnName, null, rowIndex);\n        }\n    };\n    gridDataController.prototype.getSelectionValues = function (values) {\n        var that = this, point, resultPoint, result = [], selectionMembers = that._selectionMembers, fit, columns = that.viewModel.Columns, visibleDimensions = columns.map(function (column) { return column.DataId; });\n        if (values.length > selectionMembers.length)\n            values = values.slice(-selectionMembers.length);\n        $.each(that._axisColumnPoints, function (index, axisPoint) {\n            fit = false;\n            $.each(selectionMembers, function (memberIndex, member) {\n                point = that._findAxisPoint(member, axisPoint);\n                if (point && values.length > memberIndex) {\n                    if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[memberIndex], true)) {\n                        fit = false;\n                        return false;\n                    }\n                    resultPoint = point;\n                }\n                fit = true;\n            });\n            if (fit && resultPoint) {\n                result = resultPoint._selectPath(function (point) {\n                    var index = visibleDimensions.indexOf(point.getDimension().id);\n                    if (index === -1 || columns[index].DisplayMode != 'Image')\n                        return point.getUniqueValue();\n                    else\n                        return;\n                });\n                return;\n            }\n        });\n        return result;\n    };\n    gridDataController.prototype.getSelectedRowKeys = function (valuesSet) {\n        var that = this, keys = [], selectionMembers = that._selectionMembers, checkAxisPoint = function (axisPoint, values) {\n            var point;\n            for (var i = 0; i < values.length; i++) {\n                point = that._findAxisPoint(selectionMembers[i], axisPoint);\n                if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[i], true))\n                    return false;\n            }\n            return true;\n        };\n        $.each(that._axisColumnPoints, function (index, axisPoint) {\n            $.each(valuesSet, function (_, values) {\n                if (values.length > selectionMembers.length)\n                    values = values.slice(-selectionMembers.length);\n                if (checkAxisPoint(axisPoint, values)) {\n                    keys.push(index);\n                    return;\n                }\n            });\n        });\n        return keys;\n    };\n    gridDataController.prototype.getDimensionValues = function (rowIndex) {\n        var columnAxisPoint = this._getColumnAxisPoint(rowIndex);\n        return columnAxisPoint ? columnAxisPoint.getUniquePath() : [];\n    };\n    gridDataController.prototype.getTotalValue = function (measureId) {\n        return this.multiData.getMeasureValue(measureId).getDisplayText();\n    };\n    gridDataController.prototype._getBarCellValue = function (columnName, rowIndex, barCalculator) {\n        var that = this, item = this.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));\n        barCalculator.addValue(rowIndex, item);\n        return {\n            getValue: function () {\n                return item.getValue();\n            },\n            getData: function () {\n                return that._getBarData(barCalculator, item, rowIndex);\n            },\n            getStyleSettingsInfo: function () {\n                return that._getStyleSettingsInfo(columnName, rowIndex);\n            }\n        };\n    };\n    gridDataController.prototype._getBarData = function (barCalculator, item, rowIndex) {\n        return {\n            zeroValue: barCalculator.getZeroPosition(),\n            normalizedValue: barCalculator.getNormalizedValue(rowIndex || 0),\n            text: item.getDisplayText()\n        };\n    };\n    gridDataController.prototype._getMeasureCellValue = function (columnName, rowIndex) {\n        var that = this, item = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex)), value = item.getValue();\n        return {\n            getValue: function () {\n                return value;\n            },\n            getData: function () {\n                return {\n                    value: item.getValue(),\n                    displayText: item.getDisplayText()\n                };\n            },\n            getStyleSettingsInfo: function () {\n                return that._getStyleSettingsInfo(columnName, rowIndex);\n            }\n        };\n    };\n    gridDataController.prototype._getCellValue = function (columnName, uriColumnName, rowIndex) {\n        var that = this, item = undefined, uriItem = !!uriColumnName ? that.multiData.getMeasureValueByAxisPoints(uriColumnName, that._getPointArray(rowIndex)) : null, obtainItem = function () {\n            if (item === undefined) {\n                item = that._findAxisPoint(columnName, that._getColumnAxisPoint(rowIndex)) || {\n                    getValue: function () {\n                        return undefined;\n                    },\n                    getUniqueValue: function () {\n                        return undefined;\n                    },\n                    getDisplayText: function () {\n                        return '';\n                    }\n                };\n            }\n            return item;\n        };\n        var cellValue = {\n            getValue: function () {\n                return obtainItem().getValue();\n            },\n            getUniqueValue: function () {\n                return obtainItem().getUniqueValue();\n            },\n            getData: function () {\n                return {\n                    value: obtainItem().getValue(),\n                    displayText: obtainItem().getDisplayText()\n                };\n            },\n            getStyleSettingsInfo: function () {\n                return that._getStyleSettingsInfo(columnName, rowIndex);\n            }\n        };\n        cellValue.getUriValue = function () {\n            return !!uriItem ? uriItem.getValue() : obtainItem().getDisplayText();\n        };\n        return cellValue;\n    };\n    gridDataController.prototype._getStyleSettingsInfo = function (columnName, rowIndex) {\n        var that = this, rules = [], cellInfo = {\n            rowIndex: rowIndex\n        };\n        if (that.cfModel) {\n            rules = $.grep(that.cfModel.RuleModels, function (rule) {\n                return rule.ApplyToRow || rule.ApplyToDataId === columnName;\n            });\n        }\n        return that._getStyleSettingsInfoCore(cellInfo, rules, that.viewModel.ColumnAxisName, item_data_axis_names_1.itemDataAxisNames.defaultAxis);\n    };\n    gridDataController.prototype._getStyleIndexes = function (rule, cellInfo, points) {\n        var that = this, axisPoint, currentStyleIndexes, styleIndexes = [];\n        axisPoint = cellInfo.rowIndex !== undefined ? that._getAxisPoint(cellInfo.rowIndex, rule.CalcByDataId) : undefined;\n        if (axisPoint)\n            points.push(axisPoint);\n        currentStyleIndexes = that._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);\n        if (currentStyleIndexes) {\n            styleIndexes = styleIndexes.concat(currentStyleIndexes);\n        }\n        return styleIndexes;\n    };\n    gridDataController.prototype._getAxisPoint = function (rowIndex, columnInfo) {\n        var axisPoint = rowIndex !== undefined && !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined, correctAxisPoint = axisPoint ? this._findAxisPoint(columnInfo, axisPoint) : undefined;\n        return correctAxisPoint || axisPoint;\n    };\n    gridDataController.prototype._getDeltaValue = function (columnName, rowIndex, barCalculator, deltaType, useDefaultColor) {\n        var that = this, deltaValue = null, deltaValueItem = null, measureValue = null, deltaDesriptor = that.multiData.getDeltaById(columnName), measureItem, idBarDisplayMode = !!barCalculator, getStyleSettingsInfo = function (columnName, rowIndex) {\n            return that._getStyleSettingsInfo(columnName, rowIndex);\n        };\n        if (deltaDesriptor) {\n            deltaValue = that.multiData.getDeltaValueByAxisPoints(columnName, that._getPointArray(rowIndex));\n            deltaValueItem = that._getDeltaValueItem(deltaValue, deltaType);\n            if (idBarDisplayMode)\n                barCalculator.addValue(rowIndex, deltaValueItem);\n            return {\n                getValue: function () {\n                    return deltaValueItem.getValue();\n                },\n                getData: function () {\n                    if (idBarDisplayMode) {\n                        return that._getBarData(barCalculator, deltaValueItem, rowIndex);\n                    }\n                    else {\n                        return {\n                            type: that._convertIndicatorType(deltaValue.getIndicatorType().getValue()),\n                            hasPositiveMeaning: deltaValue.getIsGood().getValue(),\n                            text: {\n                                value: deltaValueItem.getDisplayText(),\n                                useDefaultColor: useDefaultColor\n                            }\n                        };\n                    }\n                },\n                getStyleSettingsInfo: function () {\n                    return that._getStyleSettingsInfo(columnName, rowIndex);\n                }\n            };\n        }\n        else {\n            measureItem = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));\n            if (idBarDisplayMode)\n                barCalculator.addValue(rowIndex, measureItem);\n            return {\n                getValue: function () {\n                    return measureItem.getValue();\n                },\n                getData: function () {\n                    if (idBarDisplayMode) {\n                        return that._getBarData(barCalculator, measureItem, rowIndex);\n                    }\n                    else {\n                        return {\n                            type: null,\n                            hasPositiveMeaning: null,\n                            text: {\n                                value: measureItem.getDisplayText(),\n                                useDefaultColor: null\n                            }\n                        };\n                    }\n                },\n                getStyleSettingsInfo: function () {\n                    return that._getStyleSettingsInfo(columnName, rowIndex);\n                }\n            };\n        }\n    };\n    gridDataController.prototype._getDeltaValueItem = function (deltaValue, deltaValueType) {\n        switch (deltaValueType) {\n            case 'ActualValue':\n                return deltaValue.getActualValue();\n            case 'AbsoluteVariation':\n                return deltaValue.getAbsoluteVariation();\n            case 'PercentVariation':\n                return deltaValue.getPercentVariation();\n            case 'PercentOfTarget':\n                return deltaValue.getPercentOfTarget();\n            case 'TargetValue':\n                return deltaValue.getTargetValue();\n        }\n    };\n    gridDataController.prototype._getSparklineCellValues = function (columnName, rowIndex, sparklineOptions) {\n        var that = this, measureDescriptor = that.multiData.getMeasureById(columnName), axisPoint = that._getPointArray(rowIndex), getValues = function (getter) {\n            var result = [];\n            if (!!that._axisSparklinePoints) {\n                $.each(that._axisSparklinePoints, function (_, sparklinePoint) {\n                    result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint.concat(sparklinePoint))));\n                });\n            }\n            else {\n                result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint)));\n            }\n            return result;\n        }, values = getValues(function (item) {\n            var value = item.getValue();\n            return value || 0;\n        });\n        return {\n            getValue: function () {\n                return values;\n            },\n            getData: function () {\n                var valuesItems = getValues(function (item) {\n                    return item;\n                }), startValue = valuesItems[0].getValue(), endValue = valuesItems[valuesItems.length - 1].getValue();\n                return {\n                    sparkline: that._generateSparklineOptions(values, sparklineOptions, measureDescriptor.format),\n                    startText: startValue ? valuesItems[0].getDisplayText() : measureDescriptor.format(0),\n                    endText: endValue ? valuesItems[valuesItems.length - 1].getDisplayText() : measureDescriptor.format(0)\n                };\n            },\n            getStyleSettingsInfo: function () {\n                return that._getStyleSettingsInfo(columnName, rowIndex);\n            }\n        };\n    };\n    gridDataController.prototype._getColumnAxisPoint = function (rowIndex) {\n        return !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined;\n    };\n    gridDataController.prototype._getPointArray = function (rowIndex) {\n        var point = this._getColumnAxisPoint(rowIndex), array = [];\n        if (point)\n            array.push(point);\n        return array;\n    };\n    return gridDataController;\n}(_data_controller_base_1.dataControllerBase));\nexports.gridDataController = gridDataController;\n"]},"metadata":{},"sourceType":"script"}