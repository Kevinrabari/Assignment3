{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_formatter.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._convertNumericUnit = exports._convertNumericFormat = exports._getSyntheticDateTimeGroupInterval = exports._convertToDateFormat = exports._convertToNumberFormat = exports.convertToFormat = exports.calculatePrecision = exports.calculateUnitPower = exports.getAxisFormat = exports.formatAxisValue = exports.formatScientificAxisValue = exports.formatPercentValue = exports.formatObject = exports.formatDateTime = exports.formatNumeric = exports.constructIntervalFilterText = exports.formatFilterValue = exports.formatByFormatInfo = exports.format = exports._types = exports.defaultScientificFormat = exports.defaultPercentFormat = exports.defaultNumericFormat = void 0;\n\nvar string_1 = require(\"devextreme/core/utils/string\");\n\nvar legacy_settings_1 = require(\"../viewer-parts/legacy-settings\");\n\nvar _default_1 = require(\"./localization/_default\");\n\nvar _format_helper_1 = require(\"./_format-helper\");\n\nvar _localizer_1 = require(\"./_localizer\");\n\nvar _utils_1 = require(\"./_utils\");\n\nexports.defaultNumericFormat = {\n  format: 'fixedPoint',\n  unitPower: 'auto',\n  precision: 0,\n  significantDigits: 3\n};\nexports.defaultPercentFormat = {\n  format: 'percent',\n  unitPower: 0,\n  precision: 2,\n  significantDigits: 0,\n  showTrailingZeros: false\n};\nexports.defaultScientificFormat = {\n  format: 'exponential',\n  precision: 2\n};\nexports._types = {\n  Abbreviated: 'abbr',\n  Full: 'full',\n  Long: 'long',\n  Numeric: 'num',\n  Short: 'short',\n  TimeOnly: 'timeOnly'\n};\n\nfunction format(value, formatViewModel) {\n  var str = _localizer_1.localizer.getPredefinedString(value);\n\n  if (!_utils_1.type.isDefined(str)) {\n    var numericFormat = formatViewModel && formatViewModel.NumericFormat,\n        dateTimeFormat = formatViewModel && formatViewModel.DateTimeFormat;\n\n    if (numericFormat) {\n      str = this.formatNumeric(value, numericFormat);\n    } else {\n      str = !dateTimeFormat ? this.formatObject(value) : this.formatDateTime(value, dateTimeFormat);\n    }\n  }\n\n  return str;\n}\n\nexports.format = format;\n\nfunction formatByFormatInfo(value, formatInfo) {\n  var str = _localizer_1.localizer.getPredefinedString(value);\n\n  if (!_utils_1.type.isDefined(str)) {\n    return _format_helper_1.formatHelper.format(value, formatInfo);\n  }\n\n  return str;\n}\n\nexports.formatByFormatInfo = formatByFormatInfo;\n\nfunction formatFilterValue(filterValue) {\n  if (filterValue.Value !== undefined) {\n    return this.format(filterValue.Value, filterValue.Format);\n  }\n\n  var rangeLeft;\n  var rangeRight;\n\n  if (_utils_1.type.isDefined(filterValue.RangeLeft)) {\n    rangeLeft = this.format(filterValue.RangeLeft, filterValue.Format);\n  }\n\n  if (_utils_1.type.isDefined(filterValue.RangeRight)) {\n    rangeRight = this.format(filterValue.RangeRight, filterValue.Format);\n  }\n\n  return constructIntervalFilterText({\n    left: rangeLeft,\n    right: rangeRight\n  });\n}\n\nexports.formatFilterValue = formatFilterValue;\n\nfunction constructIntervalFilterText(rangeText) {\n  var rangePattern = _default_1.getLocalizationById('DashboardStringId.FromToDatePeriodCaption');\n\n  var fromPattern = _default_1.getLocalizationById('DashboardStringId.FromDatePeriodCaption');\n\n  var toPattern = _default_1.getLocalizationById('DashboardStringId.ToDatePeriodCaption');\n\n  if (rangeText.left && rangeText.right) {\n    if (rangeText.right != rangeText.left) return string_1.format(rangePattern, rangeText.left, rangeText.right);else return rangeText.left;\n  }\n\n  if (rangeText.left) {\n    return string_1.format(fromPattern, rangeText.left);\n  }\n\n  if (rangeText.right) {\n    return string_1.format(toPattern, rangeText.right);\n  }\n}\n\nexports.constructIntervalFilterText = constructIntervalFilterText;\n\nfunction formatNumeric(value, numericFormatViewModel) {\n  if (!numericFormatViewModel) {\n    return value.toString();\n  } else {\n    var format = this._convertToNumberFormat(numericFormatViewModel);\n\n    return _format_helper_1.formatHelper.format(value, format);\n  }\n}\n\nexports.formatNumeric = formatNumeric;\n\nfunction formatDateTime(value, dateFormatViewModel) {\n  var format = this._convertToDateFormat(dateFormatViewModel);\n\n  return _format_helper_1.formatHelper.format(value, format);\n}\n\nexports.formatDateTime = formatDateTime;\n\nfunction formatObject(value) {\n  return value == null ? '' : value.toString();\n}\n\nexports.formatObject = formatObject;\n\nfunction formatPercentValue(value) {\n  return _format_helper_1.formatHelper.format(value, this.defaultPercentFormat);\n}\n\nexports.formatPercentValue = formatPercentValue;\n\nfunction formatScientificAxisValue(value) {\n  return _format_helper_1.formatHelper.format(value, this.defaultScientificFormat);\n}\n\nexports.formatScientificAxisValue = formatScientificAxisValue;\n\nfunction formatAxisValue(value, axisMin, axisMax) {\n  return _format_helper_1.formatHelper.format(value, this.getAxisFormat(axisMin, axisMax));\n}\n\nexports.formatAxisValue = formatAxisValue;\n\nfunction getAxisFormat(axisMin, axisMax) {\n  return {\n    format: 'fixedPoint',\n    unitPower: this.calculateUnitPower(axisMin, axisMax),\n    precision: this.calculatePrecision(axisMin, axisMax),\n    significantDigits: 0,\n    showTrailingZeros: false\n  };\n}\n\nexports.getAxisFormat = getAxisFormat;\n\nfunction calculateUnitPower(axisMin, axisMax) {\n  var range = axisMax - axisMin;\n  if (range >= 1000000000) return 3;\n  if (range >= 1000000) return 2;\n  if (range >= 1000) return 1;\n  return 0;\n}\n\nexports.calculateUnitPower = calculateUnitPower;\n\nfunction calculatePrecision(axisMin, axisMax) {\n  var precision = 0,\n      range = axisMax - axisMin;\n\n  if (range > 0) {\n    var smallValue = Math.pow(10, -precision);\n\n    while (range < smallValue) {\n      smallValue /= 10;\n      precision++;\n    }\n  }\n\n  return precision + 2;\n}\n\nexports.calculatePrecision = calculatePrecision;\n\nfunction convertToFormat(formatViewModel) {\n  if (formatViewModel) {\n    var numericFormat = formatViewModel.NumericFormat;\n    if (numericFormat) return this._convertToNumberFormat(numericFormat);\n    var dateTimeFormat = formatViewModel.DateTimeFormat;\n    if (dateTimeFormat) return this._convertToDateFormat(dateTimeFormat);\n  }\n\n  return null;\n}\n\nexports.convertToFormat = convertToFormat;\n\nfunction _convertToNumberFormat(numericFormatViewModel) {\n  var formatInfo = null,\n      formatType = numericFormatViewModel ? numericFormatViewModel.FormatType : undefined,\n      unit = numericFormatViewModel ? numericFormatViewModel.Unit : undefined;\n\n  if (formatType === 'Custom') {\n    if (legacy_settings_1.DashboardPrivateSettings.customNumericFormatMode !== 'Disabled') {\n      return {\n        type: numericFormatViewModel.CustomFormatString,\n        unlimitedIntegerDigits: true\n      };\n    } else {\n      formatType = 'Auto';\n    }\n  }\n\n  if (formatType === 'General') {\n    formatInfo = {\n      format: 'general'\n    };\n  } else {\n    formatInfo = {};\n    formatInfo.format = this._convertNumericFormat(formatType);\n    formatInfo.currency = numericFormatViewModel.Currency;\n\n    if (formatInfo.currency === _format_helper_1.invariantCurrencyIdentifier) {\n      console.log('A web server does not support a currency specified for the dashboard. Refer to https://go.devexpress.com/dashboardInvariantCurrency.aspx to learn more.');\n    }\n\n    if (numericFormatViewModel.IncludeGroupSeparator) {\n      formatInfo.includeGroupSeparator = numericFormatViewModel.IncludeGroupSeparator;\n    }\n\n    if (numericFormatViewModel.ForcePlusSign) {\n      formatInfo.plus = numericFormatViewModel.ForcePlusSign;\n    }\n\n    formatInfo.precision = numericFormatViewModel.Precision;\n\n    if (unit && unit === 'Auto' && formatType !== 'Percent') {\n      formatInfo.significantDigits = numericFormatViewModel.SignificantDigits;\n    }\n\n    if (unit && formatType === 'Number' || formatType === 'Currency') {\n      formatInfo.unitPower = this._convertNumericUnit(unit);\n    }\n\n    formatInfo.dateType = null;\n  }\n\n  return formatInfo;\n}\n\nexports._convertToNumberFormat = _convertToNumberFormat;\n\nfunction _convertToDateFormat(dateFormatViewModel) {\n  if (dateFormatViewModel) {\n    var weekOptions = {};\n    if (_utils_1.type.isDefined(dateFormatViewModel.FirstDayOfWeek)) weekOptions.firstDayOfWeek = dateFormatViewModel.FirstDayOfWeek;\n    if (_utils_1.type.isDefined(dateFormatViewModel.CalendarWeekRule)) weekOptions.calendarWeekRule = dateFormatViewModel.CalendarWeekRule;\n\n    var syntheticGroupInterval = this._getSyntheticDateTimeGroupInterval(dateFormatViewModel.GroupInterval, dateFormatViewModel.ExactDateFormat);\n\n    switch (syntheticGroupInterval) {\n      case 'WeekYear':\n        return __assign(__assign({}, weekOptions), {\n          format: 'weekYear',\n          dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short\n        });\n\n      case 'MonthYear':\n        return {\n          format: 'monthYear',\n          dateType: this._types.Full\n        };\n\n      case 'QuarterYear':\n        return {\n          format: 'quarterYear',\n          dateType: this._types.Full\n        };\n\n      case 'DayMonthYear':\n        return {\n          format: 'dayMonthYear',\n          dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short\n        };\n\n      case 'DateHour':\n        if (dateFormatViewModel.DateHourFormat === 'Long') return {\n          format: 'dateHour',\n          dateType: this._types.Long\n        };else return {\n          format: 'dateHour',\n          dateType: dateFormatViewModel.DateHourFormat === 'Short' ? this._types.Short : this._types.TimeOnly\n        };\n\n      case 'DateHourMinute':\n        if (dateFormatViewModel.DateHourMinuteFormat === 'Long') return {\n          format: 'dateHourMinute',\n          dateType: this._types.Long\n        };else return {\n          format: 'dateHourMinute',\n          dateType: dateFormatViewModel.DateHourMinuteFormat === 'Short' ? this._types.Short : this._types.TimeOnly\n        };\n\n      case 'DateHourMinuteSecond':\n        if (dateFormatViewModel.DateTimeFormat === 'Long') return {\n          format: 'dateHourMinuteSecond',\n          dateType: this._types.Long\n        };else return {\n          format: 'dateHourMinuteSecond',\n          dateType: dateFormatViewModel.DateTimeFormat === 'Short' ? this._types.Short : this._types.TimeOnly\n        };\n\n      case 'Year':\n        return {\n          format: 'year',\n          dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full\n        };\n\n      case 'DateYear':\n        return {\n          format: 'dateYear',\n          dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full\n        };\n\n      case 'Quarter':\n        if (dateFormatViewModel.QuarterFormat === 'Numeric') return {\n          format: 'quarter',\n          dateType: this._types.Numeric\n        };else return {\n          format: 'quarter',\n          dateType: this._types.Full\n        };\n\n      case 'Month':\n        if (dateFormatViewModel.MonthFormat === 'Numeric') return {\n          format: 'month',\n          dateType: this._types.Numeric\n        };else return {\n          format: 'month',\n          dateType: dateFormatViewModel.MonthFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full\n        };\n\n      case 'Hour':\n        return {\n          format: 'hour',\n          dateType: dateFormatViewModel.HourFormat === 'Long' ? this._types.Long : this._types.Short\n        };\n\n      case 'DayOfWeek':\n        if (dateFormatViewModel.DayOfWeekFormat === 'Numeric') return {\n          format: 'dayOfWeek',\n          dateType: this._types.Numeric\n        };else return {\n          format: 'dayOfWeek',\n          dateType: dateFormatViewModel.DayOfWeekFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full\n        };\n\n      default:\n        return {\n          format: dateTimeGroupIntervalToCamelCase[dateFormatViewModel.GroupInterval],\n          dateType: this._types.Numeric\n        };\n    }\n  } else {\n    return null;\n  }\n}\n\nexports._convertToDateFormat = _convertToDateFormat;\n\nfunction _getSyntheticDateTimeGroupInterval(groupInterval, exactDateFormat) {\n  if (groupInterval != 'None') return groupInterval;\n\n  switch (exactDateFormat) {\n    case 'Year':\n      return 'DateYear';\n\n    case 'Quarter':\n      return 'QuarterYear';\n\n    case 'Month':\n      return 'MonthYear';\n\n    case 'Day':\n      return 'DayMonthYear';\n\n    case 'Hour':\n      return 'DateHour';\n\n    case 'Minute':\n      return 'DateHourMinute';\n\n    case 'Second':\n      return 'DateHourMinuteSecond';\n\n    default:\n      return null;\n  }\n}\n\nexports._getSyntheticDateTimeGroupInterval = _getSyntheticDateTimeGroupInterval;\n\nfunction _convertNumericFormat(formatType) {\n  switch (formatType) {\n    case 'Number':\n      return 'fixedPoint';\n\n    case 'Currency':\n      return 'currency';\n\n    case 'Scientific':\n      return 'exponential';\n\n    case 'Percent':\n      return 'percent';\n\n    default:\n      return undefined;\n  }\n}\n\nexports._convertNumericFormat = _convertNumericFormat;\n\nfunction _convertNumericUnit(numericUnit) {\n  switch (numericUnit) {\n    case 'Auto':\n      return 'auto';\n\n    case 'Thousands':\n      return 1;\n\n    case 'Millions':\n      return 2;\n\n    case 'Billions':\n      return 3;\n\n    default:\n      return 0;\n  }\n}\n\nexports._convertNumericUnit = _convertNumericUnit;\nvar dateTimeGroupIntervalToCamelCase = {\n  'Year': 'year',\n  'Quarter': 'quarter',\n  'Month': 'month',\n  'Day': 'day',\n  'Hour': 'hour',\n  'Minute': 'minute',\n  'Second': 'second',\n  'DayOfYear': 'dayOfYear',\n  'DayOfWeek': 'dayOfWeek',\n  'WeekOfYear': 'weekOfYear',\n  'WeekOfMonth': 'weekOfMonth',\n  'WeekYear': 'weekYear',\n  'MonthYear': 'monthYear',\n  'QuarterYear': 'quarterYear',\n  'DayMonthYear': 'dayMonthYear',\n  'DateHour': 'dateHour',\n  'DateHourMinute': 'dateHourMinute',\n  'DateHourMinuteSecond': 'dateHourMinuteSecond',\n  'None': 'none'\n};","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/data/_formatter.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","_convertNumericUnit","_convertNumericFormat","_getSyntheticDateTimeGroupInterval","_convertToDateFormat","_convertToNumberFormat","convertToFormat","calculatePrecision","calculateUnitPower","getAxisFormat","formatAxisValue","formatScientificAxisValue","formatPercentValue","formatObject","formatDateTime","formatNumeric","constructIntervalFilterText","formatFilterValue","formatByFormatInfo","format","_types","defaultScientificFormat","defaultPercentFormat","defaultNumericFormat","string_1","require","legacy_settings_1","_default_1","_format_helper_1","_localizer_1","_utils_1","unitPower","precision","significantDigits","showTrailingZeros","Abbreviated","Full","Long","Numeric","Short","TimeOnly","formatViewModel","str","localizer","getPredefinedString","type","isDefined","numericFormat","NumericFormat","dateTimeFormat","DateTimeFormat","formatInfo","formatHelper","filterValue","Value","undefined","Format","rangeLeft","rangeRight","RangeLeft","RangeRight","left","right","rangeText","rangePattern","getLocalizationById","fromPattern","toPattern","numericFormatViewModel","toString","dateFormatViewModel","axisMin","axisMax","range","smallValue","Math","pow","formatType","FormatType","unit","Unit","DashboardPrivateSettings","customNumericFormatMode","CustomFormatString","unlimitedIntegerDigits","currency","Currency","invariantCurrencyIdentifier","console","log","IncludeGroupSeparator","includeGroupSeparator","ForcePlusSign","plus","Precision","SignificantDigits","dateType","weekOptions","FirstDayOfWeek","firstDayOfWeek","CalendarWeekRule","calendarWeekRule","syntheticGroupInterval","GroupInterval","ExactDateFormat","DateFormat","DateHourFormat","DateHourMinuteFormat","YearFormat","QuarterFormat","MonthFormat","HourFormat","DayOfWeekFormat","dateTimeGroupIntervalToCamelCase","groupInterval","exactDateFormat","numericUnit"],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWAN,MAAM,CAACa,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,kCAAR,GAA6CJ,OAAO,CAACK,oBAAR,GAA+BL,OAAO,CAACM,sBAAR,GAAiCN,OAAO,CAACO,eAAR,GAA0BP,OAAO,CAACQ,kBAAR,GAA6BR,OAAO,CAACS,kBAAR,GAA6BT,OAAO,CAACU,aAAR,GAAwBV,OAAO,CAACW,eAAR,GAA0BX,OAAO,CAACY,yBAAR,GAAoCZ,OAAO,CAACa,kBAAR,GAA6Bb,OAAO,CAACc,YAAR,GAAuBd,OAAO,CAACe,cAAR,GAAyBf,OAAO,CAACgB,aAAR,GAAwBhB,OAAO,CAACiB,2BAAR,GAAsCjB,OAAO,CAACkB,iBAAR,GAA4BlB,OAAO,CAACmB,kBAAR,GAA6BnB,OAAO,CAACoB,MAAR,GAAiBpB,OAAO,CAACqB,MAAR,GAAiBrB,OAAO,CAACsB,uBAAR,GAAkCtB,OAAO,CAACuB,oBAAR,GAA+BvB,OAAO,CAACwB,oBAAR,GAA+B,KAAK,CAAhqB;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,8BAAD,CAAtB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,iCAAD,CAA/B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AACA1B,OAAO,CAACwB,oBAAR,GAA+B;AAC3BJ,EAAAA,MAAM,EAAE,YADmB;AAE3BY,EAAAA,SAAS,EAAE,MAFgB;AAG3BC,EAAAA,SAAS,EAAE,CAHgB;AAI3BC,EAAAA,iBAAiB,EAAE;AAJQ,CAA/B;AAMAlC,OAAO,CAACuB,oBAAR,GAA+B;AAC3BH,EAAAA,MAAM,EAAE,SADmB;AAE3BY,EAAAA,SAAS,EAAE,CAFgB;AAG3BC,EAAAA,SAAS,EAAE,CAHgB;AAI3BC,EAAAA,iBAAiB,EAAE,CAJQ;AAK3BC,EAAAA,iBAAiB,EAAE;AALQ,CAA/B;AAOAnC,OAAO,CAACsB,uBAAR,GAAkC;AAC9BF,EAAAA,MAAM,EAAE,aADsB;AAE9Ba,EAAAA,SAAS,EAAE;AAFmB,CAAlC;AAIAjC,OAAO,CAACqB,MAAR,GAAiB;AACbe,EAAAA,WAAW,EAAE,MADA;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,IAAI,EAAE,MAHO;AAIbC,EAAAA,OAAO,EAAE,KAJI;AAKbC,EAAAA,KAAK,EAAE,OALM;AAMbC,EAAAA,QAAQ,EAAE;AANG,CAAjB;;AAQA,SAASrB,MAAT,CAAgBnB,KAAhB,EAAuByC,eAAvB,EAAwC;AACpC,MAAIC,GAAG,GAAGb,YAAY,CAACc,SAAb,CAAuBC,mBAAvB,CAA2C5C,KAA3C,CAAV;;AACA,MAAI,CAAC8B,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBJ,GAAxB,CAAL,EAAmC;AAC/B,QAAIK,aAAa,GAAGN,eAAe,IAAIA,eAAe,CAACO,aAAvD;AAAA,QAAsEC,cAAc,GAAGR,eAAe,IAAIA,eAAe,CAACS,cAA1H;;AACA,QAAIH,aAAJ,EAAmB;AACfL,MAAAA,GAAG,GAAG,KAAK3B,aAAL,CAAmBf,KAAnB,EAA0B+C,aAA1B,CAAN;AACH,KAFD,MAGK;AACDL,MAAAA,GAAG,GAAG,CAACO,cAAD,GAAkB,KAAKpC,YAAL,CAAkBb,KAAlB,CAAlB,GAA6C,KAAKc,cAAL,CAAoBd,KAApB,EAA2BiD,cAA3B,CAAnD;AACH;AACJ;;AACD,SAAOP,GAAP;AACH;;AACD3C,OAAO,CAACoB,MAAR,GAAiBA,MAAjB;;AACA,SAASD,kBAAT,CAA4BlB,KAA5B,EAAmCmD,UAAnC,EAA+C;AAC3C,MAAIT,GAAG,GAAGb,YAAY,CAACc,SAAb,CAAuBC,mBAAvB,CAA2C5C,KAA3C,CAAV;;AACA,MAAI,CAAC8B,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBJ,GAAxB,CAAL,EAAmC;AAC/B,WAAOd,gBAAgB,CAACwB,YAAjB,CAA8BjC,MAA9B,CAAqCnB,KAArC,EAA4CmD,UAA5C,CAAP;AACH;;AACD,SAAOT,GAAP;AACH;;AACD3C,OAAO,CAACmB,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,iBAAT,CAA2BoC,WAA3B,EAAwC;AACpC,MAAIA,WAAW,CAACC,KAAZ,KAAsBC,SAA1B,EAAqC;AACjC,WAAO,KAAKpC,MAAL,CAAYkC,WAAW,CAACC,KAAxB,EAA+BD,WAAW,CAACG,MAA3C,CAAP;AACH;;AACD,MAAIC,SAAJ;AACA,MAAIC,UAAJ;;AACA,MAAI5B,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBO,WAAW,CAACM,SAApC,CAAJ,EAAoD;AAChDF,IAAAA,SAAS,GAAG,KAAKtC,MAAL,CAAYkC,WAAW,CAACM,SAAxB,EAAmCN,WAAW,CAACG,MAA/C,CAAZ;AACH;;AACD,MAAI1B,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBO,WAAW,CAACO,UAApC,CAAJ,EAAqD;AACjDF,IAAAA,UAAU,GAAG,KAAKvC,MAAL,CAAYkC,WAAW,CAACO,UAAxB,EAAoCP,WAAW,CAACG,MAAhD,CAAb;AACH;;AACD,SAAOxC,2BAA2B,CAAC;AAAE6C,IAAAA,IAAI,EAAEJ,SAAR;AAAmBK,IAAAA,KAAK,EAAEJ;AAA1B,GAAD,CAAlC;AACH;;AACD3D,OAAO,CAACkB,iBAAR,GAA4BA,iBAA5B;;AACA,SAASD,2BAAT,CAAqC+C,SAArC,EAAgD;AAC5C,MAAIC,YAAY,GAAGrC,UAAU,CAACsC,mBAAX,CAA+B,2CAA/B,CAAnB;;AACA,MAAIC,WAAW,GAAGvC,UAAU,CAACsC,mBAAX,CAA+B,yCAA/B,CAAlB;;AACA,MAAIE,SAAS,GAAGxC,UAAU,CAACsC,mBAAX,CAA+B,uCAA/B,CAAhB;;AACA,MAAIF,SAAS,CAACF,IAAV,IAAkBE,SAAS,CAACD,KAAhC,EAAuC;AACnC,QAAIC,SAAS,CAACD,KAAV,IAAmBC,SAAS,CAACF,IAAjC,EACI,OAAOrC,QAAQ,CAACL,MAAT,CAAgB6C,YAAhB,EAA8BD,SAAS,CAACF,IAAxC,EAA8CE,SAAS,CAACD,KAAxD,CAAP,CADJ,KAGI,OAAOC,SAAS,CAACF,IAAjB;AACP;;AACD,MAAIE,SAAS,CAACF,IAAd,EAAoB;AAChB,WAAOrC,QAAQ,CAACL,MAAT,CAAgB+C,WAAhB,EAA6BH,SAAS,CAACF,IAAvC,CAAP;AACH;;AACD,MAAIE,SAAS,CAACD,KAAd,EAAqB;AACjB,WAAOtC,QAAQ,CAACL,MAAT,CAAgBgD,SAAhB,EAA2BJ,SAAS,CAACD,KAArC,CAAP;AACH;AACJ;;AACD/D,OAAO,CAACiB,2BAAR,GAAsCA,2BAAtC;;AACA,SAASD,aAAT,CAAuBf,KAAvB,EAA8BoE,sBAA9B,EAAsD;AAClD,MAAI,CAACA,sBAAL,EAA6B;AACzB,WAAOpE,KAAK,CAACqE,QAAN,EAAP;AACH,GAFD,MAGK;AACD,QAAIlD,MAAM,GAAG,KAAKd,sBAAL,CAA4B+D,sBAA5B,CAAb;;AACA,WAAOxC,gBAAgB,CAACwB,YAAjB,CAA8BjC,MAA9B,CAAqCnB,KAArC,EAA4CmB,MAA5C,CAAP;AACH;AACJ;;AACDpB,OAAO,CAACgB,aAAR,GAAwBA,aAAxB;;AACA,SAASD,cAAT,CAAwBd,KAAxB,EAA+BsE,mBAA/B,EAAoD;AAChD,MAAInD,MAAM,GAAG,KAAKf,oBAAL,CAA0BkE,mBAA1B,CAAb;;AACA,SAAO1C,gBAAgB,CAACwB,YAAjB,CAA8BjC,MAA9B,CAAqCnB,KAArC,EAA4CmB,MAA5C,CAAP;AACH;;AACDpB,OAAO,CAACe,cAAR,GAAyBA,cAAzB;;AACA,SAASD,YAAT,CAAsBb,KAAtB,EAA6B;AACzB,SAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAK,CAACqE,QAAN,EAA5B;AACH;;AACDtE,OAAO,CAACc,YAAR,GAAuBA,YAAvB;;AACA,SAASD,kBAAT,CAA4BZ,KAA5B,EAAmC;AAC/B,SAAO4B,gBAAgB,CAACwB,YAAjB,CAA8BjC,MAA9B,CAAqCnB,KAArC,EAA4C,KAAKsB,oBAAjD,CAAP;AACH;;AACDvB,OAAO,CAACa,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,yBAAT,CAAmCX,KAAnC,EAA0C;AACtC,SAAO4B,gBAAgB,CAACwB,YAAjB,CAA8BjC,MAA9B,CAAqCnB,KAArC,EAA4C,KAAKqB,uBAAjD,CAAP;AACH;;AACDtB,OAAO,CAACY,yBAAR,GAAoCA,yBAApC;;AACA,SAASD,eAAT,CAAyBV,KAAzB,EAAgCuE,OAAhC,EAAyCC,OAAzC,EAAkD;AAC9C,SAAO5C,gBAAgB,CAACwB,YAAjB,CAA8BjC,MAA9B,CAAqCnB,KAArC,EAA4C,KAAKS,aAAL,CAAmB8D,OAAnB,EAA4BC,OAA5B,CAA5C,CAAP;AACH;;AACDzE,OAAO,CAACW,eAAR,GAA0BA,eAA1B;;AACA,SAASD,aAAT,CAAuB8D,OAAvB,EAAgCC,OAAhC,EAAyC;AACrC,SAAO;AACHrD,IAAAA,MAAM,EAAE,YADL;AAEHY,IAAAA,SAAS,EAAE,KAAKvB,kBAAL,CAAwB+D,OAAxB,EAAiCC,OAAjC,CAFR;AAGHxC,IAAAA,SAAS,EAAE,KAAKzB,kBAAL,CAAwBgE,OAAxB,EAAiCC,OAAjC,CAHR;AAIHvC,IAAAA,iBAAiB,EAAE,CAJhB;AAKHC,IAAAA,iBAAiB,EAAE;AALhB,GAAP;AAOH;;AACDnC,OAAO,CAACU,aAAR,GAAwBA,aAAxB;;AACA,SAASD,kBAAT,CAA4B+D,OAA5B,EAAqCC,OAArC,EAA8C;AAC1C,MAAIC,KAAK,GAAGD,OAAO,GAAGD,OAAtB;AACA,MAAIE,KAAK,IAAI,UAAb,EACI,OAAO,CAAP;AACJ,MAAIA,KAAK,IAAI,OAAb,EACI,OAAO,CAAP;AACJ,MAAIA,KAAK,IAAI,IAAb,EACI,OAAO,CAAP;AACJ,SAAO,CAAP;AACH;;AACD1E,OAAO,CAACS,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,kBAAT,CAA4BgE,OAA5B,EAAqCC,OAArC,EAA8C;AAC1C,MAAIxC,SAAS,GAAG,CAAhB;AAAA,MAAmByC,KAAK,GAAGD,OAAO,GAAGD,OAArC;;AACA,MAAIE,KAAK,GAAG,CAAZ,EAAe;AACX,QAAIC,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAC5C,SAAd,CAAjB;;AACA,WAAOyC,KAAK,GAAGC,UAAf,EAA2B;AACvBA,MAAAA,UAAU,IAAI,EAAd;AACA1C,MAAAA,SAAS;AACZ;AACJ;;AACD,SAAOA,SAAS,GAAG,CAAnB;AACH;;AACDjC,OAAO,CAACQ,kBAAR,GAA6BA,kBAA7B;;AACA,SAASD,eAAT,CAAyBmC,eAAzB,EAA0C;AACtC,MAAIA,eAAJ,EAAqB;AACjB,QAAIM,aAAa,GAAGN,eAAe,CAACO,aAApC;AACA,QAAID,aAAJ,EACI,OAAO,KAAK1C,sBAAL,CAA4B0C,aAA5B,CAAP;AACJ,QAAIE,cAAc,GAAGR,eAAe,CAACS,cAArC;AACA,QAAID,cAAJ,EACI,OAAO,KAAK7C,oBAAL,CAA0B6C,cAA1B,CAAP;AACP;;AACD,SAAO,IAAP;AACH;;AACDlD,OAAO,CAACO,eAAR,GAA0BA,eAA1B;;AACA,SAASD,sBAAT,CAAgC+D,sBAAhC,EAAwD;AACpD,MAAIjB,UAAU,GAAG,IAAjB;AAAA,MAAuB0B,UAAU,GAAGT,sBAAsB,GAAGA,sBAAsB,CAACU,UAA1B,GAAuCvB,SAAjG;AAAA,MAA4GwB,IAAI,GAAGX,sBAAsB,GAAGA,sBAAsB,CAACY,IAA1B,GAAiCzB,SAA1K;;AACA,MAAIsB,UAAU,KAAK,QAAnB,EAA6B;AACzB,QAAInD,iBAAiB,CAACuD,wBAAlB,CAA2CC,uBAA3C,KAAuE,UAA3E,EAAuF;AACnF,aAAO;AACHrC,QAAAA,IAAI,EAAEuB,sBAAsB,CAACe,kBAD1B;AAEHC,QAAAA,sBAAsB,EAAE;AAFrB,OAAP;AAIH,KALD,MAMK;AACDP,MAAAA,UAAU,GAAG,MAAb;AACH;AACJ;;AACD,MAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC1B1B,IAAAA,UAAU,GAAG;AAAEhC,MAAAA,MAAM,EAAE;AAAV,KAAb;AACH,GAFD,MAGK;AACDgC,IAAAA,UAAU,GAAG,EAAb;AACAA,IAAAA,UAAU,CAAChC,MAAX,GAAoB,KAAKjB,qBAAL,CAA2B2E,UAA3B,CAApB;AACA1B,IAAAA,UAAU,CAACkC,QAAX,GAAsBjB,sBAAsB,CAACkB,QAA7C;;AACA,QAAInC,UAAU,CAACkC,QAAX,KAAwBzD,gBAAgB,CAAC2D,2BAA7C,EAA0E;AACtEC,MAAAA,OAAO,CAACC,GAAR,CAAY,yJAAZ;AACH;;AACD,QAAIrB,sBAAsB,CAACsB,qBAA3B,EAAkD;AAC9CvC,MAAAA,UAAU,CAACwC,qBAAX,GAAmCvB,sBAAsB,CAACsB,qBAA1D;AACH;;AACD,QAAItB,sBAAsB,CAACwB,aAA3B,EAA0C;AACtCzC,MAAAA,UAAU,CAAC0C,IAAX,GAAkBzB,sBAAsB,CAACwB,aAAzC;AACH;;AACDzC,IAAAA,UAAU,CAACnB,SAAX,GAAuBoC,sBAAsB,CAAC0B,SAA9C;;AACA,QAAIf,IAAI,IAAIA,IAAI,KAAK,MAAjB,IAA2BF,UAAU,KAAK,SAA9C,EAAyD;AACrD1B,MAAAA,UAAU,CAAClB,iBAAX,GAA+BmC,sBAAsB,CAAC2B,iBAAtD;AACH;;AACD,QAAIhB,IAAI,IAAIF,UAAU,KAAK,QAAvB,IAAmCA,UAAU,KAAK,UAAtD,EAAkE;AAC9D1B,MAAAA,UAAU,CAACpB,SAAX,GAAuB,KAAK9B,mBAAL,CAAyB8E,IAAzB,CAAvB;AACH;;AACD5B,IAAAA,UAAU,CAAC6C,QAAX,GAAsB,IAAtB;AACH;;AACD,SAAO7C,UAAP;AACH;;AACDpD,OAAO,CAACM,sBAAR,GAAiCA,sBAAjC;;AACA,SAASD,oBAAT,CAA8BkE,mBAA9B,EAAmD;AAC/C,MAAIA,mBAAJ,EAAyB;AACrB,QAAI2B,WAAW,GAAG,EAAlB;AACA,QAAInE,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBwB,mBAAmB,CAAC4B,cAA5C,CAAJ,EACID,WAAW,CAACE,cAAZ,GAA6B7B,mBAAmB,CAAC4B,cAAjD;AACJ,QAAIpE,QAAQ,CAACe,IAAT,CAAcC,SAAd,CAAwBwB,mBAAmB,CAAC8B,gBAA5C,CAAJ,EACIH,WAAW,CAACI,gBAAZ,GAA+B/B,mBAAmB,CAAC8B,gBAAnD;;AACJ,QAAIE,sBAAsB,GAAG,KAAKnG,kCAAL,CAAwCmE,mBAAmB,CAACiC,aAA5D,EAA2EjC,mBAAmB,CAACkC,eAA/F,CAA7B;;AACA,YAAQF,sBAAR;AACI,WAAK,UAAL;AACI,eAAOtH,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKiH,WAAL,CAAT,EAA4B;AAAE9E,UAAAA,MAAM,EAAE,UAAV;AAAsB6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACmC,UAApB,KAAmC,MAAnC,GAA4C,KAAKrF,MAAL,CAAYiB,IAAxD,GAA+D,KAAKjB,MAAL,CAAYmB;AAA3G,SAA5B,CAAf;;AACJ,WAAK,WAAL;AACI,eAAO;AAAEpB,UAAAA,MAAM,EAAE,WAAV;AAAuB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYgB;AAA7C,SAAP;;AACJ,WAAK,aAAL;AACI,eAAO;AAAEjB,UAAAA,MAAM,EAAE,aAAV;AAAyB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYgB;AAA/C,SAAP;;AACJ,WAAK,cAAL;AACI,eAAO;AACHjB,UAAAA,MAAM,EAAE,cADL;AAEH6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACmC,UAApB,KAAmC,MAAnC,GAA4C,KAAKrF,MAAL,CAAYiB,IAAxD,GAA+D,KAAKjB,MAAL,CAAYmB;AAFlF,SAAP;;AAIJ,WAAK,UAAL;AACI,YAAI+B,mBAAmB,CAACoC,cAApB,KAAuC,MAA3C,EACI,OAAO;AAAEvF,UAAAA,MAAM,EAAE,UAAV;AAAsB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYiB;AAA5C,SAAP,CADJ,KAGI,OAAO;AAAElB,UAAAA,MAAM,EAAE,UAAV;AAAsB6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACoC,cAApB,KAAuC,OAAvC,GAAiD,KAAKtF,MAAL,CAAYmB,KAA7D,GAAqE,KAAKnB,MAAL,CAAYoB;AAAjH,SAAP;;AACR,WAAK,gBAAL;AACI,YAAI8B,mBAAmB,CAACqC,oBAApB,KAA6C,MAAjD,EACI,OAAO;AAAExF,UAAAA,MAAM,EAAE,gBAAV;AAA4B6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYiB;AAAlD,SAAP,CADJ,KAGI,OAAO;AAAElB,UAAAA,MAAM,EAAE,gBAAV;AAA4B6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACqC,oBAApB,KAA6C,OAA7C,GAAuD,KAAKvF,MAAL,CAAYmB,KAAnE,GAA2E,KAAKnB,MAAL,CAAYoB;AAA7H,SAAP;;AACR,WAAK,sBAAL;AACI,YAAI8B,mBAAmB,CAACpB,cAApB,KAAuC,MAA3C,EACI,OAAO;AAAE/B,UAAAA,MAAM,EAAE,sBAAV;AAAkC6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYiB;AAAxD,SAAP,CADJ,KAGI,OAAO;AAAElB,UAAAA,MAAM,EAAE,sBAAV;AAAkC6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACpB,cAApB,KAAuC,OAAvC,GAAiD,KAAK9B,MAAL,CAAYmB,KAA7D,GAAqE,KAAKnB,MAAL,CAAYoB;AAA7H,SAAP;;AACR,WAAK,MAAL;AACI,eAAO;AACHrB,UAAAA,MAAM,EAAE,MADL;AAEH6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACsC,UAApB,KAAmC,aAAnC,GAAmD,KAAKxF,MAAL,CAAYe,WAA/D,GAA6E,KAAKf,MAAL,CAAYgB;AAFhG,SAAP;;AAIJ,WAAK,UAAL;AACI,eAAO;AACHjB,UAAAA,MAAM,EAAE,UADL;AAEH6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACsC,UAApB,KAAmC,aAAnC,GAAmD,KAAKxF,MAAL,CAAYe,WAA/D,GAA6E,KAAKf,MAAL,CAAYgB;AAFhG,SAAP;;AAIJ,WAAK,SAAL;AACI,YAAIkC,mBAAmB,CAACuC,aAApB,KAAsC,SAA1C,EACI,OAAO;AAAE1F,UAAAA,MAAM,EAAE,SAAV;AAAqB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYkB;AAA3C,SAAP,CADJ,KAGI,OAAO;AAAEnB,UAAAA,MAAM,EAAE,SAAV;AAAqB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYgB;AAA3C,SAAP;;AACR,WAAK,OAAL;AACI,YAAIkC,mBAAmB,CAACwC,WAApB,KAAoC,SAAxC,EACI,OAAO;AAAE3F,UAAAA,MAAM,EAAE,OAAV;AAAmB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYkB;AAAzC,SAAP,CADJ,KAGI,OAAO;AAAEnB,UAAAA,MAAM,EAAE,OAAV;AAAmB6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACwC,WAApB,KAAoC,aAApC,GAAoD,KAAK1F,MAAL,CAAYe,WAAhE,GAA8E,KAAKf,MAAL,CAAYgB;AAAvH,SAAP;;AACR,WAAK,MAAL;AACI,eAAO;AACHjB,UAAAA,MAAM,EAAE,MADL;AAEH6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAACyC,UAApB,KAAmC,MAAnC,GAA4C,KAAK3F,MAAL,CAAYiB,IAAxD,GAA+D,KAAKjB,MAAL,CAAYmB;AAFlF,SAAP;;AAIJ,WAAK,WAAL;AACI,YAAI+B,mBAAmB,CAAC0C,eAApB,KAAwC,SAA5C,EACI,OAAO;AAAE7F,UAAAA,MAAM,EAAE,WAAV;AAAuB6E,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYkB;AAA7C,SAAP,CADJ,KAGI,OAAO;AAAEnB,UAAAA,MAAM,EAAE,WAAV;AAAuB6E,UAAAA,QAAQ,EAAE1B,mBAAmB,CAAC0C,eAApB,KAAwC,aAAxC,GAAwD,KAAK5F,MAAL,CAAYe,WAApE,GAAkF,KAAKf,MAAL,CAAYgB;AAA/H,SAAP;;AACR;AACI,eAAO;AAAEjB,UAAAA,MAAM,EAAE8F,gCAAgC,CAAC3C,mBAAmB,CAACiC,aAArB,CAA1C;AAA+EP,UAAAA,QAAQ,EAAE,KAAK5E,MAAL,CAAYkB;AAArG,SAAP;AA1DR;AA4DH,GAnED,MAoEK;AACD,WAAO,IAAP;AACH;AACJ;;AACDvC,OAAO,CAACK,oBAAR,GAA+BA,oBAA/B;;AACA,SAASD,kCAAT,CAA4C+G,aAA5C,EAA2DC,eAA3D,EAA4E;AACxE,MAAID,aAAa,IAAI,MAArB,EACI,OAAOA,aAAP;;AACJ,UAAQC,eAAR;AACI,SAAK,MAAL;AACI,aAAO,UAAP;;AACJ,SAAK,SAAL;AACI,aAAO,aAAP;;AACJ,SAAK,OAAL;AACI,aAAO,WAAP;;AACJ,SAAK,KAAL;AACI,aAAO,cAAP;;AACJ,SAAK,MAAL;AACI,aAAO,UAAP;;AACJ,SAAK,QAAL;AACI,aAAO,gBAAP;;AACJ,SAAK,QAAL;AACI,aAAO,sBAAP;;AACJ;AACI,aAAO,IAAP;AAhBR;AAkBH;;AACDpH,OAAO,CAACI,kCAAR,GAA6CA,kCAA7C;;AACA,SAASD,qBAAT,CAA+B2E,UAA/B,EAA2C;AACvC,UAAQA,UAAR;AACI,SAAK,QAAL;AAAe,aAAO,YAAP;;AACf,SAAK,UAAL;AAAiB,aAAO,UAAP;;AACjB,SAAK,YAAL;AAAmB,aAAO,aAAP;;AACnB,SAAK,SAAL;AAAgB,aAAO,SAAP;;AAChB;AAAS,aAAOtB,SAAP;AALb;AAOH;;AACDxD,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AACA,SAASD,mBAAT,CAA6BmH,WAA7B,EAA0C;AACtC,UAAQA,WAAR;AACI,SAAK,MAAL;AAAa,aAAO,MAAP;;AACb,SAAK,WAAL;AAAkB,aAAO,CAAP;;AAClB,SAAK,UAAL;AAAiB,aAAO,CAAP;;AACjB,SAAK,UAAL;AAAiB,aAAO,CAAP;;AACjB;AAAS,aAAO,CAAP;AALb;AAOH;;AACDrH,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACA,IAAIgH,gCAAgC,GAAG;AACnC,UAAQ,MAD2B;AAEnC,aAAW,SAFwB;AAGnC,WAAS,OAH0B;AAInC,SAAO,KAJ4B;AAKnC,UAAQ,MAL2B;AAMnC,YAAU,QANyB;AAOnC,YAAU,QAPyB;AAQnC,eAAa,WARsB;AASnC,eAAa,WATsB;AAUnC,gBAAc,YAVqB;AAWnC,iBAAe,aAXoB;AAYnC,cAAY,UAZuB;AAanC,eAAa,WAbsB;AAcnC,iBAAe,aAdoB;AAenC,kBAAgB,cAfmB;AAgBnC,cAAY,UAhBuB;AAiBnC,oBAAkB,gBAjBiB;AAkBnC,0BAAwB,sBAlBW;AAmBnC,UAAQ;AAnB2B,CAAvC","sourcesContent":["/**\r\n* DevExpress Dashboard (_formatter.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._convertNumericUnit = exports._convertNumericFormat = exports._getSyntheticDateTimeGroupInterval = exports._convertToDateFormat = exports._convertToNumberFormat = exports.convertToFormat = exports.calculatePrecision = exports.calculateUnitPower = exports.getAxisFormat = exports.formatAxisValue = exports.formatScientificAxisValue = exports.formatPercentValue = exports.formatObject = exports.formatDateTime = exports.formatNumeric = exports.constructIntervalFilterText = exports.formatFilterValue = exports.formatByFormatInfo = exports.format = exports._types = exports.defaultScientificFormat = exports.defaultPercentFormat = exports.defaultNumericFormat = void 0;\nvar string_1 = require(\"devextreme/core/utils/string\");\nvar legacy_settings_1 = require(\"../viewer-parts/legacy-settings\");\nvar _default_1 = require(\"./localization/_default\");\nvar _format_helper_1 = require(\"./_format-helper\");\nvar _localizer_1 = require(\"./_localizer\");\nvar _utils_1 = require(\"./_utils\");\nexports.defaultNumericFormat = {\n    format: 'fixedPoint',\n    unitPower: 'auto',\n    precision: 0,\n    significantDigits: 3\n};\nexports.defaultPercentFormat = {\n    format: 'percent',\n    unitPower: 0,\n    precision: 2,\n    significantDigits: 0,\n    showTrailingZeros: false\n};\nexports.defaultScientificFormat = {\n    format: 'exponential',\n    precision: 2\n};\nexports._types = {\n    Abbreviated: 'abbr',\n    Full: 'full',\n    Long: 'long',\n    Numeric: 'num',\n    Short: 'short',\n    TimeOnly: 'timeOnly'\n};\nfunction format(value, formatViewModel) {\n    var str = _localizer_1.localizer.getPredefinedString(value);\n    if (!_utils_1.type.isDefined(str)) {\n        var numericFormat = formatViewModel && formatViewModel.NumericFormat, dateTimeFormat = formatViewModel && formatViewModel.DateTimeFormat;\n        if (numericFormat) {\n            str = this.formatNumeric(value, numericFormat);\n        }\n        else {\n            str = !dateTimeFormat ? this.formatObject(value) : this.formatDateTime(value, dateTimeFormat);\n        }\n    }\n    return str;\n}\nexports.format = format;\nfunction formatByFormatInfo(value, formatInfo) {\n    var str = _localizer_1.localizer.getPredefinedString(value);\n    if (!_utils_1.type.isDefined(str)) {\n        return _format_helper_1.formatHelper.format(value, formatInfo);\n    }\n    return str;\n}\nexports.formatByFormatInfo = formatByFormatInfo;\nfunction formatFilterValue(filterValue) {\n    if (filterValue.Value !== undefined) {\n        return this.format(filterValue.Value, filterValue.Format);\n    }\n    var rangeLeft;\n    var rangeRight;\n    if (_utils_1.type.isDefined(filterValue.RangeLeft)) {\n        rangeLeft = this.format(filterValue.RangeLeft, filterValue.Format);\n    }\n    if (_utils_1.type.isDefined(filterValue.RangeRight)) {\n        rangeRight = this.format(filterValue.RangeRight, filterValue.Format);\n    }\n    return constructIntervalFilterText({ left: rangeLeft, right: rangeRight });\n}\nexports.formatFilterValue = formatFilterValue;\nfunction constructIntervalFilterText(rangeText) {\n    var rangePattern = _default_1.getLocalizationById('DashboardStringId.FromToDatePeriodCaption');\n    var fromPattern = _default_1.getLocalizationById('DashboardStringId.FromDatePeriodCaption');\n    var toPattern = _default_1.getLocalizationById('DashboardStringId.ToDatePeriodCaption');\n    if (rangeText.left && rangeText.right) {\n        if (rangeText.right != rangeText.left)\n            return string_1.format(rangePattern, rangeText.left, rangeText.right);\n        else\n            return rangeText.left;\n    }\n    if (rangeText.left) {\n        return string_1.format(fromPattern, rangeText.left);\n    }\n    if (rangeText.right) {\n        return string_1.format(toPattern, rangeText.right);\n    }\n}\nexports.constructIntervalFilterText = constructIntervalFilterText;\nfunction formatNumeric(value, numericFormatViewModel) {\n    if (!numericFormatViewModel) {\n        return value.toString();\n    }\n    else {\n        var format = this._convertToNumberFormat(numericFormatViewModel);\n        return _format_helper_1.formatHelper.format(value, format);\n    }\n}\nexports.formatNumeric = formatNumeric;\nfunction formatDateTime(value, dateFormatViewModel) {\n    var format = this._convertToDateFormat(dateFormatViewModel);\n    return _format_helper_1.formatHelper.format(value, format);\n}\nexports.formatDateTime = formatDateTime;\nfunction formatObject(value) {\n    return value == null ? '' : value.toString();\n}\nexports.formatObject = formatObject;\nfunction formatPercentValue(value) {\n    return _format_helper_1.formatHelper.format(value, this.defaultPercentFormat);\n}\nexports.formatPercentValue = formatPercentValue;\nfunction formatScientificAxisValue(value) {\n    return _format_helper_1.formatHelper.format(value, this.defaultScientificFormat);\n}\nexports.formatScientificAxisValue = formatScientificAxisValue;\nfunction formatAxisValue(value, axisMin, axisMax) {\n    return _format_helper_1.formatHelper.format(value, this.getAxisFormat(axisMin, axisMax));\n}\nexports.formatAxisValue = formatAxisValue;\nfunction getAxisFormat(axisMin, axisMax) {\n    return {\n        format: 'fixedPoint',\n        unitPower: this.calculateUnitPower(axisMin, axisMax),\n        precision: this.calculatePrecision(axisMin, axisMax),\n        significantDigits: 0,\n        showTrailingZeros: false\n    };\n}\nexports.getAxisFormat = getAxisFormat;\nfunction calculateUnitPower(axisMin, axisMax) {\n    var range = axisMax - axisMin;\n    if (range >= 1000000000)\n        return 3;\n    if (range >= 1000000)\n        return 2;\n    if (range >= 1000)\n        return 1;\n    return 0;\n}\nexports.calculateUnitPower = calculateUnitPower;\nfunction calculatePrecision(axisMin, axisMax) {\n    var precision = 0, range = axisMax - axisMin;\n    if (range > 0) {\n        var smallValue = Math.pow(10, -precision);\n        while (range < smallValue) {\n            smallValue /= 10;\n            precision++;\n        }\n    }\n    return precision + 2;\n}\nexports.calculatePrecision = calculatePrecision;\nfunction convertToFormat(formatViewModel) {\n    if (formatViewModel) {\n        var numericFormat = formatViewModel.NumericFormat;\n        if (numericFormat)\n            return this._convertToNumberFormat(numericFormat);\n        var dateTimeFormat = formatViewModel.DateTimeFormat;\n        if (dateTimeFormat)\n            return this._convertToDateFormat(dateTimeFormat);\n    }\n    return null;\n}\nexports.convertToFormat = convertToFormat;\nfunction _convertToNumberFormat(numericFormatViewModel) {\n    var formatInfo = null, formatType = numericFormatViewModel ? numericFormatViewModel.FormatType : undefined, unit = numericFormatViewModel ? numericFormatViewModel.Unit : undefined;\n    if (formatType === 'Custom') {\n        if (legacy_settings_1.DashboardPrivateSettings.customNumericFormatMode !== 'Disabled') {\n            return {\n                type: numericFormatViewModel.CustomFormatString,\n                unlimitedIntegerDigits: true\n            };\n        }\n        else {\n            formatType = 'Auto';\n        }\n    }\n    if (formatType === 'General') {\n        formatInfo = { format: 'general' };\n    }\n    else {\n        formatInfo = {};\n        formatInfo.format = this._convertNumericFormat(formatType);\n        formatInfo.currency = numericFormatViewModel.Currency;\n        if (formatInfo.currency === _format_helper_1.invariantCurrencyIdentifier) {\n            console.log('A web server does not support a currency specified for the dashboard. Refer to https://go.devexpress.com/dashboardInvariantCurrency.aspx to learn more.');\n        }\n        if (numericFormatViewModel.IncludeGroupSeparator) {\n            formatInfo.includeGroupSeparator = numericFormatViewModel.IncludeGroupSeparator;\n        }\n        if (numericFormatViewModel.ForcePlusSign) {\n            formatInfo.plus = numericFormatViewModel.ForcePlusSign;\n        }\n        formatInfo.precision = numericFormatViewModel.Precision;\n        if (unit && unit === 'Auto' && formatType !== 'Percent') {\n            formatInfo.significantDigits = numericFormatViewModel.SignificantDigits;\n        }\n        if (unit && formatType === 'Number' || formatType === 'Currency') {\n            formatInfo.unitPower = this._convertNumericUnit(unit);\n        }\n        formatInfo.dateType = null;\n    }\n    return formatInfo;\n}\nexports._convertToNumberFormat = _convertToNumberFormat;\nfunction _convertToDateFormat(dateFormatViewModel) {\n    if (dateFormatViewModel) {\n        var weekOptions = {};\n        if (_utils_1.type.isDefined(dateFormatViewModel.FirstDayOfWeek))\n            weekOptions.firstDayOfWeek = dateFormatViewModel.FirstDayOfWeek;\n        if (_utils_1.type.isDefined(dateFormatViewModel.CalendarWeekRule))\n            weekOptions.calendarWeekRule = dateFormatViewModel.CalendarWeekRule;\n        var syntheticGroupInterval = this._getSyntheticDateTimeGroupInterval(dateFormatViewModel.GroupInterval, dateFormatViewModel.ExactDateFormat);\n        switch (syntheticGroupInterval) {\n            case 'WeekYear':\n                return __assign(__assign({}, weekOptions), { format: 'weekYear', dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short });\n            case 'MonthYear':\n                return { format: 'monthYear', dateType: this._types.Full };\n            case 'QuarterYear':\n                return { format: 'quarterYear', dateType: this._types.Full };\n            case 'DayMonthYear':\n                return {\n                    format: 'dayMonthYear',\n                    dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short\n                };\n            case 'DateHour':\n                if (dateFormatViewModel.DateHourFormat === 'Long')\n                    return { format: 'dateHour', dateType: this._types.Long };\n                else\n                    return { format: 'dateHour', dateType: dateFormatViewModel.DateHourFormat === 'Short' ? this._types.Short : this._types.TimeOnly };\n            case 'DateHourMinute':\n                if (dateFormatViewModel.DateHourMinuteFormat === 'Long')\n                    return { format: 'dateHourMinute', dateType: this._types.Long };\n                else\n                    return { format: 'dateHourMinute', dateType: dateFormatViewModel.DateHourMinuteFormat === 'Short' ? this._types.Short : this._types.TimeOnly };\n            case 'DateHourMinuteSecond':\n                if (dateFormatViewModel.DateTimeFormat === 'Long')\n                    return { format: 'dateHourMinuteSecond', dateType: this._types.Long };\n                else\n                    return { format: 'dateHourMinuteSecond', dateType: dateFormatViewModel.DateTimeFormat === 'Short' ? this._types.Short : this._types.TimeOnly };\n            case 'Year':\n                return {\n                    format: 'year',\n                    dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full\n                };\n            case 'DateYear':\n                return {\n                    format: 'dateYear',\n                    dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full\n                };\n            case 'Quarter':\n                if (dateFormatViewModel.QuarterFormat === 'Numeric')\n                    return { format: 'quarter', dateType: this._types.Numeric };\n                else\n                    return { format: 'quarter', dateType: this._types.Full };\n            case 'Month':\n                if (dateFormatViewModel.MonthFormat === 'Numeric')\n                    return { format: 'month', dateType: this._types.Numeric };\n                else\n                    return { format: 'month', dateType: dateFormatViewModel.MonthFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full };\n            case 'Hour':\n                return {\n                    format: 'hour',\n                    dateType: dateFormatViewModel.HourFormat === 'Long' ? this._types.Long : this._types.Short\n                };\n            case 'DayOfWeek':\n                if (dateFormatViewModel.DayOfWeekFormat === 'Numeric')\n                    return { format: 'dayOfWeek', dateType: this._types.Numeric };\n                else\n                    return { format: 'dayOfWeek', dateType: dateFormatViewModel.DayOfWeekFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full };\n            default:\n                return { format: dateTimeGroupIntervalToCamelCase[dateFormatViewModel.GroupInterval], dateType: this._types.Numeric };\n        }\n    }\n    else {\n        return null;\n    }\n}\nexports._convertToDateFormat = _convertToDateFormat;\nfunction _getSyntheticDateTimeGroupInterval(groupInterval, exactDateFormat) {\n    if (groupInterval != 'None')\n        return groupInterval;\n    switch (exactDateFormat) {\n        case 'Year':\n            return 'DateYear';\n        case 'Quarter':\n            return 'QuarterYear';\n        case 'Month':\n            return 'MonthYear';\n        case 'Day':\n            return 'DayMonthYear';\n        case 'Hour':\n            return 'DateHour';\n        case 'Minute':\n            return 'DateHourMinute';\n        case 'Second':\n            return 'DateHourMinuteSecond';\n        default:\n            return null;\n    }\n}\nexports._getSyntheticDateTimeGroupInterval = _getSyntheticDateTimeGroupInterval;\nfunction _convertNumericFormat(formatType) {\n    switch (formatType) {\n        case 'Number': return 'fixedPoint';\n        case 'Currency': return 'currency';\n        case 'Scientific': return 'exponential';\n        case 'Percent': return 'percent';\n        default: return undefined;\n    }\n}\nexports._convertNumericFormat = _convertNumericFormat;\nfunction _convertNumericUnit(numericUnit) {\n    switch (numericUnit) {\n        case 'Auto': return 'auto';\n        case 'Thousands': return 1;\n        case 'Millions': return 2;\n        case 'Billions': return 3;\n        default: return 0;\n    }\n}\nexports._convertNumericUnit = _convertNumericUnit;\nvar dateTimeGroupIntervalToCamelCase = {\n    'Year': 'year',\n    'Quarter': 'quarter',\n    'Month': 'month',\n    'Day': 'day',\n    'Hour': 'hour',\n    'Minute': 'minute',\n    'Second': 'second',\n    'DayOfYear': 'dayOfYear',\n    'DayOfWeek': 'dayOfWeek',\n    'WeekOfYear': 'weekOfYear',\n    'WeekOfMonth': 'weekOfMonth',\n    'WeekYear': 'weekYear',\n    'MonthYear': 'monthYear',\n    'QuarterYear': 'quarterYear',\n    'DayMonthYear': 'dayMonthYear',\n    'DateHour': 'dateHour',\n    'DateHourMinute': 'dateHourMinute',\n    'DateHourMinuteSecond': 'dateHourMinuteSecond',\n    'None': 'none'\n};\n"]},"metadata":{},"sourceType":"script"}