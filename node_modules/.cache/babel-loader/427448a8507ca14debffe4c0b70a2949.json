{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_vertical.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport BaseAppointmentsStrategy from \"./strategy.base\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { isNumeric } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport timeZoneUtils from \"../../utils.timeZone\";\nimport { ExpressionUtils } from \"../../expressionUtils\";\nimport { createAppointmentAdapter } from \"../../appointmentAdapter\";\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\nimport { getAppointmentTakesAllDay } from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\n  getDeltaTime(args, initialSize, appointment) {\n    var deltaTime = 0;\n\n    if (this.isAllDay(appointment)) {\n      deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\");\n    } else {\n      var deltaHeight = args.height - initialSize.height;\n      deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.cellHeight * this.cellDurationInMinutes);\n    }\n\n    return deltaTime;\n  }\n\n  _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\n    if (isAllDay) {\n      super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay);\n    } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\n      var cellHeight = this.cellHeight;\n      var cellWidth = this.cellWidth;\n      coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\n      coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2;\n    }\n  }\n\n  getAppointmentGeometry(coordinates) {\n    var geometry = null;\n\n    if (coordinates.allDay) {\n      geometry = this._getAllDayAppointmentGeometry(coordinates);\n    } else {\n      geometry = this.isAdaptive && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates);\n    }\n\n    return super.getAppointmentGeometry(geometry);\n  }\n\n  _getAdaptiveGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n\n  _getItemPosition(appointment) {\n    var allDay = this.isAllDay(appointment);\n\n    if (allDay) {\n      return super._getItemPosition(appointment);\n    }\n\n    var adapter = createAppointmentAdapter(appointment, this.dataAccessors, this.timeZoneCalculator);\n    var isRecurring = !!adapter.recurrenceRule;\n    var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\n    var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\n    var appointmentDuration = appointmentEndDate - appointmentStartDate;\n    var appointmentBeginInCurrentView = this.options.startViewDate < appointmentStartDate;\n    var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\n    var settings = this.generateAppointmentSettings(appointment);\n    var result = [];\n\n    for (var j = 0; j < settings.length; j++) {\n      var currentSetting = settings[j];\n      var height = this.calculateAppointmentHeight(appointment, currentSetting);\n      var width = this.calculateAppointmentWidth(appointment, currentSetting);\n      var resultHeight = height;\n      var appointmentReduced = null;\n      var multiDaysAppointmentParts = [];\n      var currentMaxAllowedPosition = currentSetting.vMax;\n\n      if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\n        var trimmedStartDate = dateUtils.trimTime(appointmentStartDate);\n        var trimmedSettingStartDate = dateUtils.trimTime(currentSetting.info.appointment.startDate);\n        var reduceHead = trimmedStartDate <= trimmedSettingStartDate || isRecurring;\n\n        if (reduceHead) {\n          resultHeight = this._reduceMultiDayAppointment(height, {\n            top: currentSetting.top,\n            bottom: currentMaxAllowedPosition\n          });\n          multiDaysAppointmentParts = this._getAppointmentParts({\n            sourceAppointmentHeight: height,\n            reducedHeight: resultHeight,\n            width: width\n          }, currentSetting);\n        }\n\n        var {\n          startDate: currentSettingStartDate,\n          normalizedEndDate: currentSettingNormalizedEndDate\n        } = currentSetting.info.appointment;\n        var currentSettingDuration = currentSettingNormalizedEndDate - currentSettingStartDate;\n        var hasNextParts = currentSettingDuration < appointmentDuration;\n        appointmentReduced = hasNextParts ? appointmentBeginInCurrentView ? \"head\" : \"body\" : appointmentBeginInCurrentView ? \"head\" : \"tail\";\n      }\n\n      extend(currentSetting, {\n        height: resultHeight,\n        width: width,\n        allDay: allDay,\n        appointmentReduced: appointmentReduced\n      });\n      result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result);\n    }\n\n    return result;\n  }\n\n  _isMultiViewAppointment(position, height) {\n    return height > position.vMax - position.top;\n  }\n\n  _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\n    return Math.min(sourceAppointmentHeight, bound.bottom - Math.floor(bound.top));\n  }\n\n  _getGroupHeight() {\n    return this.cellHeight * this.rowCount;\n  }\n\n  _getGroupTopOffset(appointmentSettings) {\n    var {\n      groupIndex: groupIndex\n    } = appointmentSettings;\n    var groupTop = Math.max(0, this.positionHelper.getGroupTop({\n      groupIndex: groupIndex,\n      showAllDayPanel: this.showAllDayPanel,\n      isGroupedAllDayPanel: this.isGroupedAllDayPanel\n    }));\n    var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\n      groupIndex: groupIndex,\n      supportAllDayRow: this.allDaySupported(),\n      showAllDayPanel: this.showAllDayPanel\n    });\n    var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\n    return appointmentGroupTopOffset;\n  }\n\n  _getTailHeight(appointmentGeometry, appointmentSettings) {\n    if (!this.isVirtualScrolling) {\n      return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight;\n    }\n\n    var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\n\n    var {\n      sourceAppointmentHeight: sourceAppointmentHeight\n    } = appointmentGeometry;\n\n    var groupHeight = this._getGroupHeight();\n\n    var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\n    return tailHeight;\n  }\n\n  _getAppointmentParts(appointmentGeometry, appointmentSettings) {\n    var width = appointmentGeometry.width;\n    var result = [];\n    var currentPartTop = Math.max(0, this.positionHelper.getGroupTop({\n      groupIndex: appointmentSettings.groupIndex,\n      showAllDayPanel: this.showAllDayPanel,\n      isGroupedAllDayPanel: this.isGroupedAllDayPanel\n    }));\n    var cellsDiff = this.isGroupedByDate ? this.groupCount : 1;\n    var offset = this.cellWidth * cellsDiff;\n    var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\n      groupIndex: appointmentSettings.groupIndex,\n      supportAllDayRow: this.allDaySupported(),\n      showAllDayPanel: this.showAllDayPanel\n    });\n    currentPartTop += allDayPanelOffset;\n    var minHeight = this.getAppointmentMinSize();\n    var {\n      vMax: vMax,\n      hMax: hMax\n    } = appointmentSettings;\n    var hasTailPart = this.options.endViewDate > appointmentSettings.info.appointment.endDate;\n    var left = Math.round(appointmentSettings.left + offset);\n\n    var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\n\n    while (tailHeight > 0 && left < hMax) {\n      tailHeight = Math.max(minHeight, tailHeight);\n      var columnIndex = appointmentSettings.columnIndex + cellsDiff;\n      var height = Math.min(tailHeight, vMax);\n      result.push(_extends({}, appointmentSettings, {\n        top: currentPartTop,\n        left: left,\n        height: height,\n        width: width,\n        appointmentReduced: \"body\",\n        rowIndex: 0,\n        columnIndex: columnIndex\n      }));\n      left += offset;\n      tailHeight -= vMax;\n    }\n\n    if (hasTailPart && result.length > 0) {\n      result[result.length - 1].appointmentReduced = \"tail\";\n    }\n\n    return result;\n  }\n\n  _getMinuteHeight() {\n    return this.cellHeight / this.cellDurationInMinutes;\n  }\n\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    return itemLeft + (1 + cellWidth) * index;\n  }\n\n  _getVerticalAppointmentGeometry(coordinates) {\n    var config = this._calculateVerticalGeometryConfig(coordinates);\n\n    return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset);\n  }\n\n  _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\n    var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\n    var height = coordinates.height;\n    var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\n    var top = coordinates.top;\n\n    if (coordinates.isCompact) {\n      this._markAppointmentAsVirtual(coordinates, isAllDay);\n    }\n\n    return {\n      height: height,\n      width: appointmentWidth,\n      top: top,\n      left: appointmentLeft,\n      empty: this._isAppointmentEmpty(height, width)\n    };\n  }\n\n  _calculateVerticalGeometryConfig(coordinates) {\n    var overlappingMode = this.maxAppointmentsPerCell;\n\n    var offsets = this._getOffsets();\n\n    var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\n\n    var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\n\n    var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\n\n    var maxWidth = this._getMaxWidth();\n\n    if (!appointmentCountPerCell) {\n      appointmentCountPerCell = coordinates.count;\n      ratio = (maxWidth - offsets.unlimited) / maxWidth;\n    }\n\n    var topOffset = (1 - ratio) * maxWidth;\n\n    if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\n      ratio = 1;\n      maxWidth -= appointmentDefaultOffset;\n      topOffset = 0;\n    }\n\n    return {\n      width: ratio * maxWidth,\n      appointmentCountPerCell: appointmentCountPerCell,\n      offset: topOffset\n    };\n  }\n\n  _getMaxWidth() {\n    return this.cellWidth || this.cellWidth;\n  }\n\n  isAllDay(appointmentData) {\n    return getAppointmentTakesAllDay(createAppointmentAdapter(appointmentData, this.dataAccessors, this.timeZoneCalculator), this.startDayHour, this.endDayHour, this.allDayPanelMode);\n  }\n\n  _getAppointmentMaxWidth() {\n    return this.cellWidth - this._getAppointmentDefaultOffset();\n  }\n\n  calculateAppointmentWidth(appointment, position) {\n    if (!this.isAllDay(appointment)) {\n      return 0;\n    }\n\n    var startDate = dateUtils.trimTime(position.info.appointment.startDate);\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    var durationInHours = (normalizedEndDate.getTime() - startDate.getTime()) / toMs(\"hour\");\n    var skippedHours = getSkippedHoursInRange(position.info.appointment.startDate, position.info.appointment.endDate, this.viewDataProvider);\n    var width = Math.ceil((durationInHours - skippedHours) / 24) * cellWidth;\n    width = this.cropAppointmentWidth(width, cellWidth);\n    return width;\n  }\n\n  calculateAppointmentHeight(appointment, position) {\n    if (this.isAllDay(appointment)) {\n      return 0;\n    }\n\n    var startDate = position.info.appointment.startDate;\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\n    var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\n    var durationInMinutes = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate) / toMs(\"minute\");\n\n    var height = durationInMinutes * this._getMinuteHeight();\n\n    return height;\n  }\n\n  getDirection() {\n    return \"vertical\";\n  }\n\n  _sortCondition(a, b) {\n    var allDayCondition = a.allDay - b.allDay;\n    var isAllDay = a.allDay && b.allDay;\n    var condition = \"vertical\" === this.groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\n    return allDayCondition ? allDayCondition : condition;\n  }\n\n  allDaySupported() {\n    return true;\n  }\n\n  _getAllDayAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true);\n  }\n\n  _calculateGeometryConfig(coordinates) {\n    if (!this.allowResizing || !this.allowAllDayResizing) {\n      coordinates.skipResizing = true;\n    }\n\n    var config = super._calculateGeometryConfig(coordinates);\n\n    if (coordinates.count <= this._getDynamicAppointmentCountPerCell().allDay) {\n      config.offset = 0;\n    }\n\n    return config;\n  }\n\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay);\n  }\n\n  _getDefaultRatio(coordinates, appointmentCountPerCell) {\n    return coordinates.count > this.appointmentCountPerCell ? .65 : 1;\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\n      auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\n    };\n  }\n\n  _getMaxHeight() {\n    return this.allDayHeight || this.getAppointmentMinSize();\n  }\n\n  _needVerticalGroupBounds(allDay) {\n    return !allDay;\n  }\n\n  _needHorizontalGroupBounds() {\n    return false;\n  }\n\n  getPositionShift(timeShift, isAllDay) {\n    if (!isAllDay && this.isAdaptive && 0 === this._getMaxAppointmentCountPerCellByType(isAllDay)) {\n      return {\n        top: 0,\n        left: 0,\n        cellPosition: 0\n      };\n    }\n\n    return super.getPositionShift(timeShift, isAllDay);\n  }\n\n}\n\nexport default VerticalRenderingStrategy;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/scheduler/appointments/rendering_strategies/strategy_vertical.js"],"names":["_extends","BaseAppointmentsStrategy","extend","isNumeric","dateUtils","timeZoneUtils","ExpressionUtils","createAppointmentAdapter","getSkippedHoursInRange","getAppointmentTakesAllDay","ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET","ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET","toMs","dateToMilliseconds","VerticalRenderingStrategy","getDeltaTime","args","initialSize","appointment","deltaTime","isAllDay","_getDeltaWidth","deltaHeight","height","Math","round","cellHeight","cellDurationInMinutes","_correctCollectorCoordinatesInAdaptive","coordinates","_getMaxAppointmentCountPerCellByType","cellWidth","top","getDropDownButtonAdaptiveSize","left","getAppointmentGeometry","geometry","allDay","_getAllDayAppointmentGeometry","isAdaptive","isCompact","_getAdaptiveGeometry","_getVerticalAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","appointmentCountPerCell","offset","_getItemPosition","adapter","dataAccessors","timeZoneCalculator","isRecurring","recurrenceRule","appointmentStartDate","calculateStartDate","appointmentEndDate","calculateEndDate","appointmentDuration","appointmentBeginInCurrentView","options","startViewDate","isAppointmentTakesSeveralDays","isSameAppointmentDates","settings","generateAppointmentSettings","result","j","length","currentSetting","calculateAppointmentHeight","width","calculateAppointmentWidth","resultHeight","appointmentReduced","multiDaysAppointmentParts","currentMaxAllowedPosition","vMax","_isMultiViewAppointment","trimmedStartDate","trimTime","trimmedSettingStartDate","info","startDate","reduceHead","_reduceMultiDayAppointment","bottom","_getAppointmentParts","sourceAppointmentHeight","reducedHeight","currentSettingStartDate","normalizedEndDate","currentSettingNormalizedEndDate","currentSettingDuration","hasNextParts","_getAppointmentPartsPosition","position","bound","min","floor","_getGroupHeight","rowCount","_getGroupTopOffset","appointmentSettings","groupIndex","groupTop","max","positionHelper","getGroupTop","showAllDayPanel","isGroupedAllDayPanel","allDayPanelOffset","getOffsetByAllDayPanel","supportAllDayRow","allDaySupported","appointmentGroupTopOffset","_getTailHeight","appointmentGeometry","isVirtualScrolling","groupHeight","tailHeight","currentPartTop","cellsDiff","isGroupedByDate","groupCount","minHeight","getAppointmentMinSize","hMax","hasTailPart","endViewDate","endDate","columnIndex","push","rowIndex","_getMinuteHeight","_getCompactLeftCoordinate","itemLeft","index","_calculateVerticalGeometryConfig","_customizeVerticalCoordinates","topOffset","appointmentWidth","count","appointmentLeft","_markAppointmentAsVirtual","empty","_isAppointmentEmpty","overlappingMode","maxAppointmentsPerCell","offsets","_getOffsets","appointmentDefaultOffset","_getAppointmentDefaultOffset","_getAppointmentCount","ratio","_getDefaultRatio","maxWidth","_getMaxWidth","unlimited","appointmentData","startDayHour","endDayHour","allDayPanelMode","_getAppointmentMaxWidth","durationInHours","getTime","skippedHours","viewDataProvider","ceil","cropAppointmentWidth","getField","duration","getAppointmentDurationInMs","durationInMinutes","_adjustDurationByDaylightDiff","getDirection","_sortCondition","a","b","allDayCondition","condition","groupOrientation","_columnCondition","_rowCondition","allowResizing","allowAllDayResizing","skipResizing","_getDynamicAppointmentCountPerCell","auto","_getMaxHeight","allDayHeight","_needVerticalGroupBounds","_needHorizontalGroupBounds","getPositionShift","timeShift","cellPosition"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_vertical.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport BaseAppointmentsStrategy from \"./strategy.base\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    isNumeric\r\n} from \"../../../../core/utils/type\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport timeZoneUtils from \"../../utils.timeZone\";\r\nimport {\r\n    ExpressionUtils\r\n} from \"../../expressionUtils\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../appointmentAdapter\";\r\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\r\nimport {\r\n    getAppointmentTakesAllDay\r\n} from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\r\nvar ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET = 5;\r\nvar ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET = 20;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass VerticalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    getDeltaTime(args, initialSize, appointment) {\r\n        var deltaTime = 0;\r\n        if (this.isAllDay(appointment)) {\r\n            deltaTime = this._getDeltaWidth(args, initialSize) * toMs(\"day\")\r\n        } else {\r\n            var deltaHeight = args.height - initialSize.height;\r\n            deltaTime = toMs(\"minute\") * Math.round(deltaHeight / this.cellHeight * this.cellDurationInMinutes)\r\n        }\r\n        return deltaTime\r\n    }\r\n    _correctCollectorCoordinatesInAdaptive(coordinates, isAllDay) {\r\n        if (isAllDay) {\r\n            super._correctCollectorCoordinatesInAdaptive(coordinates, isAllDay)\r\n        } else if (0 === this._getMaxAppointmentCountPerCellByType()) {\r\n            var cellHeight = this.cellHeight;\r\n            var cellWidth = this.cellWidth;\r\n            coordinates.top += (cellHeight - this.getDropDownButtonAdaptiveSize()) / 2;\r\n            coordinates.left += (cellWidth - this.getDropDownButtonAdaptiveSize()) / 2\r\n        }\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var geometry = null;\r\n        if (coordinates.allDay) {\r\n            geometry = this._getAllDayAppointmentGeometry(coordinates)\r\n        } else {\r\n            geometry = this.isAdaptive && coordinates.isCompact ? this._getAdaptiveGeometry(coordinates) : this._getVerticalAppointmentGeometry(coordinates)\r\n        }\r\n        return super.getAppointmentGeometry(geometry)\r\n    }\r\n    _getAdaptiveGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getItemPosition(appointment) {\r\n        var allDay = this.isAllDay(appointment);\r\n        if (allDay) {\r\n            return super._getItemPosition(appointment)\r\n        }\r\n        var adapter = createAppointmentAdapter(appointment, this.dataAccessors, this.timeZoneCalculator);\r\n        var isRecurring = !!adapter.recurrenceRule;\r\n        var appointmentStartDate = adapter.calculateStartDate(\"toGrid\");\r\n        var appointmentEndDate = adapter.calculateEndDate(\"toGrid\");\r\n        var appointmentDuration = appointmentEndDate - appointmentStartDate;\r\n        var appointmentBeginInCurrentView = this.options.startViewDate < appointmentStartDate;\r\n        var isAppointmentTakesSeveralDays = !timeZoneUtils.isSameAppointmentDates(appointmentStartDate, appointmentEndDate);\r\n        var settings = this.generateAppointmentSettings(appointment);\r\n        var result = [];\r\n        for (var j = 0; j < settings.length; j++) {\r\n            var currentSetting = settings[j];\r\n            var height = this.calculateAppointmentHeight(appointment, currentSetting);\r\n            var width = this.calculateAppointmentWidth(appointment, currentSetting);\r\n            var resultHeight = height;\r\n            var appointmentReduced = null;\r\n            var multiDaysAppointmentParts = [];\r\n            var currentMaxAllowedPosition = currentSetting.vMax;\r\n            if (this._isMultiViewAppointment(currentSetting, height) || isAppointmentTakesSeveralDays && !isRecurring) {\r\n                var trimmedStartDate = dateUtils.trimTime(appointmentStartDate);\r\n                var trimmedSettingStartDate = dateUtils.trimTime(currentSetting.info.appointment.startDate);\r\n                var reduceHead = trimmedStartDate <= trimmedSettingStartDate || isRecurring;\r\n                if (reduceHead) {\r\n                    resultHeight = this._reduceMultiDayAppointment(height, {\r\n                        top: currentSetting.top,\r\n                        bottom: currentMaxAllowedPosition\r\n                    });\r\n                    multiDaysAppointmentParts = this._getAppointmentParts({\r\n                        sourceAppointmentHeight: height,\r\n                        reducedHeight: resultHeight,\r\n                        width: width\r\n                    }, currentSetting)\r\n                }\r\n                var {\r\n                    startDate: currentSettingStartDate,\r\n                    normalizedEndDate: currentSettingNormalizedEndDate\r\n                } = currentSetting.info.appointment;\r\n                var currentSettingDuration = currentSettingNormalizedEndDate - currentSettingStartDate;\r\n                var hasNextParts = currentSettingDuration < appointmentDuration;\r\n                appointmentReduced = hasNextParts ? appointmentBeginInCurrentView ? \"head\" : \"body\" : appointmentBeginInCurrentView ? \"head\" : \"tail\"\r\n            }\r\n            extend(currentSetting, {\r\n                height: resultHeight,\r\n                width: width,\r\n                allDay: allDay,\r\n                appointmentReduced: appointmentReduced\r\n            });\r\n            result = this._getAppointmentPartsPosition(multiDaysAppointmentParts, currentSetting, result)\r\n        }\r\n        return result\r\n    }\r\n    _isMultiViewAppointment(position, height) {\r\n        return height > position.vMax - position.top\r\n    }\r\n    _reduceMultiDayAppointment(sourceAppointmentHeight, bound) {\r\n        return Math.min(sourceAppointmentHeight, bound.bottom - Math.floor(bound.top))\r\n    }\r\n    _getGroupHeight() {\r\n        return this.cellHeight * this.rowCount\r\n    }\r\n    _getGroupTopOffset(appointmentSettings) {\r\n        var {\r\n            groupIndex: groupIndex\r\n        } = appointmentSettings;\r\n        var groupTop = Math.max(0, this.positionHelper.getGroupTop({\r\n            groupIndex: groupIndex,\r\n            showAllDayPanel: this.showAllDayPanel,\r\n            isGroupedAllDayPanel: this.isGroupedAllDayPanel\r\n        }));\r\n        var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\r\n            groupIndex: groupIndex,\r\n            supportAllDayRow: this.allDaySupported(),\r\n            showAllDayPanel: this.showAllDayPanel\r\n        });\r\n        var appointmentGroupTopOffset = appointmentSettings.top - groupTop - allDayPanelOffset;\r\n        return appointmentGroupTopOffset\r\n    }\r\n    _getTailHeight(appointmentGeometry, appointmentSettings) {\r\n        if (!this.isVirtualScrolling) {\r\n            return appointmentGeometry.sourceAppointmentHeight - appointmentGeometry.reducedHeight\r\n        }\r\n        var appointmentGroupTopOffset = this._getGroupTopOffset(appointmentSettings);\r\n        var {\r\n            sourceAppointmentHeight: sourceAppointmentHeight\r\n        } = appointmentGeometry;\r\n        var groupHeight = this._getGroupHeight();\r\n        var tailHeight = appointmentGroupTopOffset + sourceAppointmentHeight - groupHeight;\r\n        return tailHeight\r\n    }\r\n    _getAppointmentParts(appointmentGeometry, appointmentSettings) {\r\n        var width = appointmentGeometry.width;\r\n        var result = [];\r\n        var currentPartTop = Math.max(0, this.positionHelper.getGroupTop({\r\n            groupIndex: appointmentSettings.groupIndex,\r\n            showAllDayPanel: this.showAllDayPanel,\r\n            isGroupedAllDayPanel: this.isGroupedAllDayPanel\r\n        }));\r\n        var cellsDiff = this.isGroupedByDate ? this.groupCount : 1;\r\n        var offset = this.cellWidth * cellsDiff;\r\n        var allDayPanelOffset = this.positionHelper.getOffsetByAllDayPanel({\r\n            groupIndex: appointmentSettings.groupIndex,\r\n            supportAllDayRow: this.allDaySupported(),\r\n            showAllDayPanel: this.showAllDayPanel\r\n        });\r\n        currentPartTop += allDayPanelOffset;\r\n        var minHeight = this.getAppointmentMinSize();\r\n        var {\r\n            vMax: vMax,\r\n            hMax: hMax\r\n        } = appointmentSettings;\r\n        var hasTailPart = this.options.endViewDate > appointmentSettings.info.appointment.endDate;\r\n        var left = Math.round(appointmentSettings.left + offset);\r\n        var tailHeight = this._getTailHeight(appointmentGeometry, appointmentSettings);\r\n        while (tailHeight > 0 && left < hMax) {\r\n            tailHeight = Math.max(minHeight, tailHeight);\r\n            var columnIndex = appointmentSettings.columnIndex + cellsDiff;\r\n            var height = Math.min(tailHeight, vMax);\r\n            result.push(_extends({}, appointmentSettings, {\r\n                top: currentPartTop,\r\n                left: left,\r\n                height: height,\r\n                width: width,\r\n                appointmentReduced: \"body\",\r\n                rowIndex: 0,\r\n                columnIndex: columnIndex\r\n            }));\r\n            left += offset;\r\n            tailHeight -= vMax\r\n        }\r\n        if (hasTailPart && result.length > 0) {\r\n            result[result.length - 1].appointmentReduced = \"tail\"\r\n        }\r\n        return result\r\n    }\r\n    _getMinuteHeight() {\r\n        return this.cellHeight / this.cellDurationInMinutes\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        return itemLeft + (1 + cellWidth) * index\r\n    }\r\n    _getVerticalAppointmentGeometry(coordinates) {\r\n        var config = this._calculateVerticalGeometryConfig(coordinates);\r\n        return this._customizeVerticalCoordinates(coordinates, config.width, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _customizeVerticalCoordinates(coordinates, width, appointmentCountPerCell, topOffset, isAllDay) {\r\n        var appointmentWidth = Math.max(width / appointmentCountPerCell, width / coordinates.count);\r\n        var height = coordinates.height;\r\n        var appointmentLeft = coordinates.left + coordinates.index * appointmentWidth;\r\n        var top = coordinates.top;\r\n        if (coordinates.isCompact) {\r\n            this._markAppointmentAsVirtual(coordinates, isAllDay)\r\n        }\r\n        return {\r\n            height: height,\r\n            width: appointmentWidth,\r\n            top: top,\r\n            left: appointmentLeft,\r\n            empty: this._isAppointmentEmpty(height, width)\r\n        }\r\n    }\r\n    _calculateVerticalGeometryConfig(coordinates) {\r\n        var overlappingMode = this.maxAppointmentsPerCell;\r\n        var offsets = this._getOffsets();\r\n        var appointmentDefaultOffset = this._getAppointmentDefaultOffset();\r\n        var appointmentCountPerCell = this._getAppointmentCount(overlappingMode, coordinates);\r\n        var ratio = this._getDefaultRatio(coordinates, appointmentCountPerCell);\r\n        var maxWidth = this._getMaxWidth();\r\n        if (!appointmentCountPerCell) {\r\n            appointmentCountPerCell = coordinates.count;\r\n            ratio = (maxWidth - offsets.unlimited) / maxWidth\r\n        }\r\n        var topOffset = (1 - ratio) * maxWidth;\r\n        if (\"auto\" === overlappingMode || isNumeric(overlappingMode)) {\r\n            ratio = 1;\r\n            maxWidth -= appointmentDefaultOffset;\r\n            topOffset = 0\r\n        }\r\n        return {\r\n            width: ratio * maxWidth,\r\n            appointmentCountPerCell: appointmentCountPerCell,\r\n            offset: topOffset\r\n        }\r\n    }\r\n    _getMaxWidth() {\r\n        return this.cellWidth || this.cellWidth\r\n    }\r\n    isAllDay(appointmentData) {\r\n        return getAppointmentTakesAllDay(createAppointmentAdapter(appointmentData, this.dataAccessors, this.timeZoneCalculator), this.startDayHour, this.endDayHour, this.allDayPanelMode)\r\n    }\r\n    _getAppointmentMaxWidth() {\r\n        return this.cellWidth - this._getAppointmentDefaultOffset()\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        if (!this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = dateUtils.trimTime(position.info.appointment.startDate);\r\n        var {\r\n            normalizedEndDate: normalizedEndDate\r\n        } = position.info.appointment;\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        var durationInHours = (normalizedEndDate.getTime() - startDate.getTime()) / toMs(\"hour\");\r\n        var skippedHours = getSkippedHoursInRange(position.info.appointment.startDate, position.info.appointment.endDate, this.viewDataProvider);\r\n        var width = Math.ceil((durationInHours - skippedHours) / 24) * cellWidth;\r\n        width = this.cropAppointmentWidth(width, cellWidth);\r\n        return width\r\n    }\r\n    calculateAppointmentHeight(appointment, position) {\r\n        if (this.isAllDay(appointment)) {\r\n            return 0\r\n        }\r\n        var startDate = position.info.appointment.startDate;\r\n        var {\r\n            normalizedEndDate: normalizedEndDate\r\n        } = position.info.appointment;\r\n        var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\r\n        var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\r\n        var durationInMinutes = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate) / toMs(\"minute\");\r\n        var height = durationInMinutes * this._getMinuteHeight();\r\n        return height\r\n    }\r\n    getDirection() {\r\n        return \"vertical\"\r\n    }\r\n    _sortCondition(a, b) {\r\n        var allDayCondition = a.allDay - b.allDay;\r\n        var isAllDay = a.allDay && b.allDay;\r\n        var condition = \"vertical\" === this.groupOrientation && isAllDay ? this._columnCondition(a, b) : this._rowCondition(a, b);\r\n        return allDayCondition ? allDayCondition : condition\r\n    }\r\n    allDaySupported() {\r\n        return true\r\n    }\r\n    _getAllDayAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset, true)\r\n    }\r\n    _calculateGeometryConfig(coordinates) {\r\n        if (!this.allowResizing || !this.allowAllDayResizing) {\r\n            coordinates.skipResizing = true\r\n        }\r\n        var config = super._calculateGeometryConfig(coordinates);\r\n        if (coordinates.count <= this._getDynamicAppointmentCountPerCell().allDay) {\r\n            config.offset = 0\r\n        }\r\n        return config\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return \"auto\" !== overlappingMode && 1 === coordinates.count && !isNumeric(overlappingMode) ? coordinates.count : this._getMaxAppointmentCountPerCellByType(coordinates.allDay)\r\n    }\r\n    _getDefaultRatio(coordinates, appointmentCountPerCell) {\r\n        return coordinates.count > this.appointmentCountPerCell ? .65 : 1\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: ALLDAY_APPOINTMENT_MIN_VERTICAL_OFFSET,\r\n            auto: ALLDAY_APPOINTMENT_MAX_VERTICAL_OFFSET\r\n        }\r\n    }\r\n    _getMaxHeight() {\r\n        return this.allDayHeight || this.getAppointmentMinSize()\r\n    }\r\n    _needVerticalGroupBounds(allDay) {\r\n        return !allDay\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return false\r\n    }\r\n    getPositionShift(timeShift, isAllDay) {\r\n        if (!isAllDay && this.isAdaptive && 0 === this._getMaxAppointmentCountPerCellByType(isAllDay)) {\r\n            return {\r\n                top: 0,\r\n                left: 0,\r\n                cellPosition: 0\r\n            }\r\n        }\r\n        return super.getPositionShift(timeShift, isAllDay)\r\n    }\r\n}\r\nexport default VerticalRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}