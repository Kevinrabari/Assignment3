{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.treelist.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport dxTreeList from \"../tree_list\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { GanttHelper } from \"./ui.gantt.helper\";\nimport { DataSource } from \"../../data/data_source/data_source\";\nimport ArrayStore from \"../../data/array_store\";\nvar GANTT_TASKS = \"tasks\";\nvar GANTT_COLLAPSABLE_ROW = \"dx-gantt-collapsable-row\";\nvar GANTT_DEFAULT_ROW_HEIGHT = 34;\nexport class GanttTreeList {\n  constructor(gantt) {\n    this._gantt = gantt;\n    this._$treeList = this._gantt._$treeList;\n  }\n\n  getTreeList() {\n    var {\n      keyExpr: keyExpr,\n      parentIdExpr: parentIdExpr\n    } = this._gantt.option(GANTT_TASKS);\n\n    this._treeList = this._gantt._createComponent(this._$treeList, dxTreeList, {\n      dataSource: this.createDataSource(this._gantt._tasksRaw),\n      keyExpr: keyExpr,\n      parentIdExpr: parentIdExpr,\n      columns: this.getColumns(),\n      columnResizingMode: \"nextColumn\",\n      height: this._getHeight(),\n      width: this._gantt.option(\"taskListWidth\"),\n      selection: {\n        mode: GanttHelper.getSelectionMode(this._gantt.option(\"allowSelection\"))\n      },\n      selectedRowKeys: GanttHelper.getArrayFromOneElement(this._gantt.option(\"selectedRowKey\")),\n      sorting: this._gantt.option(\"sorting\"),\n      filterRow: this._gantt.option(\"filterRow\"),\n      headerFilter: this._gantt.option(\"headerFilter\"),\n      scrolling: {\n        showScrollbar: \"onHover\",\n        mode: \"virtual\"\n      },\n      allowColumnResizing: true,\n      autoExpandAll: true,\n      showRowLines: this._gantt.option(\"showRowLines\"),\n      rootValue: this._gantt.option(\"rootValue\"),\n      onContentReady: e => {\n        this._onContentReady(e);\n      },\n      onSelectionChanged: e => {\n        this._onSelectionChanged(e);\n      },\n      onRowCollapsed: e => {\n        this._onRowCollapsed(e);\n      },\n      onRowExpanded: e => {\n        this._onRowExpanded(e);\n      },\n      onRowPrepared: e => {\n        this._onRowPrepared(e);\n      },\n      onContextMenuPreparing: e => {\n        this._onContextMenuPreparing(e);\n      },\n      onRowClick: e => {\n        this.onRowClick(e);\n      },\n      onRowDblClick: e => {\n        this.onRowDblClick(e);\n      }\n    });\n    return this._treeList;\n  }\n\n  onAfterTreeListCreate() {\n    if (this._postponedGanttInitRequired) {\n      this._initGanttOnContentReady({\n        component: this._treeList\n      });\n\n      delete this._postponedGanttInitRequired;\n    }\n  }\n\n  _onContentReady(e) {\n    var hasTreeList = !!this._treeList;\n\n    if (hasTreeList) {\n      this._initGanttOnContentReady(e);\n    } else {\n      this._postponedGanttInitRequired = true;\n    }\n  }\n\n  _initGanttOnContentReady(e) {\n    if (e.component.getDataSource()) {\n      this._gantt._initGanttView();\n\n      this._initScrollSync(e.component);\n    }\n\n    this._gantt._sortAndFilter();\n\n    this._gantt._sizeHelper.updateGanttRowHeights();\n  }\n\n  _onSelectionChanged(e) {\n    var selectedRowKey = e.currentSelectedRowKeys[0];\n\n    this._gantt._setGanttViewOption(\"selectedRowKey\", selectedRowKey);\n\n    this._gantt._setOptionWithoutOptionChange(\"selectedRowKey\", selectedRowKey);\n\n    this._gantt._actionsManager.raiseSelectionChangedAction(selectedRowKey);\n  }\n\n  _onRowCollapsed(e) {\n    this._gantt._onTreeListRowExpandChanged(e, false);\n  }\n\n  _onRowExpanded(e) {\n    this._gantt._onTreeListRowExpandChanged(e, true);\n  }\n\n  _onRowPrepared(e) {\n    if (\"data\" === e.rowType && e.node.children.length > 0) {\n      $(e.rowElement).addClass(GANTT_COLLAPSABLE_ROW);\n    }\n  }\n\n  _onContextMenuPreparing(e) {\n    var _e$row, _e$row2;\n\n    if (\"header\" === e.target) {\n      return;\n    }\n\n    if (\"data\" === (null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.rowType)) {\n      this.setOption(\"selectedRowKeys\", [e.row.data[this._gantt.option(\"tasks.keyExpr\")]]);\n    }\n\n    e.items = [];\n    var info = {\n      cancel: false,\n      event: e.event,\n      type: \"task\",\n      key: null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.key,\n      position: {\n        x: e.event.pageX,\n        y: e.event.pageY\n      }\n    };\n\n    this._gantt._showPopupMenu(info);\n  }\n\n  _getHeight() {\n    if (getHeight(this._$treeList)) {\n      return getHeight(this._$treeList);\n    }\n\n    this._gantt._hasHeight = isDefined(this._gantt.option(\"height\")) && \"\" !== this._gantt.option(\"height\");\n    return this._gantt._hasHeight ? \"100%\" : \"\";\n  }\n\n  _initScrollSync(treeList) {\n    var treeListScrollable = treeList.getScrollable();\n\n    if (treeListScrollable) {\n      treeListScrollable.off(\"scroll\");\n      treeListScrollable.on(\"scroll\", e => {\n        this._onScroll(e);\n      });\n    }\n  }\n\n  _onScroll(treeListScrollView) {\n    var ganttViewTaskAreaContainer = this._gantt._ganttView.getTaskAreaContainer();\n\n    if (ganttViewTaskAreaContainer.scrollTop !== treeListScrollView.component.scrollTop()) {\n      ganttViewTaskAreaContainer.scrollTop = treeListScrollView.component.scrollTop();\n    }\n  }\n\n  _correctRowsViewRowHeight(height) {\n    var view = this._treeList._views && this._treeList._views.rowsView;\n\n    if ((null === view || void 0 === view ? void 0 : view._rowHeight) !== height) {\n      view._rowHeight = height;\n    }\n  }\n\n  _skipUpdateTreeListDataSource() {\n    return this._gantt.option(\"validation.autoUpdateParentTasks\");\n  }\n\n  selectRows(keys) {\n    this.setOption(\"selectedRowKeys\", keys);\n  }\n\n  scrollBy(scrollTop) {\n    var treeListScrollable = this._treeList.getScrollable();\n\n    if (treeListScrollable) {\n      var diff = scrollTop - treeListScrollable.scrollTop();\n\n      if (0 !== diff) {\n        treeListScrollable.scrollBy({\n          left: 0,\n          top: diff\n        });\n      }\n    }\n  }\n\n  updateDataSource(data) {\n    var forceUpdate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\n    var forceCustomData = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var expandedRowKeys = this.getOption(\"expandedRowKeys\");\n\n    if (!this._skipUpdateTreeListDataSource() || forceUpdate) {\n      this.setDataSource(data);\n    } else if (forceCustomData) {\n      var _data = this._treeList.option(\"dataSource\");\n\n      this._gantt._onParentTasksRecalculated(_data);\n    }\n\n    this.setOption(\"expandedRowKeys\", expandedRowKeys);\n  }\n\n  setDataSource(data) {\n    this.setOption(\"dataSource\", this.createDataSource(data));\n  }\n\n  createDataSource(data) {\n    return data && new DataSource({\n      store: new ArrayStore(data)\n    });\n  }\n\n  onRowClick(e) {\n    this._gantt._actionsManager.raiseTaskClickAction(e.key, e.event);\n  }\n\n  onRowDblClick(e) {\n    if (this._gantt._actionsManager.raiseTaskDblClickAction(e.key, e.event)) {\n      this._gantt._ganttView._ganttViewCore.showTaskEditDialog();\n    }\n  }\n\n  getOffsetHeight() {\n    return this._gantt._treeList._$element.get(0).offsetHeight;\n  }\n\n  getRowHeight() {\n    var $row = this._treeList._$element.find(\".dx-data-row\");\n\n    var height = $row.length ? getBoundingRect($row.last().get(0)).height : GANTT_DEFAULT_ROW_HEIGHT;\n\n    if (!height) {\n      height = GANTT_DEFAULT_ROW_HEIGHT;\n    }\n\n    this._correctRowsViewRowHeight(height);\n\n    return height;\n  }\n\n  getHeaderHeight() {\n    return getBoundingRect(this._treeList._$element.find(\".dx-treelist-headers\").get(0)).height;\n  }\n\n  getColumns() {\n    var columns = this._gantt.option(\"columns\");\n\n    if (columns) {\n      for (var i = 0; i < columns.length; i++) {\n        var column = columns[i];\n\n        var isKeyColumn = column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".keyExpr\")) || column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".parentIdExpr\"));\n\n        if (isKeyColumn && !column.dataType) {\n          column.dataType = \"object\";\n        }\n      }\n    }\n\n    return columns;\n  }\n\n  getSievedItems() {\n    var rootNode = this._treeList.getRootNode();\n\n    if (!rootNode) {\n      return;\n    }\n\n    var resultArray = [];\n    GanttHelper.convertTreeToList(rootNode, resultArray);\n    var getters = GanttHelper.compileGettersByOption(this._gantt.option(GANTT_TASKS));\n\n    var validatedData = this._gantt._validateSourceData(GANTT_TASKS, resultArray);\n\n    var mappedData = validatedData.map(GanttHelper.prepareMapHandler(getters));\n    return mappedData;\n  }\n\n  setOption(optionName, value) {\n    this._treeList && this._treeList.option(optionName, value);\n  }\n\n  getOption(optionName) {\n    return this._treeList.option(optionName);\n  }\n\n  onTaskInserted(insertedId, parentId) {\n    if (isDefined(parentId)) {\n      var expandedRowKeys = this.getOption(\"expandedRowKeys\");\n\n      if (-1 === expandedRowKeys.indexOf(parentId)) {\n        expandedRowKeys.push(parentId);\n        this.setOption(\"expandedRowKeys\", expandedRowKeys);\n      }\n    }\n\n    this.selectRows(GanttHelper.getArrayFromOneElement(insertedId));\n    this.setOption(\"focusedRowKey\", insertedId);\n  }\n\n  getDataSource() {\n    var _this$_treeList;\n\n    return null === (_this$_treeList = this._treeList) || void 0 === _this$_treeList ? void 0 : _this$_treeList.getDataSource();\n  }\n\n}","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devextreme/esm/ui/gantt/ui.gantt.treelist.js"],"names":["getHeight","$","dxTreeList","getBoundingRect","isDefined","GanttHelper","DataSource","ArrayStore","GANTT_TASKS","GANTT_COLLAPSABLE_ROW","GANTT_DEFAULT_ROW_HEIGHT","GanttTreeList","constructor","gantt","_gantt","_$treeList","getTreeList","keyExpr","parentIdExpr","option","_treeList","_createComponent","dataSource","createDataSource","_tasksRaw","columns","getColumns","columnResizingMode","height","_getHeight","width","selection","mode","getSelectionMode","selectedRowKeys","getArrayFromOneElement","sorting","filterRow","headerFilter","scrolling","showScrollbar","allowColumnResizing","autoExpandAll","showRowLines","rootValue","onContentReady","e","_onContentReady","onSelectionChanged","_onSelectionChanged","onRowCollapsed","_onRowCollapsed","onRowExpanded","_onRowExpanded","onRowPrepared","_onRowPrepared","onContextMenuPreparing","_onContextMenuPreparing","onRowClick","onRowDblClick","onAfterTreeListCreate","_postponedGanttInitRequired","_initGanttOnContentReady","component","hasTreeList","getDataSource","_initGanttView","_initScrollSync","_sortAndFilter","_sizeHelper","updateGanttRowHeights","selectedRowKey","currentSelectedRowKeys","_setGanttViewOption","_setOptionWithoutOptionChange","_actionsManager","raiseSelectionChangedAction","_onTreeListRowExpandChanged","rowType","node","children","length","rowElement","addClass","_e$row","_e$row2","target","row","setOption","data","items","info","cancel","event","type","key","position","x","pageX","y","pageY","_showPopupMenu","_hasHeight","treeList","treeListScrollable","getScrollable","off","on","_onScroll","treeListScrollView","ganttViewTaskAreaContainer","_ganttView","getTaskAreaContainer","scrollTop","_correctRowsViewRowHeight","view","_views","rowsView","_rowHeight","_skipUpdateTreeListDataSource","selectRows","keys","scrollBy","diff","left","top","updateDataSource","forceUpdate","arguments","forceCustomData","expandedRowKeys","getOption","setDataSource","_data","_onParentTasksRecalculated","store","raiseTaskClickAction","raiseTaskDblClickAction","_ganttViewCore","showTaskEditDialog","getOffsetHeight","_$element","get","offsetHeight","getRowHeight","$row","find","last","getHeaderHeight","i","column","isKeyColumn","dataField","concat","dataType","getSievedItems","rootNode","getRootNode","resultArray","convertTreeToList","getters","compileGettersByOption","validatedData","_validateSourceData","mappedData","map","prepareMapHandler","optionName","value","onTaskInserted","insertedId","parentId","indexOf","push","_this$_treeList"],"mappings":"AAAA;;;;;;;;AAQA,SACIA,SADJ,QAEO,uBAFP;AAGA,OAAOC,CAAP,MAAc,qBAAd;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SACIC,eADJ,QAEO,2BAFP;AAGA,SACIC,SADJ,QAEO,uBAFP;AAGA,SACIC,WADJ,QAEO,mBAFP;AAGA,SACIC,UADJ,QAEO,oCAFP;AAGA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,IAAIC,WAAW,GAAG,OAAlB;AACA,IAAIC,qBAAqB,GAAG,0BAA5B;AACA,IAAIC,wBAAwB,GAAG,EAA/B;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,MAAL,GAAcD,KAAd;AACA,SAAKE,UAAL,GAAkB,KAAKD,MAAL,CAAYC,UAA9B;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,QAAI;AACAC,MAAAA,OAAO,EAAEA,OADT;AAEAC,MAAAA,YAAY,EAAEA;AAFd,QAGA,KAAKJ,MAAL,CAAYK,MAAZ,CAAmBX,WAAnB,CAHJ;;AAIA,SAAKY,SAAL,GAAiB,KAAKN,MAAL,CAAYO,gBAAZ,CAA6B,KAAKN,UAAlC,EAA8Cb,UAA9C,EAA0D;AACvEoB,MAAAA,UAAU,EAAE,KAAKC,gBAAL,CAAsB,KAAKT,MAAL,CAAYU,SAAlC,CAD2D;AAEvEP,MAAAA,OAAO,EAAEA,OAF8D;AAGvEC,MAAAA,YAAY,EAAEA,YAHyD;AAIvEO,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAJ8D;AAKvEC,MAAAA,kBAAkB,EAAE,YALmD;AAMvEC,MAAAA,MAAM,EAAE,KAAKC,UAAL,EAN+D;AAOvEC,MAAAA,KAAK,EAAE,KAAKhB,MAAL,CAAYK,MAAZ,CAAmB,eAAnB,CAPgE;AAQvEY,MAAAA,SAAS,EAAE;AACPC,QAAAA,IAAI,EAAE3B,WAAW,CAAC4B,gBAAZ,CAA6B,KAAKnB,MAAL,CAAYK,MAAZ,CAAmB,gBAAnB,CAA7B;AADC,OAR4D;AAWvEe,MAAAA,eAAe,EAAE7B,WAAW,CAAC8B,sBAAZ,CAAmC,KAAKrB,MAAL,CAAYK,MAAZ,CAAmB,gBAAnB,CAAnC,CAXsD;AAYvEiB,MAAAA,OAAO,EAAE,KAAKtB,MAAL,CAAYK,MAAZ,CAAmB,SAAnB,CAZ8D;AAavEkB,MAAAA,SAAS,EAAE,KAAKvB,MAAL,CAAYK,MAAZ,CAAmB,WAAnB,CAb4D;AAcvEmB,MAAAA,YAAY,EAAE,KAAKxB,MAAL,CAAYK,MAAZ,CAAmB,cAAnB,CAdyD;AAevEoB,MAAAA,SAAS,EAAE;AACPC,QAAAA,aAAa,EAAE,SADR;AAEPR,QAAAA,IAAI,EAAE;AAFC,OAf4D;AAmBvES,MAAAA,mBAAmB,EAAE,IAnBkD;AAoBvEC,MAAAA,aAAa,EAAE,IApBwD;AAqBvEC,MAAAA,YAAY,EAAE,KAAK7B,MAAL,CAAYK,MAAZ,CAAmB,cAAnB,CArByD;AAsBvEyB,MAAAA,SAAS,EAAE,KAAK9B,MAAL,CAAYK,MAAZ,CAAmB,WAAnB,CAtB4D;AAuBvE0B,MAAAA,cAAc,EAAEC,CAAC,IAAI;AACjB,aAAKC,eAAL,CAAqBD,CAArB;AACH,OAzBsE;AA0BvEE,MAAAA,kBAAkB,EAAEF,CAAC,IAAI;AACrB,aAAKG,mBAAL,CAAyBH,CAAzB;AACH,OA5BsE;AA6BvEI,MAAAA,cAAc,EAAEJ,CAAC,IAAI;AACjB,aAAKK,eAAL,CAAqBL,CAArB;AACH,OA/BsE;AAgCvEM,MAAAA,aAAa,EAAEN,CAAC,IAAI;AAChB,aAAKO,cAAL,CAAoBP,CAApB;AACH,OAlCsE;AAmCvEQ,MAAAA,aAAa,EAAER,CAAC,IAAI;AAChB,aAAKS,cAAL,CAAoBT,CAApB;AACH,OArCsE;AAsCvEU,MAAAA,sBAAsB,EAAEV,CAAC,IAAI;AACzB,aAAKW,uBAAL,CAA6BX,CAA7B;AACH,OAxCsE;AAyCvEY,MAAAA,UAAU,EAAEZ,CAAC,IAAI;AACb,aAAKY,UAAL,CAAgBZ,CAAhB;AACH,OA3CsE;AA4CvEa,MAAAA,aAAa,EAAEb,CAAC,IAAI;AAChB,aAAKa,aAAL,CAAmBb,CAAnB;AACH;AA9CsE,KAA1D,CAAjB;AAgDA,WAAO,KAAK1B,SAAZ;AACH;;AACDwC,EAAAA,qBAAqB,GAAG;AACpB,QAAI,KAAKC,2BAAT,EAAsC;AAClC,WAAKC,wBAAL,CAA8B;AAC1BC,QAAAA,SAAS,EAAE,KAAK3C;AADU,OAA9B;;AAGA,aAAO,KAAKyC,2BAAZ;AACH;AACJ;;AACDd,EAAAA,eAAe,CAACD,CAAD,EAAI;AACf,QAAIkB,WAAW,GAAG,CAAC,CAAC,KAAK5C,SAAzB;;AACA,QAAI4C,WAAJ,EAAiB;AACb,WAAKF,wBAAL,CAA8BhB,CAA9B;AACH,KAFD,MAEO;AACH,WAAKe,2BAAL,GAAmC,IAAnC;AACH;AACJ;;AACDC,EAAAA,wBAAwB,CAAChB,CAAD,EAAI;AACxB,QAAIA,CAAC,CAACiB,SAAF,CAAYE,aAAZ,EAAJ,EAAiC;AAC7B,WAAKnD,MAAL,CAAYoD,cAAZ;;AACA,WAAKC,eAAL,CAAqBrB,CAAC,CAACiB,SAAvB;AACH;;AACD,SAAKjD,MAAL,CAAYsD,cAAZ;;AACA,SAAKtD,MAAL,CAAYuD,WAAZ,CAAwBC,qBAAxB;AACH;;AACDrB,EAAAA,mBAAmB,CAACH,CAAD,EAAI;AACnB,QAAIyB,cAAc,GAAGzB,CAAC,CAAC0B,sBAAF,CAAyB,CAAzB,CAArB;;AACA,SAAK1D,MAAL,CAAY2D,mBAAZ,CAAgC,gBAAhC,EAAkDF,cAAlD;;AACA,SAAKzD,MAAL,CAAY4D,6BAAZ,CAA0C,gBAA1C,EAA4DH,cAA5D;;AACA,SAAKzD,MAAL,CAAY6D,eAAZ,CAA4BC,2BAA5B,CAAwDL,cAAxD;AACH;;AACDpB,EAAAA,eAAe,CAACL,CAAD,EAAI;AACf,SAAKhC,MAAL,CAAY+D,2BAAZ,CAAwC/B,CAAxC,EAA2C,KAA3C;AACH;;AACDO,EAAAA,cAAc,CAACP,CAAD,EAAI;AACd,SAAKhC,MAAL,CAAY+D,2BAAZ,CAAwC/B,CAAxC,EAA2C,IAA3C;AACH;;AACDS,EAAAA,cAAc,CAACT,CAAD,EAAI;AACd,QAAI,WAAWA,CAAC,CAACgC,OAAb,IAAwBhC,CAAC,CAACiC,IAAF,CAAOC,QAAP,CAAgBC,MAAhB,GAAyB,CAArD,EAAwD;AACpDhF,MAAAA,CAAC,CAAC6C,CAAC,CAACoC,UAAH,CAAD,CAAgBC,QAAhB,CAAyB1E,qBAAzB;AACH;AACJ;;AACDgD,EAAAA,uBAAuB,CAACX,CAAD,EAAI;AACvB,QAAIsC,MAAJ,EAAYC,OAAZ;;AACA,QAAI,aAAavC,CAAC,CAACwC,MAAnB,EAA2B;AACvB;AACH;;AACD,QAAI,YAAY,UAAUF,MAAM,GAAGtC,CAAC,CAACyC,GAArB,KAA6B,KAAK,CAAL,KAAWH,MAAxC,GAAiD,KAAK,CAAtD,GAA0DA,MAAM,CAACN,OAA7E,CAAJ,EAA2F;AACvF,WAAKU,SAAL,CAAe,iBAAf,EAAkC,CAAC1C,CAAC,CAACyC,GAAF,CAAME,IAAN,CAAW,KAAK3E,MAAL,CAAYK,MAAZ,CAAmB,eAAnB,CAAX,CAAD,CAAlC;AACH;;AACD2B,IAAAA,CAAC,CAAC4C,KAAF,GAAU,EAAV;AACA,QAAIC,IAAI,GAAG;AACPC,MAAAA,MAAM,EAAE,KADD;AAEPC,MAAAA,KAAK,EAAE/C,CAAC,CAAC+C,KAFF;AAGPC,MAAAA,IAAI,EAAE,MAHC;AAIPC,MAAAA,GAAG,EAAE,UAAUV,OAAO,GAAGvC,CAAC,CAACyC,GAAtB,KAA8B,KAAK,CAAL,KAAWF,OAAzC,GAAmD,KAAK,CAAxD,GAA4DA,OAAO,CAACU,GAJlE;AAKPC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,CAAC,EAAEnD,CAAC,CAAC+C,KAAF,CAAQK,KADL;AAENC,QAAAA,CAAC,EAAErD,CAAC,CAAC+C,KAAF,CAAQO;AAFL;AALH,KAAX;;AAUA,SAAKtF,MAAL,CAAYuF,cAAZ,CAA2BV,IAA3B;AACH;;AACD9D,EAAAA,UAAU,GAAG;AACT,QAAI7B,SAAS,CAAC,KAAKe,UAAN,CAAb,EAAgC;AAC5B,aAAOf,SAAS,CAAC,KAAKe,UAAN,CAAhB;AACH;;AACD,SAAKD,MAAL,CAAYwF,UAAZ,GAAyBlG,SAAS,CAAC,KAAKU,MAAL,CAAYK,MAAZ,CAAmB,QAAnB,CAAD,CAAT,IAA2C,OAAO,KAAKL,MAAL,CAAYK,MAAZ,CAAmB,QAAnB,CAA3E;AACA,WAAO,KAAKL,MAAL,CAAYwF,UAAZ,GAAyB,MAAzB,GAAkC,EAAzC;AACH;;AACDnC,EAAAA,eAAe,CAACoC,QAAD,EAAW;AACtB,QAAIC,kBAAkB,GAAGD,QAAQ,CAACE,aAAT,EAAzB;;AACA,QAAID,kBAAJ,EAAwB;AACpBA,MAAAA,kBAAkB,CAACE,GAAnB,CAAuB,QAAvB;AACAF,MAAAA,kBAAkB,CAACG,EAAnB,CAAsB,QAAtB,EAAgC7D,CAAC,IAAI;AACjC,aAAK8D,SAAL,CAAe9D,CAAf;AACH,OAFD;AAGH;AACJ;;AACD8D,EAAAA,SAAS,CAACC,kBAAD,EAAqB;AAC1B,QAAIC,0BAA0B,GAAG,KAAKhG,MAAL,CAAYiG,UAAZ,CAAuBC,oBAAvB,EAAjC;;AACA,QAAIF,0BAA0B,CAACG,SAA3B,KAAyCJ,kBAAkB,CAAC9C,SAAnB,CAA6BkD,SAA7B,EAA7C,EAAuF;AACnFH,MAAAA,0BAA0B,CAACG,SAA3B,GAAuCJ,kBAAkB,CAAC9C,SAAnB,CAA6BkD,SAA7B,EAAvC;AACH;AACJ;;AACDC,EAAAA,yBAAyB,CAACtF,MAAD,EAAS;AAC9B,QAAIuF,IAAI,GAAG,KAAK/F,SAAL,CAAegG,MAAf,IAAyB,KAAKhG,SAAL,CAAegG,MAAf,CAAsBC,QAA1D;;AACA,QAAI,CAAC,SAASF,IAAT,IAAiB,KAAK,CAAL,KAAWA,IAA5B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACG,UAAlD,MAAkE1F,MAAtE,EAA8E;AAC1EuF,MAAAA,IAAI,CAACG,UAAL,GAAkB1F,MAAlB;AACH;AACJ;;AACD2F,EAAAA,6BAA6B,GAAG;AAC5B,WAAO,KAAKzG,MAAL,CAAYK,MAAZ,CAAmB,kCAAnB,CAAP;AACH;;AACDqG,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,SAAKjC,SAAL,CAAe,iBAAf,EAAkCiC,IAAlC;AACH;;AACDC,EAAAA,QAAQ,CAACT,SAAD,EAAY;AAChB,QAAIT,kBAAkB,GAAG,KAAKpF,SAAL,CAAeqF,aAAf,EAAzB;;AACA,QAAID,kBAAJ,EAAwB;AACpB,UAAImB,IAAI,GAAGV,SAAS,GAAGT,kBAAkB,CAACS,SAAnB,EAAvB;;AACA,UAAI,MAAMU,IAAV,EAAgB;AACZnB,QAAAA,kBAAkB,CAACkB,QAAnB,CAA4B;AACxBE,UAAAA,IAAI,EAAE,CADkB;AAExBC,UAAAA,GAAG,EAAEF;AAFmB,SAA5B;AAIH;AACJ;AACJ;;AACDG,EAAAA,gBAAgB,CAACrC,IAAD,EAAO;AACnB,QAAIsC,WAAW,GAAGC,SAAS,CAAC/C,MAAV,GAAmB,CAAnB,IAAwB,KAAK,CAAL,KAAW+C,SAAS,CAAC,CAAD,CAA5C,GAAkDA,SAAS,CAAC,CAAD,CAA3D,GAAiE,KAAnF;AACA,QAAIC,eAAe,GAAGD,SAAS,CAAC/C,MAAV,GAAmB,CAAnB,IAAwB,KAAK,CAAL,KAAW+C,SAAS,CAAC,CAAD,CAA5C,GAAkDA,SAAS,CAAC,CAAD,CAA3D,GAAiE,KAAvF;AACA,QAAIE,eAAe,GAAG,KAAKC,SAAL,CAAe,iBAAf,CAAtB;;AACA,QAAI,CAAC,KAAKZ,6BAAL,EAAD,IAAyCQ,WAA7C,EAA0D;AACtD,WAAKK,aAAL,CAAmB3C,IAAnB;AACH,KAFD,MAEO,IAAIwC,eAAJ,EAAqB;AACxB,UAAII,KAAK,GAAG,KAAKjH,SAAL,CAAeD,MAAf,CAAsB,YAAtB,CAAZ;;AACA,WAAKL,MAAL,CAAYwH,0BAAZ,CAAuCD,KAAvC;AACH;;AACD,SAAK7C,SAAL,CAAe,iBAAf,EAAkC0C,eAAlC;AACH;;AACDE,EAAAA,aAAa,CAAC3C,IAAD,EAAO;AAChB,SAAKD,SAAL,CAAe,YAAf,EAA6B,KAAKjE,gBAAL,CAAsBkE,IAAtB,CAA7B;AACH;;AACDlE,EAAAA,gBAAgB,CAACkE,IAAD,EAAO;AACnB,WAAOA,IAAI,IAAI,IAAInF,UAAJ,CAAe;AAC1BiI,MAAAA,KAAK,EAAE,IAAIhI,UAAJ,CAAekF,IAAf;AADmB,KAAf,CAAf;AAGH;;AACD/B,EAAAA,UAAU,CAACZ,CAAD,EAAI;AACV,SAAKhC,MAAL,CAAY6D,eAAZ,CAA4B6D,oBAA5B,CAAiD1F,CAAC,CAACiD,GAAnD,EAAwDjD,CAAC,CAAC+C,KAA1D;AACH;;AACDlC,EAAAA,aAAa,CAACb,CAAD,EAAI;AACb,QAAI,KAAKhC,MAAL,CAAY6D,eAAZ,CAA4B8D,uBAA5B,CAAoD3F,CAAC,CAACiD,GAAtD,EAA2DjD,CAAC,CAAC+C,KAA7D,CAAJ,EAAyE;AACrE,WAAK/E,MAAL,CAAYiG,UAAZ,CAAuB2B,cAAvB,CAAsCC,kBAAtC;AACH;AACJ;;AACDC,EAAAA,eAAe,GAAG;AACd,WAAO,KAAK9H,MAAL,CAAYM,SAAZ,CAAsByH,SAAtB,CAAgCC,GAAhC,CAAoC,CAApC,EAAuCC,YAA9C;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,QAAIC,IAAI,GAAG,KAAK7H,SAAL,CAAeyH,SAAf,CAAyBK,IAAzB,CAA8B,cAA9B,CAAX;;AACA,QAAItH,MAAM,GAAGqH,IAAI,CAAChE,MAAL,GAAc9E,eAAe,CAAC8I,IAAI,CAACE,IAAL,GAAYL,GAAZ,CAAgB,CAAhB,CAAD,CAAf,CAAoClH,MAAlD,GAA2DlB,wBAAxE;;AACA,QAAI,CAACkB,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAGlB,wBAAT;AACH;;AACD,SAAKwG,yBAAL,CAA+BtF,MAA/B;;AACA,WAAOA,MAAP;AACH;;AACDwH,EAAAA,eAAe,GAAG;AACd,WAAOjJ,eAAe,CAAC,KAAKiB,SAAL,CAAeyH,SAAf,CAAyBK,IAAzB,CAA8B,sBAA9B,EAAsDJ,GAAtD,CAA0D,CAA1D,CAAD,CAAf,CAA8ElH,MAArF;AACH;;AACDF,EAAAA,UAAU,GAAG;AACT,QAAID,OAAO,GAAG,KAAKX,MAAL,CAAYK,MAAZ,CAAmB,SAAnB,CAAd;;AACA,QAAIM,OAAJ,EAAa;AACT,WAAK,IAAI4H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5H,OAAO,CAACwD,MAA5B,EAAoCoE,CAAC,EAArC,EAAyC;AACrC,YAAIC,MAAM,GAAG7H,OAAO,CAAC4H,CAAD,CAApB;;AACA,YAAIE,WAAW,GAAGD,MAAM,CAACE,SAAP,KAAqB,KAAK1I,MAAL,CAAYK,MAAZ,CAAmB,GAAGsI,MAAH,CAAUjJ,WAAV,EAAuB,UAAvB,CAAnB,CAArB,IAA+E8I,MAAM,CAACE,SAAP,KAAqB,KAAK1I,MAAL,CAAYK,MAAZ,CAAmB,GAAGsI,MAAH,CAAUjJ,WAAV,EAAuB,eAAvB,CAAnB,CAAtH;;AACA,YAAI+I,WAAW,IAAI,CAACD,MAAM,CAACI,QAA3B,EAAqC;AACjCJ,UAAAA,MAAM,CAACI,QAAP,GAAkB,QAAlB;AACH;AACJ;AACJ;;AACD,WAAOjI,OAAP;AACH;;AACDkI,EAAAA,cAAc,GAAG;AACb,QAAIC,QAAQ,GAAG,KAAKxI,SAAL,CAAeyI,WAAf,EAAf;;AACA,QAAI,CAACD,QAAL,EAAe;AACX;AACH;;AACD,QAAIE,WAAW,GAAG,EAAlB;AACAzJ,IAAAA,WAAW,CAAC0J,iBAAZ,CAA8BH,QAA9B,EAAwCE,WAAxC;AACA,QAAIE,OAAO,GAAG3J,WAAW,CAAC4J,sBAAZ,CAAmC,KAAKnJ,MAAL,CAAYK,MAAZ,CAAmBX,WAAnB,CAAnC,CAAd;;AACA,QAAI0J,aAAa,GAAG,KAAKpJ,MAAL,CAAYqJ,mBAAZ,CAAgC3J,WAAhC,EAA6CsJ,WAA7C,CAApB;;AACA,QAAIM,UAAU,GAAGF,aAAa,CAACG,GAAd,CAAkBhK,WAAW,CAACiK,iBAAZ,CAA8BN,OAA9B,CAAlB,CAAjB;AACA,WAAOI,UAAP;AACH;;AACD5E,EAAAA,SAAS,CAAC+E,UAAD,EAAaC,KAAb,EAAoB;AACzB,SAAKpJ,SAAL,IAAkB,KAAKA,SAAL,CAAeD,MAAf,CAAsBoJ,UAAtB,EAAkCC,KAAlC,CAAlB;AACH;;AACDrC,EAAAA,SAAS,CAACoC,UAAD,EAAa;AAClB,WAAO,KAAKnJ,SAAL,CAAeD,MAAf,CAAsBoJ,UAAtB,CAAP;AACH;;AACDE,EAAAA,cAAc,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACjC,QAAIvK,SAAS,CAACuK,QAAD,CAAb,EAAyB;AACrB,UAAIzC,eAAe,GAAG,KAAKC,SAAL,CAAe,iBAAf,CAAtB;;AACA,UAAI,CAAC,CAAD,KAAOD,eAAe,CAAC0C,OAAhB,CAAwBD,QAAxB,CAAX,EAA8C;AAC1CzC,QAAAA,eAAe,CAAC2C,IAAhB,CAAqBF,QAArB;AACA,aAAKnF,SAAL,CAAe,iBAAf,EAAkC0C,eAAlC;AACH;AACJ;;AACD,SAAKV,UAAL,CAAgBnH,WAAW,CAAC8B,sBAAZ,CAAmCuI,UAAnC,CAAhB;AACA,SAAKlF,SAAL,CAAe,eAAf,EAAgCkF,UAAhC;AACH;;AACDzG,EAAAA,aAAa,GAAG;AACZ,QAAI6G,eAAJ;;AACA,WAAO,UAAUA,eAAe,GAAG,KAAK1J,SAAjC,KAA+C,KAAK,CAAL,KAAW0J,eAA1D,GAA4E,KAAK,CAAjF,GAAqFA,eAAe,CAAC7G,aAAhB,EAA5F;AACH;;AAhQsB","sourcesContent":["/**\r\n * DevExtreme (esm/ui/gantt/ui.gantt.treelist.js)\r\n * Version: 22.1.3\r\n * Build date: Mon Jun 13 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport dxTreeList from \"../tree_list\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    GanttHelper\r\n} from \"./ui.gantt.helper\";\r\nimport {\r\n    DataSource\r\n} from \"../../data/data_source/data_source\";\r\nimport ArrayStore from \"../../data/array_store\";\r\nvar GANTT_TASKS = \"tasks\";\r\nvar GANTT_COLLAPSABLE_ROW = \"dx-gantt-collapsable-row\";\r\nvar GANTT_DEFAULT_ROW_HEIGHT = 34;\r\nexport class GanttTreeList {\r\n    constructor(gantt) {\r\n        this._gantt = gantt;\r\n        this._$treeList = this._gantt._$treeList\r\n    }\r\n    getTreeList() {\r\n        var {\r\n            keyExpr: keyExpr,\r\n            parentIdExpr: parentIdExpr\r\n        } = this._gantt.option(GANTT_TASKS);\r\n        this._treeList = this._gantt._createComponent(this._$treeList, dxTreeList, {\r\n            dataSource: this.createDataSource(this._gantt._tasksRaw),\r\n            keyExpr: keyExpr,\r\n            parentIdExpr: parentIdExpr,\r\n            columns: this.getColumns(),\r\n            columnResizingMode: \"nextColumn\",\r\n            height: this._getHeight(),\r\n            width: this._gantt.option(\"taskListWidth\"),\r\n            selection: {\r\n                mode: GanttHelper.getSelectionMode(this._gantt.option(\"allowSelection\"))\r\n            },\r\n            selectedRowKeys: GanttHelper.getArrayFromOneElement(this._gantt.option(\"selectedRowKey\")),\r\n            sorting: this._gantt.option(\"sorting\"),\r\n            filterRow: this._gantt.option(\"filterRow\"),\r\n            headerFilter: this._gantt.option(\"headerFilter\"),\r\n            scrolling: {\r\n                showScrollbar: \"onHover\",\r\n                mode: \"virtual\"\r\n            },\r\n            allowColumnResizing: true,\r\n            autoExpandAll: true,\r\n            showRowLines: this._gantt.option(\"showRowLines\"),\r\n            rootValue: this._gantt.option(\"rootValue\"),\r\n            onContentReady: e => {\r\n                this._onContentReady(e)\r\n            },\r\n            onSelectionChanged: e => {\r\n                this._onSelectionChanged(e)\r\n            },\r\n            onRowCollapsed: e => {\r\n                this._onRowCollapsed(e)\r\n            },\r\n            onRowExpanded: e => {\r\n                this._onRowExpanded(e)\r\n            },\r\n            onRowPrepared: e => {\r\n                this._onRowPrepared(e)\r\n            },\r\n            onContextMenuPreparing: e => {\r\n                this._onContextMenuPreparing(e)\r\n            },\r\n            onRowClick: e => {\r\n                this.onRowClick(e)\r\n            },\r\n            onRowDblClick: e => {\r\n                this.onRowDblClick(e)\r\n            }\r\n        });\r\n        return this._treeList\r\n    }\r\n    onAfterTreeListCreate() {\r\n        if (this._postponedGanttInitRequired) {\r\n            this._initGanttOnContentReady({\r\n                component: this._treeList\r\n            });\r\n            delete this._postponedGanttInitRequired\r\n        }\r\n    }\r\n    _onContentReady(e) {\r\n        var hasTreeList = !!this._treeList;\r\n        if (hasTreeList) {\r\n            this._initGanttOnContentReady(e)\r\n        } else {\r\n            this._postponedGanttInitRequired = true\r\n        }\r\n    }\r\n    _initGanttOnContentReady(e) {\r\n        if (e.component.getDataSource()) {\r\n            this._gantt._initGanttView();\r\n            this._initScrollSync(e.component)\r\n        }\r\n        this._gantt._sortAndFilter();\r\n        this._gantt._sizeHelper.updateGanttRowHeights()\r\n    }\r\n    _onSelectionChanged(e) {\r\n        var selectedRowKey = e.currentSelectedRowKeys[0];\r\n        this._gantt._setGanttViewOption(\"selectedRowKey\", selectedRowKey);\r\n        this._gantt._setOptionWithoutOptionChange(\"selectedRowKey\", selectedRowKey);\r\n        this._gantt._actionsManager.raiseSelectionChangedAction(selectedRowKey)\r\n    }\r\n    _onRowCollapsed(e) {\r\n        this._gantt._onTreeListRowExpandChanged(e, false)\r\n    }\r\n    _onRowExpanded(e) {\r\n        this._gantt._onTreeListRowExpandChanged(e, true)\r\n    }\r\n    _onRowPrepared(e) {\r\n        if (\"data\" === e.rowType && e.node.children.length > 0) {\r\n            $(e.rowElement).addClass(GANTT_COLLAPSABLE_ROW)\r\n        }\r\n    }\r\n    _onContextMenuPreparing(e) {\r\n        var _e$row, _e$row2;\r\n        if (\"header\" === e.target) {\r\n            return\r\n        }\r\n        if (\"data\" === (null === (_e$row = e.row) || void 0 === _e$row ? void 0 : _e$row.rowType)) {\r\n            this.setOption(\"selectedRowKeys\", [e.row.data[this._gantt.option(\"tasks.keyExpr\")]])\r\n        }\r\n        e.items = [];\r\n        var info = {\r\n            cancel: false,\r\n            event: e.event,\r\n            type: \"task\",\r\n            key: null === (_e$row2 = e.row) || void 0 === _e$row2 ? void 0 : _e$row2.key,\r\n            position: {\r\n                x: e.event.pageX,\r\n                y: e.event.pageY\r\n            }\r\n        };\r\n        this._gantt._showPopupMenu(info)\r\n    }\r\n    _getHeight() {\r\n        if (getHeight(this._$treeList)) {\r\n            return getHeight(this._$treeList)\r\n        }\r\n        this._gantt._hasHeight = isDefined(this._gantt.option(\"height\")) && \"\" !== this._gantt.option(\"height\");\r\n        return this._gantt._hasHeight ? \"100%\" : \"\"\r\n    }\r\n    _initScrollSync(treeList) {\r\n        var treeListScrollable = treeList.getScrollable();\r\n        if (treeListScrollable) {\r\n            treeListScrollable.off(\"scroll\");\r\n            treeListScrollable.on(\"scroll\", e => {\r\n                this._onScroll(e)\r\n            })\r\n        }\r\n    }\r\n    _onScroll(treeListScrollView) {\r\n        var ganttViewTaskAreaContainer = this._gantt._ganttView.getTaskAreaContainer();\r\n        if (ganttViewTaskAreaContainer.scrollTop !== treeListScrollView.component.scrollTop()) {\r\n            ganttViewTaskAreaContainer.scrollTop = treeListScrollView.component.scrollTop()\r\n        }\r\n    }\r\n    _correctRowsViewRowHeight(height) {\r\n        var view = this._treeList._views && this._treeList._views.rowsView;\r\n        if ((null === view || void 0 === view ? void 0 : view._rowHeight) !== height) {\r\n            view._rowHeight = height\r\n        }\r\n    }\r\n    _skipUpdateTreeListDataSource() {\r\n        return this._gantt.option(\"validation.autoUpdateParentTasks\")\r\n    }\r\n    selectRows(keys) {\r\n        this.setOption(\"selectedRowKeys\", keys)\r\n    }\r\n    scrollBy(scrollTop) {\r\n        var treeListScrollable = this._treeList.getScrollable();\r\n        if (treeListScrollable) {\r\n            var diff = scrollTop - treeListScrollable.scrollTop();\r\n            if (0 !== diff) {\r\n                treeListScrollable.scrollBy({\r\n                    left: 0,\r\n                    top: diff\r\n                })\r\n            }\r\n        }\r\n    }\r\n    updateDataSource(data) {\r\n        var forceUpdate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;\r\n        var forceCustomData = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var expandedRowKeys = this.getOption(\"expandedRowKeys\");\r\n        if (!this._skipUpdateTreeListDataSource() || forceUpdate) {\r\n            this.setDataSource(data)\r\n        } else if (forceCustomData) {\r\n            var _data = this._treeList.option(\"dataSource\");\r\n            this._gantt._onParentTasksRecalculated(_data)\r\n        }\r\n        this.setOption(\"expandedRowKeys\", expandedRowKeys)\r\n    }\r\n    setDataSource(data) {\r\n        this.setOption(\"dataSource\", this.createDataSource(data))\r\n    }\r\n    createDataSource(data) {\r\n        return data && new DataSource({\r\n            store: new ArrayStore(data)\r\n        })\r\n    }\r\n    onRowClick(e) {\r\n        this._gantt._actionsManager.raiseTaskClickAction(e.key, e.event)\r\n    }\r\n    onRowDblClick(e) {\r\n        if (this._gantt._actionsManager.raiseTaskDblClickAction(e.key, e.event)) {\r\n            this._gantt._ganttView._ganttViewCore.showTaskEditDialog()\r\n        }\r\n    }\r\n    getOffsetHeight() {\r\n        return this._gantt._treeList._$element.get(0).offsetHeight\r\n    }\r\n    getRowHeight() {\r\n        var $row = this._treeList._$element.find(\".dx-data-row\");\r\n        var height = $row.length ? getBoundingRect($row.last().get(0)).height : GANTT_DEFAULT_ROW_HEIGHT;\r\n        if (!height) {\r\n            height = GANTT_DEFAULT_ROW_HEIGHT\r\n        }\r\n        this._correctRowsViewRowHeight(height);\r\n        return height\r\n    }\r\n    getHeaderHeight() {\r\n        return getBoundingRect(this._treeList._$element.find(\".dx-treelist-headers\").get(0)).height\r\n    }\r\n    getColumns() {\r\n        var columns = this._gantt.option(\"columns\");\r\n        if (columns) {\r\n            for (var i = 0; i < columns.length; i++) {\r\n                var column = columns[i];\r\n                var isKeyColumn = column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".keyExpr\")) || column.dataField === this._gantt.option(\"\".concat(GANTT_TASKS, \".parentIdExpr\"));\r\n                if (isKeyColumn && !column.dataType) {\r\n                    column.dataType = \"object\"\r\n                }\r\n            }\r\n        }\r\n        return columns\r\n    }\r\n    getSievedItems() {\r\n        var rootNode = this._treeList.getRootNode();\r\n        if (!rootNode) {\r\n            return\r\n        }\r\n        var resultArray = [];\r\n        GanttHelper.convertTreeToList(rootNode, resultArray);\r\n        var getters = GanttHelper.compileGettersByOption(this._gantt.option(GANTT_TASKS));\r\n        var validatedData = this._gantt._validateSourceData(GANTT_TASKS, resultArray);\r\n        var mappedData = validatedData.map(GanttHelper.prepareMapHandler(getters));\r\n        return mappedData\r\n    }\r\n    setOption(optionName, value) {\r\n        this._treeList && this._treeList.option(optionName, value)\r\n    }\r\n    getOption(optionName) {\r\n        return this._treeList.option(optionName)\r\n    }\r\n    onTaskInserted(insertedId, parentId) {\r\n        if (isDefined(parentId)) {\r\n            var expandedRowKeys = this.getOption(\"expandedRowKeys\");\r\n            if (-1 === expandedRowKeys.indexOf(parentId)) {\r\n                expandedRowKeys.push(parentId);\r\n                this.setOption(\"expandedRowKeys\", expandedRowKeys)\r\n            }\r\n        }\r\n        this.selectRows(GanttHelper.getArrayFromOneElement(insertedId));\r\n        this.setOption(\"focusedRowKey\", insertedId)\r\n    }\r\n    getDataSource() {\r\n        var _this$_treeList;\r\n        return null === (_this$_treeList = this._treeList) || void 0 === _this$_treeList ? void 0 : _this$_treeList.getDataSource()\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}