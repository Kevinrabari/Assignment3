{"ast":null,"code":"/**\r\n* DevExpress Dashboard (_item-meta-data.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.itemMetaData = exports.deltaValueTypes = exports.deltaValueNames = void 0;\n\nvar _formatter_1 = require(\"../../_formatter\");\n\nvar item_data_axis_names_1 = require(\"../item-data-axis-names\");\n\nexports.deltaValueNames = {\n  actualValue: 'actualValue',\n  targetValue: 'targetValue',\n  absoluteVariation: 'absoluteVariation',\n  percentVariation: 'percentVariation',\n  percentOfTarget: 'percentOfTarget',\n  mainValue: 'mainValue',\n  subValue1: 'subValue1',\n  subValue2: 'subValue2',\n  isGood: 'isGood',\n  indicatorType: 'indicatorType'\n};\nexports.deltaValueTypes = {\n  actualValue: 'ActualValue',\n  absoluteVariation: 'AbsoluteVariation',\n  percentVariation: 'PercentVariation',\n  percentOfTarget: 'PercentOfTarget',\n  targetValue: 'TargetValue'\n};\n\nvar itemMetaData = function () {\n  function itemMetaData(metaDataDto) {\n    this._metaDataDto = metaDataDto;\n  }\n\n  itemMetaData.prototype.initialize = function () {\n    var metaDataDto = this._metaDataDto;\n    this._measuresInfo = this._createMeasureInfo(metaDataDto.MeasureDescriptors);\n    this._colorMeasuresInfo = this._createMeasureInfo(metaDataDto.ColorMeasureDescriptors);\n    this._conditionalFormattingMeasuresInfo = this._createMeasureInfo(metaDataDto.FormatConditionMeasureDescriptors);\n    this._deltaInfo = this._createDeltaInfo();\n    this._axesInfo = this._createAxesInfo();\n    this._dataSourceColumns = this._metaDataDto.DataSourceColumns;\n  };\n\n  itemMetaData.prototype._createMeasureInfo = function (descriptors) {\n    var measures = [],\n        formatByMeasureId = {};\n    var expressionByMeasureId = {};\n    var calculationByMeasureId = {};\n    var windowDefinitionByMeasureId = {};\n\n    if (descriptors) {\n      descriptors.forEach(function (_measure) {\n        var measure = {\n          id: _measure.ID,\n          name: _measure.Name,\n          dataItemId: _measure.DataItemId,\n          dataMember: _measure.DataMember,\n          dataType: _measure.DataType,\n          finalDataType: _measure.FinalDataType,\n          summaryType: _measure.SummaryType,\n          format: function (value) {\n            var format = _measure.Format,\n                text = undefined;\n            if (format) text = _formatter_1.format(value, format);\n            return text;\n          }\n        };\n        measures.push(measure);\n        formatByMeasureId[measure.id] = _measure.Format;\n        expressionByMeasureId[measure.id] = _measure.Expression;\n        calculationByMeasureId[measure.id] = _measure.Calculation;\n        windowDefinitionByMeasureId[measure.id] = _measure.WindowDefinition;\n      });\n    }\n\n    return {\n      measures: measures,\n      formatByMeasureId: formatByMeasureId,\n      expressionByMeasureId: expressionByMeasureId,\n      calculationByMeasureId: calculationByMeasureId,\n      windowDefinitionByMeasureId: windowDefinitionByMeasureId\n    };\n  };\n\n  itemMetaData.prototype._createDeltaInfo = function () {\n    var metaData = this._metaDataDto,\n        names = exports.deltaValueNames,\n        deltas = [],\n        valueIdsByDeltaId = {},\n        formatsByDeltaId = {};\n\n    if (metaData.DeltaDescriptors) {\n      metaData.DeltaDescriptors.forEach(function (_delta) {\n        var delta = {\n          id: _delta.ID,\n          name: _delta.Name,\n          actualMeasureId: _delta.ActualMeasureID,\n          targetMeasureId: _delta.TargetMeasureID\n        },\n            ids = {},\n            formats = {};\n        deltas.push(delta);\n        ids[names.actualValue] = _delta.ActualValueID;\n        ids[names.targetValue] = _delta.TargetValueID;\n        ids[names.absoluteVariation] = _delta.AbsoluteVariationID;\n        ids[names.percentVariation] = _delta.PercentVariationID;\n        ids[names.percentOfTarget] = _delta.PercentOfTargetID;\n        ids[names.isGood] = _delta.IsGoodID;\n        ids[names.indicatorType] = _delta.IndicatorTypeID;\n        formats[names.actualValue] = _delta.ActualValueFormat;\n        formats[names.targetValue] = _delta.TargetValueFormat;\n        formats[names.absoluteVariation] = _delta.AbsoluteVariationFormat;\n        formats[names.percentVariation] = _delta.PercentVariationFormat;\n        formats[names.percentOfTarget] = _delta.PercentOfTargetFormat;\n\n        switch (_delta.DeltaValueType) {\n          case exports.deltaValueTypes.actualValue:\n            ids[names.mainValue] = ids[names.actualValue];\n            ids[names.subValue1] = ids[names.absoluteVariation];\n            ids[names.subValue2] = ids[names.percentVariation];\n            formats[names.mainValue] = formats[names.actualValue];\n            formats[names.subValue1] = formats[names.absoluteVariation];\n            formats[names.subValue2] = formats[names.percentVariation];\n            break;\n\n          case exports.deltaValueTypes.absoluteVariation:\n            ids[names.mainValue] = ids[names.absoluteVariation];\n            ids[names.subValue1] = ids[names.actualValue];\n            ids[names.subValue2] = ids[names.percentVariation];\n            formats[names.mainValue] = formats[names.absoluteVariation];\n            formats[names.subValue1] = formats[names.actualValue];\n            formats[names.subValue2] = formats[names.percentVariation];\n            break;\n\n          case exports.deltaValueTypes.percentVariation:\n            ids[names.mainValue] = ids[names.percentVariation];\n            ids[names.subValue1] = ids[names.actualValue];\n            ids[names.subValue2] = ids[names.absoluteVariation];\n            formats[names.mainValue] = formats[names.percentVariation];\n            formats[names.subValue1] = formats[names.actualValue];\n            formats[names.subValue2] = formats[names.absoluteVariation];\n            break;\n\n          case exports.deltaValueTypes.percentOfTarget:\n            ids[names.mainValue] = ids[names.percentOfTarget];\n            ids[names.subValue1] = ids[names.actualValue];\n            ids[names.subValue2] = ids[names.absoluteVariation];\n            formats[names.mainValue] = formats[names.percentOfTarget];\n            formats[names.subValue1] = formats[names.actualValue];\n            formats[names.subValue2] = formats[names.absoluteVariation];\n            break;\n\n          case exports.deltaValueTypes.targetValue:\n            ids[names.mainValue] = ids[names.targetValue];\n            ids[names.subValue1] = ids[names.absoluteVariation];\n            ids[names.subValue2] = ids[names.percentVariation];\n            formats[names.mainValue] = formats[names.targetValue];\n            formats[names.subValue1] = formats[names.absoluteVariation];\n            formats[names.subValue2] = formats[names.percentVariation];\n            break;\n        }\n\n        valueIdsByDeltaId[delta.id] = ids;\n        formatsByDeltaId[delta.id] = formats;\n      });\n    }\n\n    return {\n      deltas: deltas,\n      valueIdsByDeltaId: valueIdsByDeltaId,\n      formatsByDeltaId: formatsByDeltaId\n    };\n  };\n\n  itemMetaData.prototype._createAxesInfo = function () {\n    var metaDataDto = this._metaDataDto,\n        axes = {},\n        dimensionDescriptorsByAxisName = metaDataDto.DimensionDescriptors || {},\n        levelByDimensionId = {},\n        formatByDimensionId = {},\n        pivotAreaByAxisName = {};\n    Object.keys(dimensionDescriptorsByAxisName).forEach(function (_name) {\n      var _dimensions = dimensionDescriptorsByAxisName[_name];\n      var dimensions = [];\n\n      if (_dimensions) {\n        _dimensions.forEach(function (_dimension) {\n          var dimension = {\n            id: _dimension.ID,\n            name: _dimension.Name,\n            dataMember: _dimension.DataMember,\n            finalDataType: _dimension.FinalDataType,\n            dataType: _dimension.DataType,\n            dateTimeGroupInterval: _dimension.DateTimeGroupInterval,\n            textGroupInterval: _dimension.TextGroupInterval,\n            getFormat: function () {\n              return _formatter_1.convertToFormat(_dimension.Format);\n            },\n            format: function (value) {\n              var format = _dimension.Format,\n                  text = undefined;\n              if (format) text = _formatter_1.format(value, format);\n              return text;\n            }\n          };\n          levelByDimensionId[dimension.id] = _dimension.Level;\n          formatByDimensionId[dimension.id] = _dimension.Format;\n          dimensions.push(dimension);\n        });\n      }\n\n      axes[_name] = dimensions;\n    });\n    if (metaDataDto.ColumnHierarchy) pivotAreaByAxisName[metaDataDto.ColumnHierarchy] = 'Columns';\n    if (metaDataDto.RowHierarchy) pivotAreaByAxisName[metaDataDto.RowHierarchy] = 'Rows';\n    return {\n      axes: axes,\n      levelByDimensionId: levelByDimensionId,\n      formatByDimensionId: formatByDimensionId,\n      pivotAreaByAxisName: pivotAreaByAxisName\n    };\n  };\n\n  itemMetaData.prototype.getAxes = function () {\n    return this._axesInfo.axes;\n  };\n\n  itemMetaData.prototype.getAxisNames = function () {\n    var names = [];\n    Object.keys(this.getAxes()).forEach(function (name) {\n      names.push(name);\n    });\n    return names;\n  };\n\n  itemMetaData.prototype.getPivotAreaByAxisName = function (name) {\n    return this._axesInfo.pivotAreaByAxisName[name];\n  };\n\n  itemMetaData.prototype.getColorMeasures = function () {\n    return this._colorMeasuresInfo.measures;\n  };\n\n  itemMetaData.prototype.getConditionalFormattingMeasures = function () {\n    return this._conditionalFormattingMeasuresInfo.measures;\n  };\n\n  itemMetaData.prototype.getDimensions = function (axisName) {\n    return this.getAxes()[axisName === undefined ? item_data_axis_names_1.itemDataAxisNames.defaultAxis : axisName];\n  };\n\n  itemMetaData.prototype.getMeasures = function () {\n    return this._measuresInfo.measures;\n  };\n\n  itemMetaData.prototype.getDeltas = function () {\n    return this._deltaInfo.deltas;\n  };\n\n  itemMetaData.prototype.getMeasureById = function (id) {\n    var measures = this.getMeasures(),\n        foundMeasures = measures.filter(function (measure) {\n      return measure.id == id;\n    });\n    return foundMeasures[0];\n  };\n\n  itemMetaData.prototype.getDeltaById = function (id) {\n    var deltas = this.getDeltas(),\n        foundDeltas = deltas.filter(function (delta) {\n      return delta.id == id;\n    });\n    return foundDeltas[0];\n  };\n\n  itemMetaData.prototype.getMeasureFormat = function (measureId) {\n    return this._measuresInfo.formatByMeasureId[measureId];\n  };\n\n  itemMetaData.prototype.getMeasureExpression = function (measureId) {\n    return this._measuresInfo.expressionByMeasureId[measureId];\n  };\n\n  itemMetaData.prototype.getMeasureCalculation = function (measureId) {\n    return this._measuresInfo.calculationByMeasureId[measureId];\n  };\n\n  itemMetaData.prototype.getMeasureWindowDefinition = function (measureId) {\n    return this._measuresInfo.windowDefinitionByMeasureId[measureId];\n  };\n\n  itemMetaData.prototype.getDeltaValueIds = function (deltaId) {\n    return this._deltaInfo.valueIdsByDeltaId[deltaId];\n  };\n\n  itemMetaData.prototype.getDeltaFormats = function (deltaId) {\n    return this._deltaInfo.formatsByDeltaId[deltaId];\n  };\n\n  itemMetaData.prototype.getDeltaValueType = function (deltaId) {};\n\n  itemMetaData.prototype.getDimensionLevel = function (dimensionId) {\n    return this._axesInfo.levelByDimensionId[dimensionId];\n  };\n\n  itemMetaData.prototype.getDimensionFormat = function (dimensionId) {\n    return this._axesInfo.formatByDimensionId[dimensionId];\n  };\n\n  itemMetaData.prototype.getDataMembers = function () {\n    return this._dataSourceColumns;\n  };\n\n  itemMetaData.prototype.getFinalDataType = function (dataItemId) {\n    var dataItem = this.getMeasureById(dataItemId);\n\n    if (!dataItem) {\n      var axes_1 = this.getAxes();\n      Object.keys(axes_1).forEach(function (axisName) {\n        var dimensions = axes_1[axisName];\n        dataItem = dimensions.filter(function (d) {\n          return d.id == dataItemId;\n        })[0];\n\n        if (!!dataItem) {\n          return false;\n        }\n      });\n    }\n\n    return !!dataItem ? dataItem.finalDataType : undefined;\n  };\n\n  return itemMetaData;\n}();\n\nexports.itemMetaData = itemMetaData;","map":{"version":3,"sources":["/Users/krunalpatel/Downloads/React-Firebase-Auth-master 3/node_modules/devexpress-dashboard/data/item-data/internal/_item-meta-data.js"],"names":["Object","defineProperty","exports","value","itemMetaData","deltaValueTypes","deltaValueNames","_formatter_1","require","item_data_axis_names_1","actualValue","targetValue","absoluteVariation","percentVariation","percentOfTarget","mainValue","subValue1","subValue2","isGood","indicatorType","metaDataDto","_metaDataDto","prototype","initialize","_measuresInfo","_createMeasureInfo","MeasureDescriptors","_colorMeasuresInfo","ColorMeasureDescriptors","_conditionalFormattingMeasuresInfo","FormatConditionMeasureDescriptors","_deltaInfo","_createDeltaInfo","_axesInfo","_createAxesInfo","_dataSourceColumns","DataSourceColumns","descriptors","measures","formatByMeasureId","expressionByMeasureId","calculationByMeasureId","windowDefinitionByMeasureId","forEach","_measure","measure","id","ID","name","Name","dataItemId","DataItemId","dataMember","DataMember","dataType","DataType","finalDataType","FinalDataType","summaryType","SummaryType","format","Format","text","undefined","push","Expression","Calculation","WindowDefinition","metaData","names","deltas","valueIdsByDeltaId","formatsByDeltaId","DeltaDescriptors","_delta","delta","actualMeasureId","ActualMeasureID","targetMeasureId","TargetMeasureID","ids","formats","ActualValueID","TargetValueID","AbsoluteVariationID","PercentVariationID","PercentOfTargetID","IsGoodID","IndicatorTypeID","ActualValueFormat","TargetValueFormat","AbsoluteVariationFormat","PercentVariationFormat","PercentOfTargetFormat","DeltaValueType","axes","dimensionDescriptorsByAxisName","DimensionDescriptors","levelByDimensionId","formatByDimensionId","pivotAreaByAxisName","keys","_name","_dimensions","dimensions","_dimension","dimension","dateTimeGroupInterval","DateTimeGroupInterval","textGroupInterval","TextGroupInterval","getFormat","convertToFormat","Level","ColumnHierarchy","RowHierarchy","getAxes","getAxisNames","getPivotAreaByAxisName","getColorMeasures","getConditionalFormattingMeasures","getDimensions","axisName","itemDataAxisNames","defaultAxis","getMeasures","getDeltas","getMeasureById","foundMeasures","filter","getDeltaById","foundDeltas","getMeasureFormat","measureId","getMeasureExpression","getMeasureCalculation","getMeasureWindowDefinition","getDeltaValueIds","deltaId","getDeltaFormats","getDeltaValueType","getDimensionLevel","dimensionId","getDimensionFormat","getDataMembers","getFinalDataType","dataItem","axes_1","d"],"mappings":"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","sourcesContent":["/**\r\n* DevExpress Dashboard (_item-meta-data.js)\r\n* Version:  22.1.3\r\n* Build date: Jun 13, 2022\r\n* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n* License: https://www.devexpress.com/Support/EULAs/universal.xml\r\n*/\r\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.itemMetaData = exports.deltaValueTypes = exports.deltaValueNames = void 0;\nvar _formatter_1 = require(\"../../_formatter\");\nvar item_data_axis_names_1 = require(\"../item-data-axis-names\");\nexports.deltaValueNames = {\n    actualValue: 'actualValue',\n    targetValue: 'targetValue',\n    absoluteVariation: 'absoluteVariation',\n    percentVariation: 'percentVariation',\n    percentOfTarget: 'percentOfTarget',\n    mainValue: 'mainValue',\n    subValue1: 'subValue1',\n    subValue2: 'subValue2',\n    isGood: 'isGood',\n    indicatorType: 'indicatorType'\n};\nexports.deltaValueTypes = {\n    actualValue: 'ActualValue',\n    absoluteVariation: 'AbsoluteVariation',\n    percentVariation: 'PercentVariation',\n    percentOfTarget: 'PercentOfTarget',\n    targetValue: 'TargetValue'\n};\nvar itemMetaData = (function () {\n    function itemMetaData(metaDataDto) {\n        this._metaDataDto = metaDataDto;\n    }\n    itemMetaData.prototype.initialize = function () {\n        var metaDataDto = this._metaDataDto;\n        this._measuresInfo = this._createMeasureInfo(metaDataDto.MeasureDescriptors);\n        this._colorMeasuresInfo = this._createMeasureInfo(metaDataDto.ColorMeasureDescriptors);\n        this._conditionalFormattingMeasuresInfo = this._createMeasureInfo(metaDataDto.FormatConditionMeasureDescriptors);\n        this._deltaInfo = this._createDeltaInfo();\n        this._axesInfo = this._createAxesInfo();\n        this._dataSourceColumns = this._metaDataDto.DataSourceColumns;\n    };\n    itemMetaData.prototype._createMeasureInfo = function (descriptors) {\n        var measures = [], formatByMeasureId = {};\n        var expressionByMeasureId = {};\n        var calculationByMeasureId = {};\n        var windowDefinitionByMeasureId = {};\n        if (descriptors) {\n            descriptors.forEach(function (_measure) {\n                var measure = {\n                    id: _measure.ID,\n                    name: _measure.Name,\n                    dataItemId: _measure.DataItemId,\n                    dataMember: _measure.DataMember,\n                    dataType: _measure.DataType,\n                    finalDataType: _measure.FinalDataType,\n                    summaryType: _measure.SummaryType,\n                    format: function (value) {\n                        var format = _measure.Format, text = undefined;\n                        if (format)\n                            text = _formatter_1.format(value, format);\n                        return text;\n                    }\n                };\n                measures.push(measure);\n                formatByMeasureId[measure.id] = _measure.Format;\n                expressionByMeasureId[measure.id] = _measure.Expression;\n                calculationByMeasureId[measure.id] = _measure.Calculation;\n                windowDefinitionByMeasureId[measure.id] = _measure.WindowDefinition;\n            });\n        }\n        return {\n            measures: measures,\n            formatByMeasureId: formatByMeasureId,\n            expressionByMeasureId: expressionByMeasureId,\n            calculationByMeasureId: calculationByMeasureId,\n            windowDefinitionByMeasureId: windowDefinitionByMeasureId\n        };\n    };\n    itemMetaData.prototype._createDeltaInfo = function () {\n        var metaData = this._metaDataDto, names = exports.deltaValueNames, deltas = [], valueIdsByDeltaId = {}, formatsByDeltaId = {};\n        if (metaData.DeltaDescriptors) {\n            metaData.DeltaDescriptors.forEach(function (_delta) {\n                var delta = {\n                    id: _delta.ID,\n                    name: _delta.Name,\n                    actualMeasureId: _delta.ActualMeasureID,\n                    targetMeasureId: _delta.TargetMeasureID\n                }, ids = {}, formats = {};\n                deltas.push(delta);\n                ids[names.actualValue] = _delta.ActualValueID;\n                ids[names.targetValue] = _delta.TargetValueID;\n                ids[names.absoluteVariation] = _delta.AbsoluteVariationID;\n                ids[names.percentVariation] = _delta.PercentVariationID;\n                ids[names.percentOfTarget] = _delta.PercentOfTargetID;\n                ids[names.isGood] = _delta.IsGoodID;\n                ids[names.indicatorType] = _delta.IndicatorTypeID;\n                formats[names.actualValue] = _delta.ActualValueFormat;\n                formats[names.targetValue] = _delta.TargetValueFormat;\n                formats[names.absoluteVariation] = _delta.AbsoluteVariationFormat;\n                formats[names.percentVariation] = _delta.PercentVariationFormat;\n                formats[names.percentOfTarget] = _delta.PercentOfTargetFormat;\n                switch (_delta.DeltaValueType) {\n                    case exports.deltaValueTypes.actualValue:\n                        ids[names.mainValue] = ids[names.actualValue];\n                        ids[names.subValue1] = ids[names.absoluteVariation];\n                        ids[names.subValue2] = ids[names.percentVariation];\n                        formats[names.mainValue] = formats[names.actualValue];\n                        formats[names.subValue1] = formats[names.absoluteVariation];\n                        formats[names.subValue2] = formats[names.percentVariation];\n                        break;\n                    case exports.deltaValueTypes.absoluteVariation:\n                        ids[names.mainValue] = ids[names.absoluteVariation];\n                        ids[names.subValue1] = ids[names.actualValue];\n                        ids[names.subValue2] = ids[names.percentVariation];\n                        formats[names.mainValue] = formats[names.absoluteVariation];\n                        formats[names.subValue1] = formats[names.actualValue];\n                        formats[names.subValue2] = formats[names.percentVariation];\n                        break;\n                    case exports.deltaValueTypes.percentVariation:\n                        ids[names.mainValue] = ids[names.percentVariation];\n                        ids[names.subValue1] = ids[names.actualValue];\n                        ids[names.subValue2] = ids[names.absoluteVariation];\n                        formats[names.mainValue] = formats[names.percentVariation];\n                        formats[names.subValue1] = formats[names.actualValue];\n                        formats[names.subValue2] = formats[names.absoluteVariation];\n                        break;\n                    case exports.deltaValueTypes.percentOfTarget:\n                        ids[names.mainValue] = ids[names.percentOfTarget];\n                        ids[names.subValue1] = ids[names.actualValue];\n                        ids[names.subValue2] = ids[names.absoluteVariation];\n                        formats[names.mainValue] = formats[names.percentOfTarget];\n                        formats[names.subValue1] = formats[names.actualValue];\n                        formats[names.subValue2] = formats[names.absoluteVariation];\n                        break;\n                    case exports.deltaValueTypes.targetValue:\n                        ids[names.mainValue] = ids[names.targetValue];\n                        ids[names.subValue1] = ids[names.absoluteVariation];\n                        ids[names.subValue2] = ids[names.percentVariation];\n                        formats[names.mainValue] = formats[names.targetValue];\n                        formats[names.subValue1] = formats[names.absoluteVariation];\n                        formats[names.subValue2] = formats[names.percentVariation];\n                        break;\n                }\n                valueIdsByDeltaId[delta.id] = ids;\n                formatsByDeltaId[delta.id] = formats;\n            });\n        }\n        return {\n            deltas: deltas,\n            valueIdsByDeltaId: valueIdsByDeltaId,\n            formatsByDeltaId: formatsByDeltaId\n        };\n    };\n    itemMetaData.prototype._createAxesInfo = function () {\n        var metaDataDto = this._metaDataDto, axes = {}, dimensionDescriptorsByAxisName = metaDataDto.DimensionDescriptors || {}, levelByDimensionId = {}, formatByDimensionId = {}, pivotAreaByAxisName = {};\n        Object.keys(dimensionDescriptorsByAxisName).forEach(function (_name) {\n            var _dimensions = dimensionDescriptorsByAxisName[_name];\n            var dimensions = [];\n            if (_dimensions) {\n                _dimensions.forEach(function (_dimension) {\n                    var dimension = {\n                        id: _dimension.ID,\n                        name: _dimension.Name,\n                        dataMember: _dimension.DataMember,\n                        finalDataType: _dimension.FinalDataType,\n                        dataType: _dimension.DataType,\n                        dateTimeGroupInterval: _dimension.DateTimeGroupInterval,\n                        textGroupInterval: _dimension.TextGroupInterval,\n                        getFormat: function () {\n                            return _formatter_1.convertToFormat(_dimension.Format);\n                        },\n                        format: function (value) {\n                            var format = _dimension.Format, text = undefined;\n                            if (format)\n                                text = _formatter_1.format(value, format);\n                            return text;\n                        }\n                    };\n                    levelByDimensionId[dimension.id] = _dimension.Level;\n                    formatByDimensionId[dimension.id] = _dimension.Format;\n                    dimensions.push(dimension);\n                });\n            }\n            axes[_name] = dimensions;\n        });\n        if (metaDataDto.ColumnHierarchy)\n            pivotAreaByAxisName[metaDataDto.ColumnHierarchy] = 'Columns';\n        if (metaDataDto.RowHierarchy)\n            pivotAreaByAxisName[metaDataDto.RowHierarchy] = 'Rows';\n        return {\n            axes: axes,\n            levelByDimensionId: levelByDimensionId,\n            formatByDimensionId: formatByDimensionId,\n            pivotAreaByAxisName: pivotAreaByAxisName\n        };\n    };\n    itemMetaData.prototype.getAxes = function () {\n        return this._axesInfo.axes;\n    };\n    itemMetaData.prototype.getAxisNames = function () {\n        var names = [];\n        Object.keys(this.getAxes()).forEach(function (name) {\n            names.push(name);\n        });\n        return names;\n    };\n    itemMetaData.prototype.getPivotAreaByAxisName = function (name) {\n        return this._axesInfo.pivotAreaByAxisName[name];\n    };\n    itemMetaData.prototype.getColorMeasures = function () {\n        return this._colorMeasuresInfo.measures;\n    };\n    itemMetaData.prototype.getConditionalFormattingMeasures = function () {\n        return this._conditionalFormattingMeasuresInfo.measures;\n    };\n    itemMetaData.prototype.getDimensions = function (axisName) {\n        return this.getAxes()[axisName === undefined ? item_data_axis_names_1.itemDataAxisNames.defaultAxis : axisName];\n    };\n    itemMetaData.prototype.getMeasures = function () {\n        return this._measuresInfo.measures;\n    };\n    itemMetaData.prototype.getDeltas = function () {\n        return this._deltaInfo.deltas;\n    };\n    itemMetaData.prototype.getMeasureById = function (id) {\n        var measures = this.getMeasures(), foundMeasures = measures.filter(function (measure) {\n            return measure.id == id;\n        });\n        return foundMeasures[0];\n    };\n    itemMetaData.prototype.getDeltaById = function (id) {\n        var deltas = this.getDeltas(), foundDeltas = deltas.filter(function (delta) {\n            return delta.id == id;\n        });\n        return foundDeltas[0];\n    };\n    itemMetaData.prototype.getMeasureFormat = function (measureId) {\n        return this._measuresInfo.formatByMeasureId[measureId];\n    };\n    itemMetaData.prototype.getMeasureExpression = function (measureId) {\n        return this._measuresInfo.expressionByMeasureId[measureId];\n    };\n    itemMetaData.prototype.getMeasureCalculation = function (measureId) {\n        return this._measuresInfo.calculationByMeasureId[measureId];\n    };\n    itemMetaData.prototype.getMeasureWindowDefinition = function (measureId) {\n        return this._measuresInfo.windowDefinitionByMeasureId[measureId];\n    };\n    itemMetaData.prototype.getDeltaValueIds = function (deltaId) {\n        return this._deltaInfo.valueIdsByDeltaId[deltaId];\n    };\n    itemMetaData.prototype.getDeltaFormats = function (deltaId) {\n        return this._deltaInfo.formatsByDeltaId[deltaId];\n    };\n    itemMetaData.prototype.getDeltaValueType = function (deltaId) {\n    };\n    itemMetaData.prototype.getDimensionLevel = function (dimensionId) {\n        return this._axesInfo.levelByDimensionId[dimensionId];\n    };\n    itemMetaData.prototype.getDimensionFormat = function (dimensionId) {\n        return this._axesInfo.formatByDimensionId[dimensionId];\n    };\n    itemMetaData.prototype.getDataMembers = function () {\n        return this._dataSourceColumns;\n    };\n    itemMetaData.prototype.getFinalDataType = function (dataItemId) {\n        var dataItem = this.getMeasureById(dataItemId);\n        if (!dataItem) {\n            var axes_1 = this.getAxes();\n            Object.keys(axes_1).forEach(function (axisName) {\n                var dimensions = axes_1[axisName];\n                dataItem = dimensions.filter(function (d) { return d.id == dataItemId; })[0];\n                if (!!dataItem) {\n                    return false;\n                }\n            });\n        }\n        return !!dataItem ? dataItem.finalDataType : undefined;\n    };\n    return itemMetaData;\n}());\nexports.itemMetaData = itemMetaData;\n"]},"metadata":{},"sourceType":"script"}