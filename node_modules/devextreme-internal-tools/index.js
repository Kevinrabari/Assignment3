#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shelljs_1 = require("shelljs");
var tools_1 = require("./ts/scripts/tools");
var args_1 = require("./ts/scripts/args");
var helpers_1 = require("./ts/scripts/helpers");
var package_json_1 = require("./package.json");
var logging_1 = require("./ts/logging");
var scripts = {
    'discover-declarations': [tools_1.runDiscoverer],
    'discover-ts-declarations': [tools_1.runTsDiscoverer],
    'discover': [tools_1.runTsDiscoverer, tools_1.runDiscoverer],
    'generate-modules-meta': [tools_1.runModulesMetaGenerator],
    'generate-extra-topics': [tools_1.runExtraTopicsGenerator],
    'generate-content-map': [tools_1.runContentMapGenerator],
    'generate-ng-smd': [tools_1.runNgSmdGenerator],
    'generate-smd-ng': [tools_1.runTsDiscoverer, tools_1.runDiscoverer, tools_1.runNgSmdGenerator],
    'generate-smd': [tools_1.runSmdGenerator],
    'generate-syntax-data': [tools_1.runSyntaxDataGenerator],
    'generate-ts-bundle': [tools_1.runDtsBundler],
    'inject-descriptions-to-bundle': [tools_1.runInjector],
    'inject-descriptions': [tools_1.runCollapser, tools_1.runInjector],
    'integration-data-generator': [tools_1.runModulesMetaGenerator, tools_1.runImdGenerator],
    'update-integration-meta': [tools_1.runTsDiscoverer, tools_1.runDiscoverer, tools_1.runModulesMetaGenerator, tools_1.runImdGenerator],
    'update-links': [tools_1.runLinksConverter],
    'update-meta': [tools_1.runTsDiscoverer, tools_1.runDiscoverer, tools_1.runNgSmdGenerator],
    'update-topics': [tools_1.runDocGenerator],
    'update-ts-bundle': [tools_1.runDtsBundler],
    'validate-declarations': [tools_1.runTsDiscoverer, tools_1.runValidator],
    'validate-docs': [tools_1.runTopicsValidation],
    'validate-modules-guide': [tools_1.runModulesGuideValidator],
    'clean-tags': [tools_1.runTagCleaner],
};
var allArgs = args_1.parseArgs(process.argv);
logging_1.setLogDir(allArgs.artifacts);
logging_1.setAreaName('CLI');
logging_1.log("Process args: " + process.argv.join(' '), { lvl: 'debug' });
var scriptNames = Object.keys(scripts);
if (process.argv.length < 3) {
    logging_1.log('Script is not specified', { lvl: 'error' });
    shelljs_1.exit(1);
}
var scriptName = process.argv[2];
if (scriptNames.indexOf(scriptName) === -1) {
    logging_1.log("Invalid script name. Use one of the following: \n\n" + scriptNames.join('\n'), { lvl: 'error' });
    shelljs_1.exit(1);
}
helpers_1.ensureDir(allArgs.artifacts);
allArgs.toolsVersion = package_json_1.version;
logging_1.log("Tools version: " + package_json_1.version);
scripts[scriptName].forEach(function (tool) { return tool(allArgs); });
//# sourceMappingURL=index.js.map