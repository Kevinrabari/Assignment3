"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveNodeType = exports.getGenericParameterDeclaration = exports.isGenericArgumentType = exports.isLiteralMemberType = exports.isFunctionMemberType = void 0;
var typescript_1 = require("typescript");
var utils_1 = require("./utils");
var ts_utils_1 = require("./ts-utils");
var logging_1 = require("../logging");
var common_resolving_1 = require("./common-resolving");
function isFunctionMemberType(memberType) {
    var type = memberType;
    return !!(type.functionParams || type.functionReturnType);
}
exports.isFunctionMemberType = isFunctionMemberType;
function isLiteralMemberType(memberType) {
    return memberType.value !== undefined;
}
exports.isLiteralMemberType = isLiteralMemberType;
function isGenericArgumentType(memberType) {
    return !!memberType.isGenericArgument;
}
exports.isGenericArgumentType = isGenericArgumentType;
function resolveFunctionType(typeNode, checker, baseDir) {
    if (typescript_1.isFunctionTypeNode(typeNode)
        || typescript_1.isFunctionDeclaration(typeNode)
        || typescript_1.isMethodDeclaration(typeNode)
        || typescript_1.isMethodSignature(typeNode)) {
        var paramsString = typeNode.parameters
            .map(function (p) { return p.name; })
            .filter(typescript_1.isIdentifier)
            .map(function (n) { return n.escapedText.toString(); })
            .join(', ');
        var returnType = resolveNodeType(typeNode.type, checker, baseDir);
        return {
            id: "function(" + paramsString + ")",
            functionParams: typeNode.parameters.map(function (t) { return getFunctionParameter(t, checker, baseDir); }),
            functionReturnType: returnType === null || returnType === void 0 ? void 0 : returnType.id,
            isCallback: typescript_1.isFunctionTypeNode(typeNode),
        };
    }
    return undefined;
}
function resolveLiteralType(typeNode) {
    if (typescript_1.isLiteralTypeNode(typeNode)) {
        if (typescript_1.isStringLiteral(typeNode.literal)) {
            return { id: 'string', value: typeNode.literal.getText() };
        }
        var numberValue = ts_utils_1.getNumberLiteralValue(typeNode);
        if (numberValue !== undefined) {
            return { id: 'number', value: numberValue };
        }
        if (typeNode.literal.kind === typescript_1.SyntaxKind.NullKeyword) {
            return { id: 'null' };
        }
        if (typeNode.literal.kind === typescript_1.SyntaxKind.TrueKeyword) {
            return { id: 'true' };
        }
        if (typeNode.literal.kind === typescript_1.SyntaxKind.FalseKeyword) {
            return { id: 'false' };
        }
        throw Error("Literal of unknown type found: " + typeNode.literal.getText());
    }
    return undefined;
}
function resolveTypeReference(node, checker, baseDir) {
    var _a, _b, _c, _d;
    if (!typescript_1.isTypeReferenceNode(node)) {
        return undefined;
    }
    var paramDeclaration = getGenericParameterDeclaration(node, checker);
    if (paramDeclaration) {
        return paramDeclaration.default && typescript_1.isTypeReferenceNode(paramDeclaration.default)
            ? { id: "<" + resolveTypeReference(paramDeclaration.default, checker, baseDir).id + ">" }
            : buildAny();
    }
    var typeArguments = (_b = (_a = node.typeArguments) === null || _a === void 0 ? void 0 : _a.map(function (t) { return resolveNodeType(t, checker, baseDir); })) === null || _b === void 0 ? void 0 : _b.filter(function (t) { return t; });
    if (typescript_1.isIdentifier(node.typeName)) {
        var aliasSymbol = ts_utils_1.getAliasSymbol(checker.getSymbolAtLocation(node.typeName), checker);
        var aliasNode = (_c = aliasSymbol.getDeclarations()) === null || _c === void 0 ? void 0 : _c[0];
        if ((aliasNode && ts_utils_1.isEnumTypeNode(aliasNode)) || checker.getTypeAtLocation(node).isLiteral()) {
            return {
                id: "Enums." + ((_d = aliasSymbol === null || aliasSymbol === void 0 ? void 0 : aliasSymbol.getEscapedName()) !== null && _d !== void 0 ? _d : node.typeName.getText()),
            };
        }
    }
    return (typeArguments === null || typeArguments === void 0 ? void 0 : typeArguments.length) ? {
        id: node.typeName.getText() + "<" + typeArguments.map(function (t) { return t === null || t === void 0 ? void 0 : t.id; }).join('|') + ">",
        typeArguments: typeArguments,
    }
        : {
            id: node.typeName.getText(),
        };
}
function resolveUnionType(typeNode, checker, baseDir) {
    if (ts_utils_1.isUnionOrIntersectionTypeNode(typeNode)) {
        var types = typeNode.types
            .map(function (t) { return resolveNodeType(t, checker, baseDir); })
            .filter(function (t) { return t === null || t === void 0 ? void 0 : t.id; });
        var result = {
            id: utils_1.distinct(types.map(function (t) { return t.id; })).join('|'),
            typeArguments: types,
        };
        return result;
    }
    return undefined;
}
function getFunctionParameter(parameter, checker, baseDir) {
    if (typescript_1.isIdentifier(parameter.name)) {
        if (!parameter.type) {
            return { id: parameter.name.escapedText.toString() };
        }
        var paramType = resolveNodeType(parameter.type, checker, baseDir);
        return {
            id: parameter.name.escapedText + ":" + (paramType === null || paramType === void 0 ? void 0 : paramType.id),
            fields: getParameterFields(parameter.type, checker, baseDir),
        };
    }
    return undefined;
}
function getParameterFields(paramType, checker, baseDir) {
    if (typescript_1.isTypeLiteralNode(paramType)) {
        return paramType.members.map(function (member) {
            var _a;
            if (typescript_1.isPropertySignature(member) && typescript_1.isIdentifier(member.name)) {
                var memberName = member.name.escapedText;
                var memberType = (_a = resolveNodeType(member.type, checker, baseDir)) === null || _a === void 0 ? void 0 : _a.id;
                var flags = getMemberFlags(member);
                return flags.length
                    ? memberName + ":" + memberType + ":" + flags.join('&')
                    : memberName + ":" + memberType;
            }
            return undefined;
        }).filter(function (field) { return field !== undefined; });
    }
    if (ts_utils_1.isUnionOrIntersectionTypeNode(paramType)) {
        return paramType.types
            .map(function (t) { return getParameterFields(t, checker, baseDir); })
            .find(function (fields) { return (fields === null || fields === void 0 ? void 0 : fields.length) > 0; });
    }
    return undefined;
}
function getGenericParameterDeclaration(typeNode, checker) {
    var _a;
    var typeSymbol = (_a = getTypeAtLocation(typeNode, checker)) === null || _a === void 0 ? void 0 : _a.getSymbol();
    return typeSymbol === null || typeSymbol === void 0 ? void 0 : typeSymbol.declarations.find(typescript_1.isTypeParameterDeclaration);
}
exports.getGenericParameterDeclaration = getGenericParameterDeclaration;
function getTypeAtLocation(typeNode, checker) {
    var type = checker.getTypeAtLocation(typeNode);
    if (type && (type.flags & typescript_1.TypeFlags.Substitution)) {
        return type.baseType;
    }
    return type;
}
function getMemberFlags(declaration) {
    var flags = [];
    if (ts_utils_1.isReadonlyMember(declaration))
        flags.push('readonly');
    if (ts_utils_1.isOptionalMember(declaration))
        flags.push('optional');
    return flags;
}
function resolveArrayType(node, checker, baseDir) {
    if (!typescript_1.isArrayTypeNode(node))
        return undefined;
    var elementType = resolveNodeType(node.elementType, checker, baseDir);
    return {
        id: "Array<" + elementType.id + ">",
        typeArguments: elementType.typeArguments,
    };
}
function resolveThisType(node, checker) {
    var _a, _b, _c;
    if (!typescript_1.isThisTypeNode(node))
        return undefined;
    var declaration = (_c = (_b = (_a = checker.getTypeAtLocation(node)) === null || _a === void 0 ? void 0 : _a.getSymbol()) === null || _b === void 0 ? void 0 : _b.getDeclarations()) === null || _c === void 0 ? void 0 : _c[0];
    var name = declaration && ts_utils_1.getNodeName(declaration);
    return name ? {
        id: name,
    } : undefined;
}
function resolveNodeType(node, checker, baseDir) {
    if (node === undefined) {
        return undefined;
    }
    try {
        return common_resolving_1.resolveValueType(node)
            || resolveFunctionType(node, checker, baseDir)
            || resolveNodeType(common_resolving_1.getParenthesizedType(node), checker, baseDir)
            || resolveLiteralType(node)
            || resolveTypeReference(node, checker, baseDir)
            || resolveUnionType(node, checker, baseDir)
            || resolveTypeReference(node, checker, baseDir)
            || resolveUnionType(node, checker, baseDir)
            || resolveArrayType(node, checker, baseDir)
            || resolveThisType(node, checker)
            || common_resolving_1.resolveNonSupportedType(node);
    }
    catch (e) {
        logging_1.log('Unable to resolve node type', { lvl: 'error', node: node });
        throw e;
    }
}
exports.resolveNodeType = resolveNodeType;
function buildAny() {
    return {
        id: ts_utils_1.getValueType(typescript_1.SyntaxKind.AnyKeyword),
    };
}
//# sourceMappingURL=type-resolving.js.map