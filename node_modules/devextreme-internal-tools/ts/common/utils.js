"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSortedRecord = exports.buildQualifiedName = exports.getInnerPath = exports.distinct = exports.toArray = exports.mergeArrays = exports.enumerateFiles = exports.walkDirSync = void 0;
var fs_1 = require("fs");
var path_1 = require("path");
function walkDirSync(rootDir, callback) {
    var remained = [rootDir];
    while (remained.length > 0) {
        var currentDir = remained.shift();
        for (var _i = 0, _a = fs_1.readdirSync(currentDir); _i < _a.length; _i++) {
            var fileRelPath = _a[_i];
            var fileAbsPath = path_1.resolve(currentDir, fileRelPath);
            if (fs_1.statSync(fileAbsPath).isDirectory()) {
                remained.push(fileAbsPath);
            }
            else {
                callback(fileAbsPath);
            }
        }
    }
}
exports.walkDirSync = walkDirSync;
function enumerateFiles(targetDir, fileExtension, ignorePattern) {
    var fileNames = [];
    walkDirSync(targetDir, function (f) { return (!fileExtension || f.endsWith(fileExtension))
        && !(ignorePattern === null || ignorePattern === void 0 ? void 0 : ignorePattern.test(f.replace(/\\/g, '/')))
        && fileNames.push(f); });
    return fileNames;
}
exports.enumerateFiles = enumerateFiles;
function mergeArrays(arr) {
    return Array.prototype.concat.apply([], arr);
}
exports.mergeArrays = mergeArrays;
function toArray(iterator) {
    var _a;
    if (iterator === undefined)
        return undefined;
    var result = [];
    var _b = iterator.next(), value = _b.value, done = _b.done;
    while (!done) {
        result.push(value);
        (_a = iterator.next(), value = _a.value, done = _a.done);
    }
    return result;
}
exports.toArray = toArray;
function distinct(arr, getKey) {
    if (getKey === void 0) { getKey = (function (item) { return item; }); }
    if (arr === undefined) {
        return undefined;
    }
    var result = [];
    var _loop_1 = function (item) {
        if (!result.some(function (i) { return getKey(i) === getKey(item); })) {
            result.push(item);
        }
    };
    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
        var item = arr_1[_i];
        _loop_1(item);
    }
    return result;
}
exports.distinct = distinct;
function getInnerPath(fullPath, baseDir) {
    var result = path_1.relative(baseDir, fullPath);
    return result.startsWith('..') ? undefined : result;
}
exports.getInnerPath = getInnerPath;
function buildQualifiedName() {
    var parts = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        parts[_i] = arguments[_i];
    }
    return parts.filter(function (p) { return p; }).join('.');
}
exports.buildQualifiedName = buildQualifiedName;
function toSortedRecord(obj) {
    return Object.keys(obj).sort()
        .reduce(function (acc, key) { acc[key] = obj[key]; return acc; }, {});
}
exports.toSortedRecord = toSortedRecord;
//# sourceMappingURL=utils.js.map