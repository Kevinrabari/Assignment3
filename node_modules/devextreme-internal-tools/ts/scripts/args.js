"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureArgs = exports.stringifyArgs = exports.parseArgs = void 0;
var shelljs_1 = require("shelljs");
var helpers_1 = require("./helpers");
var logging_1 = require("../logging");
var argsMap = {
    artifacts: 'artifacts',
    docsRoot: 'docs-root',
    jsScripts: 'js-scripts',
    version: 'version',
    declarations: 'declarations-path',
    output: 'output-path',
    target: 'target-path',
    searchPattern: 'search-pattern',
    exclude: 'exclude',
    enumsJson: 'enum-json-path',
    contentMap: 'content-map-path',
    isValidation: 'validation',
    descriptions: 'descriptions-path',
    toolsVersion: 'tools-version',
    modulesMeta: 'modules-meta',
    modulesGuide: 'modules-guide-path',
    syntaxData: 'syntaxdata-path',
};
function parseArgs(rawArgs) {
    var normalizedArgs = rawArgs.map(function (a) { return (a.indexOf(' ') > -1 ? "\"" + a + "\"" : a); });
    var allArgs = {
        artifacts: helpers_1.paths.artifactsDir,
    };
    for (var argKey in argsMap) {
        var indexKey = normalizedArgs.indexOf("--" + argsMap[argKey]);
        if (indexKey !== -1) {
            allArgs[argKey] = normalizedArgs[indexKey + 1] || 'true';
        }
    }
    return allArgs;
}
exports.parseArgs = parseArgs;
function stringifyArgs(args) {
    return Object.keys(args)
        .filter(function (argName) { return args[argName]; })
        .map(function (argName) { return "--" + argsMap[argName] + "=" + args[argName]; })
        .join(' ');
}
exports.stringifyArgs = stringifyArgs;
function ensureArgs(args, keys) {
    var result = {};
    var missingKeys = [];
    for (var _i = 0, _a = keys.required; _i < _a.length; _i++) {
        var key = _a[_i];
        if (args[key]) {
            result[key] = parse(key, args[key]);
        }
        else {
            missingKeys.push(key);
        }
    }
    if (missingKeys.length > 0) {
        logging_1.log("Args missing: " + missingKeys.map(function (k) { return argsMap[k]; }).join(', '), { lvl: 'error' });
        shelljs_1.exit(1);
    }
    if (keys.optional) {
        for (var _b = 0, _c = keys.optional; _b < _c.length; _b++) {
            var key = _c[_b];
            if (args[key])
                result[key] = parse(key, args[key]);
        }
    }
    return result;
}
exports.ensureArgs = ensureArgs;
function parse(key, value) {
    if (key === 'exclude') {
        try {
            return new RegExp(value);
        }
        catch (e) {
            logging_1.log(argsMap.exclude + " must be a valid RegExp", { lvl: 'fatal', e: e });
            throw e;
        }
    }
    return value;
}
//# sourceMappingURL=args.js.map