"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModulesData = exports.generateModulesMeta = void 0;
var fs_1 = require("fs");
var typescript_1 = require("typescript");
var logging_1 = require("../logging");
var utils_1 = require("../common/utils");
var ts_utils_1 = require("../common/ts-utils");
var tags_1 = require("../common/tags");
function generateModulesMeta(scripts, output, exclude, toolsVersion) {
    logging_1.log('Generating modules metadata');
    var fileNames = utils_1.enumerateFiles(scripts, '.d.ts', exclude);
    var modulesData = getModulesData(fileNames, scripts);
    if (!Object.entries(modulesData).length)
        throw new Error('Modules metadata is empty');
    var metaData = {
        ToolsVersion: toolsVersion,
        Modules: modulesData,
    };
    fs_1.writeFileSync(output, JSON.stringify(metaData, null, 2));
    logging_1.log('Generation finished');
}
exports.generateModulesMeta = generateModulesMeta;
function getModulesData(fileNames, baseDir) {
    var program = typescript_1.createProgram(fileNames, {});
    var checker = program.getTypeChecker();
    return fileNames.reduce(function (modules, module) {
        var sourceFile = program.getSourceFile(module);
        var moduleName = ts_utils_1.getModule(sourceFile, baseDir);
        var fileSymbol = checker.getSymbolAtLocation(sourceFile);
        var exports = getModuleExports(fileSymbol);
        if (Object.entries(exports).length) {
            modules[moduleName] = exports;
        }
        return modules;
    }, {});
    function getModuleExports(fileSymbol) {
        return checker.getExportsOfModule(fileSymbol).reduce(function (exports, symbol) {
            if (hasPublicTags(symbol) || hasDeclarationsWithPublicTags(symbol)) {
                exports[symbol.escapedName.toString()] = {};
            }
            return exports;
        }, {});
    }
    function hasDeclarationsWithPublicTags(symbol) {
        return symbol.declarations
            .filter(typescript_1.isExportAssignment)
            .some(function (d) {
            var _a;
            var typeSymbol = (_a = checker.getTypeAtLocation(d.expression)) === null || _a === void 0 ? void 0 : _a.getSymbol();
            return hasPublicTags(typeSymbol);
        });
    }
    function hasPublicTags(symbol) {
        return tags_1.hasTag(symbol, 'public')
            || tags_1.hasTag(symbol, 'docid');
    }
}
exports.getModulesData = getModulesData;
//# sourceMappingURL=modules-meta-generator.js.map