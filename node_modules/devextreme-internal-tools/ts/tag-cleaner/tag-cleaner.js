"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanTags = void 0;
var fs_1 = require("fs");
var discovering_1 = require("../discoverer/discovering");
var utils_1 = require("../common/utils");
var logging_1 = require("../logging");
function cleanTags(targetDir, excludeRegex) {
    var fileNames = utils_1.enumerateFiles(targetDir, '.ts', excludeRegex);
    var descriptors = discovering_1.parseFiles(fileNames, targetDir)[0];
    Object.entries(getLinesToRemove(descriptors, targetDir))
        .forEach(function (_a) {
        var k = _a[0], v = _a[1];
        return removeRedundantTags(k, v);
    });
}
exports.cleanTags = cleanTags;
function getLinesToRemove(descriptors, targetDir) {
    var result = {};
    descriptors.forEach(function (d) {
        var _a;
        var filePath = targetDir + "/" + d.location.file;
        var lines = d.tags
            .filter(function (t) { return t.redundant; })
            .map(function (t) { return t.line; });
        if (!lines.length)
            return;
        if (!result[filePath])
            result[filePath] = [];
        (_a = result[filePath]).push.apply(_a, lines);
    });
    return result;
}
function removeRedundantTags(fileName, linesToSkip) {
    logging_1.log("Cleaning " + fileName + ": lines " + linesToSkip.join(', '));
    var fileContent = fs_1.readFileSync(fileName, 'utf8');
    var newFileContent = fileContent
        .split('\n')
        .filter(function (l, i) { return !linesToSkip.includes(i); })
        .join('\n');
    fs_1.writeFileSync(fileName, newFileContent);
}
//# sourceMappingURL=tag-cleaner.js.map