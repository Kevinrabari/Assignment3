"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WizardSettings = exports.ViewerApi = exports.MobileLayout = exports.ItemOptionsPanel = exports.ItemBindingPanel = exports.Extensions = exports.DesignerToolbar = exports.DataSourceWizard = exports.DataRequestOptions = exports.DataInspector = exports.DashboardParameterDialog = exports.DashboardExport = exports.AjaxRemoteService = exports.DashboardControl = void 0;
const index_1 = require("devexpress-dashboard/integration/index");
const PropTypes = require("prop-types");
const component_1 = require("devextreme-react/core/component");
const nested_option_1 = require("devextreme-react/core/nested-option");
class DashboardControl extends component_1.Component {
    constructor() {
        super(...arguments);
        this._WidgetClass = index_1.default;
        this.subscribableOptions = ["dashboardId", "workingMode"];
        this.independentEvents = ["onBeforeRender", "onDashboardBeginUpdate", "onDashboardEndUpdate", "onDashboardInitialized", "onDashboardInitializing", "onInitializing", "onItemBeginUpdate", "onItemEndUpdate"];
        this._defaults = {
            defaultDashboardId: "dashboardId",
            defaultWorkingMode: "workingMode"
        };
        this._expectedChildren = {
            ajaxRemoteService: { optionName: "ajaxRemoteService", isCollectionItem: false },
            dataRequestOptions: { optionName: "dataRequestOptions", isCollectionItem: false },
            extensions: { optionName: "extensions", isCollectionItem: false }
        };
    }
    get instance() {
        return this._instance;
    }
}
exports.DashboardControl = DashboardControl;
DashboardControl.propTypes = {
    ajaxRemoteService: PropTypes.object,
    allowMaximizeItems: PropTypes.bool,
    dashboardId: PropTypes.string,
    dataRequestOptions: PropTypes.object,
    encodeHtml: PropTypes.bool,
    endpoint: PropTypes.string,
    extensions: PropTypes.object,
    initialDashboardId: PropTypes.string,
    initialDashboardState: PropTypes.string,
    limitVisibleDataMode: PropTypes.string,
    loadDefaultDashboard: PropTypes.bool,
    onBeforeRender: PropTypes.func,
    onDashboardBeginUpdate: PropTypes.func,
    onDashboardEndUpdate: PropTypes.func,
    onDashboardInitialized: PropTypes.func,
    onDashboardInitializing: PropTypes.func,
    onDashboardStateChanged: PropTypes.func,
    onInitializing: PropTypes.func,
    onItemBeginUpdate: PropTypes.func,
    onItemEndUpdate: PropTypes.func,
    onOptionChanged: PropTypes.func,
    resizeByTimer: PropTypes.bool,
    showConfirmationOnBrowserClosing: PropTypes.bool,
    useNeutralFilterMode: PropTypes.bool,
    workingMode: PropTypes.string
};
class AjaxRemoteService extends nested_option_1.default {
}
exports.AjaxRemoteService = AjaxRemoteService;
AjaxRemoteService.OptionName = "ajaxRemoteService";
class DashboardExport extends nested_option_1.default {
}
exports.DashboardExport = DashboardExport;
DashboardExport.OptionName = "dashboardExport";
class DashboardParameterDialog extends nested_option_1.default {
}
exports.DashboardParameterDialog = DashboardParameterDialog;
DashboardParameterDialog.OptionName = "dashboardParameterDialog";
class DataInspector extends nested_option_1.default {
}
exports.DataInspector = DataInspector;
DataInspector.OptionName = "dataInspector";
class DataRequestOptions extends nested_option_1.default {
}
exports.DataRequestOptions = DataRequestOptions;
DataRequestOptions.OptionName = "dataRequestOptions";
class DataSourceWizard extends nested_option_1.default {
}
exports.DataSourceWizard = DataSourceWizard;
DataSourceWizard.OptionName = "dataSourceWizard";
DataSourceWizard.ExpectedChildren = {
    wizardSettings: { optionName: "wizardSettings", isCollectionItem: false }
};
class DesignerToolbar extends nested_option_1.default {
}
exports.DesignerToolbar = DesignerToolbar;
DesignerToolbar.OptionName = "designerToolbar";
class Extensions extends nested_option_1.default {
}
exports.Extensions = Extensions;
Extensions.OptionName = "extensions";
Extensions.ExpectedChildren = {
    dashboardExport: { optionName: "dashboardExport", isCollectionItem: false },
    dashboardParameterDialog: { optionName: "dashboardParameterDialog", isCollectionItem: false },
    dataInspector: { optionName: "dataInspector", isCollectionItem: false },
    dataSourceWizard: { optionName: "dataSourceWizard", isCollectionItem: false },
    designerToolbar: { optionName: "designerToolbar", isCollectionItem: false },
    itemBindingPanel: { optionName: "itemBindingPanel", isCollectionItem: false },
    itemOptionsPanel: { optionName: "itemOptionsPanel", isCollectionItem: false },
    mobileLayout: { optionName: "mobileLayout", isCollectionItem: false },
    viewerApi: { optionName: "viewerApi", isCollectionItem: false }
};
class ItemBindingPanel extends nested_option_1.default {
}
exports.ItemBindingPanel = ItemBindingPanel;
ItemBindingPanel.OptionName = "itemBindingPanel";
class ItemOptionsPanel extends nested_option_1.default {
}
exports.ItemOptionsPanel = ItemOptionsPanel;
ItemOptionsPanel.OptionName = "itemOptionsPanel";
class MobileLayout extends nested_option_1.default {
}
exports.MobileLayout = MobileLayout;
MobileLayout.OptionName = "mobileLayout";
class ViewerApi extends nested_option_1.default {
}
exports.ViewerApi = ViewerApi;
ViewerApi.OptionName = "viewerApi";
class WizardSettings extends nested_option_1.default {
}
exports.WizardSettings = WizardSettings;
WizardSettings.OptionName = "wizardSettings";
exports.default = DashboardControl;
