import dxDashboardControl, { IOptions } from "devexpress-dashboard/integration/index";
import { Component as BaseComponent, IHtmlOptions } from "devextreme-react/core/component";
import NestedOption from "devextreme-react/core/nested-option";
interface IDashboardControlOptions extends IOptions, IHtmlOptions {
    defaultDashboardId?: any;
    defaultWorkingMode?: any;
    onDashboardIdChange?: (value: any) => void;
    onWorkingModeChange?: (value: any) => void;
}
declare class DashboardControl extends BaseComponent<IDashboardControlOptions> {
    get instance(): dxDashboardControl;
    protected _WidgetClass: typeof dxDashboardControl;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultDashboardId: string;
        defaultWorkingMode: string;
    };
    protected _expectedChildren: {
        ajaxRemoteService: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dataRequestOptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
        extensions: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IAjaxRemoteServiceProps {
    beforeSend?: any;
    complete?: any;
    headers?: any;
}
declare class AjaxRemoteService extends NestedOption<IAjaxRemoteServiceProps> {
    static OptionName: string;
}
interface IDashboardExportProps {
    allowExportDashboard?: any;
    allowExportDashboardItems?: any;
    onExportDialogHidden?: any;
    onExportDialogShowing?: any;
    onExportDialogShown?: any;
}
declare class DashboardExport extends NestedOption<IDashboardExportProps> {
    static OptionName: string;
}
interface IDashboardParameterDialogProps {
    onDynamicLookUpValuesLoaded?: any;
    onHidden?: any;
    onShowing?: any;
    onShown?: any;
}
declare class DashboardParameterDialog extends NestedOption<IDashboardParameterDialogProps> {
    static OptionName: string;
}
interface IDataInspectorProps {
    allowInspectAggregatedData?: any;
    allowInspectRawData?: any;
    onDialogHidden?: any;
    onDialogShowing?: any;
    onDialogShown?: any;
    onGridContentReady?: any;
    onGridInitialized?: any;
}
declare class DataInspector extends NestedOption<IDataInspectorProps> {
    static OptionName: string;
}
interface IDataRequestOptionsProps {
    itemDataLoadingMode?: any;
    itemDataRequestMode?: any;
}
declare class DataRequestOptions extends NestedOption<IDataRequestOptionsProps> {
    static OptionName: string;
}
interface IDataSourceWizardProps {
    allowCreateNewJsonConnection?: any;
    enableCustomSql?: any;
    onCustomizeDataSourceWizard?: any;
    wizardSettings?: any;
}
declare class DataSourceWizard extends NestedOption<IDataSourceWizardProps> {
    static OptionName: string;
    static ExpectedChildren: {
        wizardSettings: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IDesignerToolbarProps {
    onPreparing?: any;
}
declare class DesignerToolbar extends NestedOption<IDesignerToolbarProps> {
    static OptionName: string;
}
interface IExtensionsProps {
    dashboardExport?: object | {
        allowExportDashboard?: any;
        allowExportDashboardItems?: any;
        onExportDialogHidden?: any;
        onExportDialogShowing?: any;
        onExportDialogShown?: any;
    };
    dashboardParameterDialog?: object | {
        onDynamicLookUpValuesLoaded?: any;
        onHidden?: any;
        onShowing?: any;
        onShown?: any;
    };
    dataInspector?: object | {
        allowInspectAggregatedData?: any;
        allowInspectRawData?: any;
        onDialogHidden?: any;
        onDialogShowing?: any;
        onDialogShown?: any;
        onGridContentReady?: any;
        onGridInitialized?: any;
    };
    dataSourceWizard?: object | {
        allowCreateNewJsonConnection?: any;
        enableCustomSql?: any;
        onCustomizeDataSourceWizard?: any;
        wizardSettings?: any;
    };
    designerToolbar?: object | {
        onPreparing?: any;
    };
    itemBindingPanel?: object | {
        onCustomizeDataItemContainerSections?: any;
    };
    itemOptionsPanel?: object | {
        onCustomizeSections?: any;
    };
    mobileLayout?: object | {
        mobileLayoutEnabled?: any;
    };
    viewerApi?: object | {
        onDashboardTitleToolbarUpdated?: any;
        onItemActionAvailabilityChanged?: any;
        onItemCaptionToolbarUpdated?: any;
        onItemClick?: any;
        onItemDrillDownStateChanged?: any;
        onItemElementCustomColor?: any;
        onItemMasterFilterStateChanged?: any;
        onItemSelectionChanged?: any;
        onItemVisualInteractivity?: any;
        onItemWidgetCreated?: any;
        onItemWidgetOptionsPrepared?: any;
        onItemWidgetUpdated?: any;
        onItemWidgetUpdating?: any;
        onSelectedTabPageChanged?: any;
    };
}
declare class Extensions extends NestedOption<IExtensionsProps> {
    static OptionName: string;
    static ExpectedChildren: {
        dashboardExport: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dashboardParameterDialog: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dataInspector: {
            optionName: string;
            isCollectionItem: boolean;
        };
        dataSourceWizard: {
            optionName: string;
            isCollectionItem: boolean;
        };
        designerToolbar: {
            optionName: string;
            isCollectionItem: boolean;
        };
        itemBindingPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        itemOptionsPanel: {
            optionName: string;
            isCollectionItem: boolean;
        };
        mobileLayout: {
            optionName: string;
            isCollectionItem: boolean;
        };
        viewerApi: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
interface IItemBindingPanelProps {
    onCustomizeDataItemContainerSections?: any;
}
declare class ItemBindingPanel extends NestedOption<IItemBindingPanelProps> {
    static OptionName: string;
}
interface IItemOptionsPanelProps {
    onCustomizeSections?: any;
}
declare class ItemOptionsPanel extends NestedOption<IItemOptionsPanelProps> {
    static OptionName: string;
}
interface IMobileLayoutProps {
    mobileLayoutEnabled?: any;
}
declare class MobileLayout extends NestedOption<IMobileLayoutProps> {
    static OptionName: string;
}
interface IViewerApiProps {
    onDashboardTitleToolbarUpdated?: any;
    onItemActionAvailabilityChanged?: any;
    onItemCaptionToolbarUpdated?: any;
    onItemClick?: any;
    onItemDrillDownStateChanged?: any;
    onItemElementCustomColor?: any;
    onItemMasterFilterStateChanged?: any;
    onItemSelectionChanged?: any;
    onItemVisualInteractivity?: any;
    onItemWidgetCreated?: any;
    onItemWidgetOptionsPrepared?: any;
    onItemWidgetUpdated?: any;
    onItemWidgetUpdating?: any;
    onSelectedTabPageChanged?: any;
}
declare class ViewerApi extends NestedOption<IViewerApiProps> {
    static OptionName: string;
}
interface IWizardSettingsProps {
    enableFederationDataSource?: any;
    enableJsonDataSource?: any;
    enableOlapDataSource?: any;
    enableSqlDataSource?: any;
}
declare class WizardSettings extends NestedOption<IWizardSettingsProps> {
    static OptionName: string;
}
export default DashboardControl;
export { DashboardControl, IDashboardControlOptions, AjaxRemoteService, IAjaxRemoteServiceProps, DashboardExport, IDashboardExportProps, DashboardParameterDialog, IDashboardParameterDialogProps, DataInspector, IDataInspectorProps, DataRequestOptions, IDataRequestOptionsProps, DataSourceWizard, IDataSourceWizardProps, DesignerToolbar, IDesignerToolbarProps, Extensions, IExtensionsProps, ItemBindingPanel, IItemBindingPanelProps, ItemOptionsPanel, IItemOptionsPanelProps, MobileLayout, IMobileLayoutProps, ViewerApi, IViewerApiProps, WizardSettings, IWizardSettingsProps };
